(function() {
    var root = this;
    var previousUnderscore = root._;
    var breaker = {};
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
    var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
    };
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root._ = _;
    }
    _.VERSION = "1.6.0";
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (obj == null) return obj;
        if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; i < length; i++) {
                if (iterator.call(context, obj[i], i, obj) === breaker) return;
            }
        } else {
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
                if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
            }
        }
        return obj;
    };
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function(value, index, list) {
            results.push(iterator.call(context, value, index, list));
        });
        return results;
    };
    var reduceError = "Reduce of empty array with no initial value";
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
            if (!initial) {
                memo = value;
                initial = true;
            } else {
                memo = iterator.call(context, memo, value, index, list);
            }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };
    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
            var keys = _.keys(obj);
            length = keys.length;
        }
        each(obj, function(value, index, list) {
            index = keys ? keys[--length] : --length;
            if (!initial) {
                memo = obj[index];
                initial = true;
            } else {
                memo = iterator.call(context, memo, obj[index], index, list);
            }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };
    _.find = _.detect = function(obj, predicate, context) {
        var result;
        any(obj, function(value, index, list) {
            if (predicate.call(context, value, index, list)) {
                result = value;
                return true;
            }
        });
        return result;
    };
    _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
        each(obj, function(value, index, list) {
            if (predicate.call(context, value, index, list)) results.push(value);
        });
        return results;
    };
    _.reject = function(obj, predicate, context) {
        return _.filter(obj, function(value, index, list) {
            return !predicate.call(context, value, index, list);
        }, context);
    };
    _.every = _.all = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
        each(obj, function(value, index, list) {
            if (!(result = result && predicate.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };
    var any = _.some = _.any = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
        each(obj, function(value, index, list) {
            if (result || (result = predicate.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };
    _.contains = _.include = function(obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function(value) {
            return value === target;
        });
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            return (isFunc ? method : value[method]).apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
    };
    _.where = function(obj, attrs) {
        return _.filter(obj, _.matches(attrs));
    };
    _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matches(attrs));
    };
    _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
            return Math.max.apply(Math, obj);
        }
        var result = -Infinity, lastComputed = -Infinity;
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            if (computed > lastComputed) {
                result = value;
                lastComputed = computed;
            }
        });
        return result;
    };
    _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
            return Math.min.apply(Math, obj);
        }
        var result = Infinity, lastComputed = Infinity;
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            if (computed < lastComputed) {
                result = value;
                lastComputed = computed;
            }
        });
        return result;
    };
    _.shuffle = function(obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function(value) {
            rand = _.random(index++);
            shuffled[index - 1] = shuffled[rand];
            shuffled[rand] = value;
        });
        return shuffled;
    };
    _.sample = function(obj, n, guard) {
        if (n == null || guard) {
            if (obj.length !== +obj.length) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
    };
    var lookupIterator = function(value) {
        if (value == null) return _.identity;
        if (_.isFunction(value)) return value;
        return _.property(value);
    };
    _.sortBy = function(obj, iterator, context) {
        iterator = lookupIterator(iterator);
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iterator.call(context, value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
        }), "value");
    };
    var group = function(behavior) {
        return function(obj, iterator, context) {
            var result = {};
            iterator = lookupIterator(iterator);
            each(obj, function(value, index) {
                var key = iterator.call(context, value, index, obj);
                behavior(result, key, value);
            });
            return result;
        };
    };
    _.groupBy = group(function(result, key, value) {
        _.has(result, key) ? result[key].push(value) : result[key] = [ value ];
    });
    _.indexBy = group(function(result, key, value) {
        result[key] = value;
    });
    _.countBy = group(function(result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
    });
    _.sortedIndex = function(array, obj, iterator, context) {
        iterator = lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
            var mid = low + high >>> 1;
            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
    };
    _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj);
    };
    _.size = function(obj) {
        if (obj == null) return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
    };
    _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[0];
        if (n < 0) return [];
        return slice.call(array, 0, n);
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
    };
    _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[array.length - 1];
        return slice.call(array, Math.max(array.length - n, 0));
    };
    _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
    };
    _.compact = function(array) {
        return _.filter(array, _.identity);
    };
    var flatten = function(input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
            return concat.apply(output, input);
        }
        each(input, function(value) {
            if (_.isArray(value) || _.isArguments(value)) {
                shallow ? push.apply(output, value) : flatten(value, shallow, output);
            } else {
                output.push(value);
            }
        });
        return output;
    };
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, []);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.partition = function(array, predicate) {
        var pass = [], fail = [];
        each(array, function(elem) {
            (predicate(elem) ? pass : fail).push(elem);
        });
        return [ pass, fail ];
    };
    _.uniq = _.unique = function(array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
            context = iterator;
            iterator = isSorted;
            isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function(value, index) {
            if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                seen.push(value);
                results.push(array[index]);
            }
        });
        return results;
    };
    _.union = function() {
        return _.uniq(_.flatten(arguments, true));
    };
    _.intersection = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.contains(other, item);
            });
        });
    };
    _.difference = function(array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function(value) {
            return !_.contains(rest, value);
        });
    };
    _.zip = function() {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
            results[i] = _.pluck(arguments, "" + i);
        }
        return results;
    };
    _.object = function(list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
            if (values) {
                result[list[i]] = values[i];
            } else {
                result[list[i][0]] = list[i][1];
            }
        }
        return result;
    };
    _.indexOf = function(array, item, isSorted) {
        if (array == null) return -1;
        var i = 0, length = array.length;
        if (isSorted) {
            if (typeof isSorted == "number") {
                i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
            } else {
                i = _.sortedIndex(array, item);
                return array[i] === item ? i : -1;
            }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (;i < length; i++) if (array[i] === item) return i;
        return -1;
    };
    _.lastIndexOf = function(array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
            return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--) if (array[i] === item) return i;
        return -1;
    };
    _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0;
        }
        step = arguments[2] || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);
        while (idx < length) {
            range[idx++] = start;
            start += step;
        }
        return range;
    };
    var ctor = function() {};
    _.bind = function(func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function() {
            if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
            ctor.prototype = func.prototype;
            var self = new ctor();
            ctor.prototype = null;
            var result = func.apply(self, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return self;
        };
    };
    _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        return function() {
            var position = 0;
            var args = boundArgs.slice();
            for (var i = 0, length = args.length; i < length; i++) {
                if (args[i] === _) args[i] = arguments[position++];
            }
            while (position < arguments.length) args.push(arguments[position++]);
            return func.apply(this, args);
        };
    };
    _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");
        each(funcs, function(f) {
            obj[f] = _.bind(obj[f], obj);
        });
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    };
    _.defer = function(func) {
        return _.delay.apply(_, [ func, 1 ].concat(slice.call(arguments, 1)));
    };
    _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function() {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            context = args = null;
        };
        return function() {
            var now = _.now();
            if (!previous && options.leading === false) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0) {
                clearTimeout(timeout);
                timeout = null;
                previous = now;
                result = func.apply(context, args);
                context = args = null;
            } else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    };
    _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function() {
            var last = _.now() - timestamp;
            if (last < wait) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    context = args = null;
                }
            }
        };
        return function() {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout) {
                timeout = setTimeout(later, wait);
            }
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }
            return result;
        };
    };
    _.once = function(func) {
        var ran = false, memo;
        return function() {
            if (ran) return memo;
            ran = true;
            memo = func.apply(this, arguments);
            func = null;
            return memo;
        };
    };
    _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
    };
    _.compose = function() {
        var funcs = arguments;
        return function() {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) {
                args = [ funcs[i].apply(this, args) ];
            }
            return args[0];
        };
    };
    _.after = function(times, func) {
        return function() {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };
    _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
    };
    _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    };
    _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
            pairs[i] = [ keys[i], obj[keys[i]] ];
        }
        return pairs;
    };
    _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
        }
        return result;
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
    };
    _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) {
                for (var prop in source) {
                    obj[prop] = source[prop];
                }
            }
        });
        return obj;
    };
    _.pick = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function(key) {
            if (key in obj) copy[key] = obj[key];
        });
        return copy;
    };
    _.omit = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
            if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
    };
    _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) {
                for (var prop in source) {
                    if (obj[prop] === void 0) obj[prop] = source[prop];
                }
            }
        });
        return obj;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    var eq = function(a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        if (a == null || b == null) return a === b;
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          case "[object String]":
            return a == String(b);

          case "[object Number]":
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a == +b;

          case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != "object" || typeof b != "object") return false;
        var length = aStack.length;
        while (length--) {
            if (aStack[length] == a) return bStack[length] == b;
        }
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
            return false;
        }
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        if (className == "[object Array]") {
            size = a.length;
            result = size == b.length;
            if (result) {
                while (size--) {
                    if (!(result = eq(a[size], b[size], aStack, bStack))) break;
                }
            }
        } else {
            for (var key in a) {
                if (_.has(a, key)) {
                    size++;
                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
                }
            }
            if (result) {
                for (key in b) {
                    if (_.has(b, key) && !size--) break;
                }
                result = !size;
            }
        }
        aStack.pop();
        bStack.pop();
        return result;
    };
    _.isEqual = function(a, b) {
        return eq(a, b, [], []);
    };
    _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
    };
    _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };
    _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == "[object Array]";
    };
    _.isObject = function(obj) {
        return obj === Object(obj);
    };
    each([ "Arguments", "Function", "String", "Number", "Date", "RegExp" ], function(name) {
        _["is" + name] = function(obj) {
            return toString.call(obj) == "[object " + name + "]";
        };
    });
    if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
            return !!(obj && _.has(obj, "callee"));
        };
    }
    if (typeof /./ !== "function") {
        _.isFunction = function(obj) {
            return typeof obj === "function";
        };
    }
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj != +obj;
    };
    _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) == "[object Boolean]";
    };
    _.isNull = function(obj) {
        return obj === null;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.constant = function(value) {
        return function() {
            return value;
        };
    };
    _.property = function(key) {
        return function(obj) {
            return obj[key];
        };
    };
    _.matches = function(attrs) {
        return function(obj) {
            if (obj === attrs) return true;
            for (var key in attrs) {
                if (attrs[key] !== obj[key]) return false;
            }
            return true;
        };
    };
    _.times = function(n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
    };
    _.random = function(min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };
    _.now = Date.now || function() {
        return new Date().getTime();
    };
    var entityMap = {
        escape: {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;"
        }
    };
    entityMap.unescape = _.invert(entityMap.escape);
    var entityRegexes = {
        escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
        unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
    };
    _.each([ "escape", "unescape" ], function(method) {
        _[method] = function(string) {
            if (string == null) return "";
            return ("" + string).replace(entityRegexes[method], function(match) {
                return entityMap[method][match];
            });
        };
    });
    _.result = function(object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
    };
    _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [ this._wrapped ];
                push.apply(args, arguments);
                return result.call(this, func.apply(_, args));
            };
        });
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\t": "t",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    _.template = function(text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, function(match) {
                return "\\" + escapes[match];
            });
            if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            }
            if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            }
            if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
            }
            index = offset + match.length;
            return match;
        });
        source += "';\n";
        if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
            e.source = source;
            throw e;
        }
        if (data) return render(data, _);
        var template = function(data) {
            return render.call(this, data, _);
        };
        template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
        return template;
    };
    _.chain = function(obj) {
        return _(obj).chain();
    };
    var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
    };
    _.mixin(_);
    each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
            return result.call(this, obj);
        };
    });
    each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result.call(this, method.apply(this._wrapped, arguments));
        };
    });
    _.extend(_.prototype, {
        chain: function() {
            this._chain = true;
            return this;
        },
        value: function() {
            return this._wrapped;
        }
    });
    if (typeof define === "function" && define.amd) {
        define("underscore", [], function() {
            return _;
        });
    }
}).call(this);

(function(window, document, undefined) {
    var _MAP = {
        8: "backspace",
        9: "tab",
        13: "enter",
        16: "shift",
        17: "ctrl",
        18: "alt",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "ins",
        46: "del",
        91: "meta",
        93: "meta",
        224: "meta"
    }, _KEYCODE_MAP = {
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
    }, _SHIFT_MAP = {
        "~": "`",
        "!": "1",
        "@": "2",
        "#": "3",
        $: "4",
        "%": "5",
        "^": "6",
        "&": "7",
        "*": "8",
        "(": "9",
        ")": "0",
        _: "-",
        "+": "=",
        ":": ";",
        '"': "'",
        "<": ",",
        ">": ".",
        "?": "/",
        "|": "\\"
    }, _SPECIAL_ALIASES = {
        option: "alt",
        command: "meta",
        return: "enter",
        escape: "esc",
        mod: /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? "meta" : "ctrl"
    }, _REVERSE_MAP, _callbacks = {}, _directMap = {}, _sequenceLevels = {}, _resetTimer, _ignoreNextKeyup = false, _ignoreNextKeypress = false, _nextExpectedAction = false;
    for (var i = 1; i < 20; ++i) {
        _MAP[111 + i] = "f" + i;
    }
    for (i = 0; i <= 9; ++i) {
        _MAP[i + 96] = i;
    }
    function _addEvent(object, type, callback) {
        if (object.addEventListener) {
            object.addEventListener(type, callback, false);
            return;
        }
        object.attachEvent("on" + type, callback);
    }
    function _characterFromEvent(e) {
        if (e.type == "keypress") {
            var character = String.fromCharCode(e.which);
            if (!e.shiftKey) {
                character = character.toLowerCase();
            }
            return character;
        }
        if (_MAP[e.which]) {
            return _MAP[e.which];
        }
        if (_KEYCODE_MAP[e.which]) {
            return _KEYCODE_MAP[e.which];
        }
        return String.fromCharCode(e.which).toLowerCase();
    }
    function _modifiersMatch(modifiers1, modifiers2) {
        return modifiers1.sort().join(",") === modifiers2.sort().join(",");
    }
    function _resetSequences(doNotReset) {
        doNotReset = doNotReset || {};
        var activeSequences = false, key;
        for (key in _sequenceLevels) {
            if (doNotReset[key]) {
                activeSequences = true;
                continue;
            }
            _sequenceLevels[key] = 0;
        }
        if (!activeSequences) {
            _nextExpectedAction = false;
        }
    }
    function _getMatches(character, modifiers, e, sequenceName, combination, level) {
        var i, callback, matches = [], action = e.type;
        if (!_callbacks[character]) {
            return [];
        }
        if (action == "keyup" && _isModifier(character)) {
            modifiers = [ character ];
        }
        for (i = 0; i < _callbacks[character].length; ++i) {
            callback = _callbacks[character][i];
            if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                continue;
            }
            if (action != callback.action) {
                continue;
            }
            if (action == "keypress" && !e.metaKey && !e.ctrlKey || _modifiersMatch(modifiers, callback.modifiers)) {
                var deleteCombo = !sequenceName && callback.combo == combination;
                var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                if (deleteCombo || deleteSequence) {
                    _callbacks[character].splice(i, 1);
                }
                matches.push(callback);
            }
        }
        return matches;
    }
    function _eventModifiers(e) {
        var modifiers = [];
        if (e.shiftKey) {
            modifiers.push("shift");
        }
        if (e.altKey) {
            modifiers.push("alt");
        }
        if (e.ctrlKey) {
            modifiers.push("ctrl");
        }
        if (e.metaKey) {
            modifiers.push("meta");
        }
        return modifiers;
    }
    function _preventDefault(e) {
        if (e.preventDefault) {
            e.preventDefault();
            return;
        }
        e.returnValue = false;
    }
    function _stopPropagation(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
            return;
        }
        e.cancelBubble = true;
    }
    function _fireCallback(callback, e, combo, sequence) {
        if (Mousetrap.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
            return;
        }
        if (callback(e, combo) === false) {
            _preventDefault(e);
            _stopPropagation(e);
        }
    }
    function _handleKey(character, modifiers, e) {
        var callbacks = _getMatches(character, modifiers, e), i, doNotReset = {}, maxLevel = 0, processedSequenceCallback = false;
        for (i = 0; i < callbacks.length; ++i) {
            if (callbacks[i].seq) {
                maxLevel = Math.max(maxLevel, callbacks[i].level);
            }
        }
        for (i = 0; i < callbacks.length; ++i) {
            if (callbacks[i].seq) {
                if (callbacks[i].level != maxLevel) {
                    continue;
                }
                processedSequenceCallback = true;
                doNotReset[callbacks[i].seq] = 1;
                _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                continue;
            }
            if (!processedSequenceCallback) {
                _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
            }
        }
        var ignoreThisKeypress = e.type == "keypress" && _ignoreNextKeypress;
        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
            _resetSequences(doNotReset);
        }
        _ignoreNextKeypress = processedSequenceCallback && e.type == "keydown";
    }
    function _handleKeyEvent(e) {
        if (typeof e.which !== "number") {
            e.which = e.keyCode;
        }
        var character = _characterFromEvent(e);
        if (!character) {
            return;
        }
        if (e.type == "keyup" && _ignoreNextKeyup === character) {
            _ignoreNextKeyup = false;
            return;
        }
        Mousetrap.handleKey(character, _eventModifiers(e), e);
    }
    function _isModifier(key) {
        return key == "shift" || key == "ctrl" || key == "alt" || key == "meta";
    }
    function _resetSequenceTimer() {
        clearTimeout(_resetTimer);
        _resetTimer = setTimeout(_resetSequences, 1e3);
    }
    function _getReverseMap() {
        if (!_REVERSE_MAP) {
            _REVERSE_MAP = {};
            for (var key in _MAP) {
                if (key > 95 && key < 112) {
                    continue;
                }
                if (_MAP.hasOwnProperty(key)) {
                    _REVERSE_MAP[_MAP[key]] = key;
                }
            }
        }
        return _REVERSE_MAP;
    }
    function _pickBestAction(key, modifiers, action) {
        if (!action) {
            action = _getReverseMap()[key] ? "keydown" : "keypress";
        }
        if (action == "keypress" && modifiers.length) {
            action = "keydown";
        }
        return action;
    }
    function _bindSequence(combo, keys, callback, action) {
        _sequenceLevels[combo] = 0;
        function _increaseSequence(nextAction) {
            return function() {
                _nextExpectedAction = nextAction;
                ++_sequenceLevels[combo];
                _resetSequenceTimer();
            };
        }
        function _callbackAndReset(e) {
            _fireCallback(callback, e, combo);
            if (action !== "keyup") {
                _ignoreNextKeyup = _characterFromEvent(e);
            }
            setTimeout(_resetSequences, 10);
        }
        for (var i = 0; i < keys.length; ++i) {
            var isFinal = i + 1 === keys.length;
            var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
            _bindSingle(keys[i], wrappedCallback, action, combo, i);
        }
    }
    function _keysFromString(combination) {
        if (combination === "+") {
            return [ "+" ];
        }
        return combination.split("+");
    }
    function _getKeyInfo(combination, action) {
        var keys, key, i, modifiers = [];
        keys = _keysFromString(combination);
        for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (_SPECIAL_ALIASES[key]) {
                key = _SPECIAL_ALIASES[key];
            }
            if (action && action != "keypress" && _SHIFT_MAP[key]) {
                key = _SHIFT_MAP[key];
                modifiers.push("shift");
            }
            if (_isModifier(key)) {
                modifiers.push(key);
            }
        }
        action = _pickBestAction(key, modifiers, action);
        return {
            key: key,
            modifiers: modifiers,
            action: action
        };
    }
    function _bindSingle(combination, callback, action, sequenceName, level) {
        _directMap[combination + ":" + action] = callback;
        combination = combination.replace(/\s+/g, " ");
        var sequence = combination.split(" "), info;
        if (sequence.length > 1) {
            _bindSequence(combination, sequence, callback, action);
            return;
        }
        info = _getKeyInfo(combination, action);
        _callbacks[info.key] = _callbacks[info.key] || [];
        _getMatches(info.key, info.modifiers, {
            type: info.action
        }, sequenceName, combination, level);
        _callbacks[info.key][sequenceName ? "unshift" : "push"]({
            callback: callback,
            modifiers: info.modifiers,
            action: info.action,
            seq: sequenceName,
            level: level,
            combo: combination
        });
    }
    function _bindMultiple(combinations, callback, action) {
        for (var i = 0; i < combinations.length; ++i) {
            _bindSingle(combinations[i], callback, action);
        }
    }
    _addEvent(document, "keypress", _handleKeyEvent);
    _addEvent(document, "keydown", _handleKeyEvent);
    _addEvent(document, "keyup", _handleKeyEvent);
    var Mousetrap = {
        bind: function(keys, callback, action) {
            keys = keys instanceof Array ? keys : [ keys ];
            _bindMultiple(keys, callback, action);
            return this;
        },
        unbind: function(keys, action) {
            return Mousetrap.bind(keys, function() {}, action);
        },
        trigger: function(keys, action) {
            if (_directMap[keys + ":" + action]) {
                _directMap[keys + ":" + action]({}, keys);
            }
            return this;
        },
        reset: function() {
            _callbacks = {};
            _directMap = {};
            return this;
        },
        stopCallback: function(e, element) {
            if ((" " + element.className + " ").indexOf(" mousetrap ") > -1) {
                return false;
            }
            return element.tagName == "INPUT" || element.tagName == "SELECT" || element.tagName == "TEXTAREA" || element.isContentEditable;
        },
        handleKey: _handleKey
    };
    window.Mousetrap = Mousetrap;
    if (typeof define === "function" && define.amd) {
        define(Mousetrap);
    }
})(window, document);

(function(window, document, undefined) {
    var j = void 0, k = !0, l = null, p = !1;
    function q(a) {
        return function() {
            return this[a];
        };
    }
    var aa = this;
    function ba(a, b) {
        var c = a.split("."), d = aa;
        !(c[0] in d) && d.execScript && d.execScript("var " + c[0]);
        for (var e; c.length && (e = c.shift()); ) !c.length && b !== j ? d[e] = b : d = d[e] ? d[e] : d[e] = {};
    }
    aa.Ba = k;
    function ca(a, b, c) {
        return a.call.apply(a.bind, arguments);
    }
    function da(a, b, c) {
        if (!a) throw Error();
        if (2 < arguments.length) {
            var d = Array.prototype.slice.call(arguments, 2);
            return function() {
                var c = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(c, d);
                return a.apply(b, c);
            };
        }
        return function() {
            return a.apply(b, arguments);
        };
    }
    function s(a, b, c) {
        s = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ca : da;
        return s.apply(l, arguments);
    }
    var ea = Date.now || function() {
        return +new Date();
    };
    function fa(a, b) {
        this.G = a;
        this.u = b || a;
        this.z = this.u.document;
        this.R = j;
    }
    fa.prototype.createElement = function(a, b, c) {
        a = this.z.createElement(a);
        if (b) for (var d in b) if (b.hasOwnProperty(d)) if ("style" == d) {
            var e = a, f = b[d];
            ga(this) ? e.setAttribute("style", f) : e.style.cssText = f;
        } else a.setAttribute(d, b[d]);
        c && a.appendChild(this.z.createTextNode(c));
        return a;
    };
    function t(a, b, c) {
        a = a.z.getElementsByTagName(b)[0];
        a || (a = document.documentElement);
        a && a.lastChild && a.insertBefore(c, a.lastChild);
    }
    function u(a, b) {
        return a.createElement("link", {
            rel: "stylesheet",
            href: b
        });
    }
    function ha(a, b) {
        return a.createElement("script", {
            src: b
        });
    }
    function v(a, b) {
        for (var c = a.className.split(/\s+/), d = 0, e = c.length; d < e; d++) if (c[d] == b) return;
        c.push(b);
        a.className = c.join(" ").replace(/\s+/g, " ").replace(/^\s+|\s+$/, "");
    }
    function w(a, b) {
        for (var c = a.className.split(/\s+/), d = [], e = 0, f = c.length; e < f; e++) c[e] != b && d.push(c[e]);
        a.className = d.join(" ").replace(/\s+/g, " ").replace(/^\s+|\s+$/, "");
    }
    function ia(a, b) {
        for (var c = a.className.split(/\s+/), d = 0, e = c.length; d < e; d++) if (c[d] == b) return k;
        return p;
    }
    function ga(a) {
        if (a.R === j) {
            var b = a.z.createElement("p");
            b.innerHTML = '<a style="top:1px;">w</a>';
            a.R = /top/.test(b.getElementsByTagName("a")[0].getAttribute("style"));
        }
        return a.R;
    }
    function x(a) {
        var b = a.u.location.protocol;
        "about:" == b && (b = a.G.location.protocol);
        return "https:" == b ? "https:" : "http:";
    }
    function y(a, b, c) {
        this.w = a;
        this.T = b;
        this.Aa = c;
    }
    ba("webfont.BrowserInfo", y);
    y.prototype.qa = q("w");
    y.prototype.hasWebFontSupport = y.prototype.qa;
    y.prototype.ra = q("T");
    y.prototype.hasWebKitFallbackBug = y.prototype.ra;
    y.prototype.sa = q("Aa");
    y.prototype.hasWebKitMetricsBug = y.prototype.sa;
    function z(a, b, c, d) {
        this.e = a != l ? a : l;
        this.o = b != l ? b : l;
        this.ba = c != l ? c : l;
        this.f = d != l ? d : l;
    }
    var ja = /^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;
    z.prototype.toString = function() {
        return [ this.e, this.o || "", this.ba || "", this.f || "" ].join("");
    };
    function A(a) {
        a = ja.exec(a);
        var b = l, c = l, d = l, e = l;
        a && (a[1] !== l && a[1] && (b = parseInt(a[1], 10)), a[2] !== l && a[2] && (c = parseInt(a[2], 10)), 
        a[3] !== l && a[3] && (d = parseInt(a[3], 10)), a[4] !== l && a[4] && (e = /^[0-9]+$/.test(a[4]) ? parseInt(a[4], 10) : a[4]));
        return new z(b, c, d, e);
    }
    function B(a, b, c, d, e, f, g, h, n, m, r) {
        this.J = a;
        this.Ha = b;
        this.za = c;
        this.ga = d;
        this.Fa = e;
        this.fa = f;
        this.xa = g;
        this.Ga = h;
        this.wa = n;
        this.ea = m;
        this.k = r;
    }
    ba("webfont.UserAgent", B);
    B.prototype.getName = q("J");
    B.prototype.getName = B.prototype.getName;
    B.prototype.pa = q("za");
    B.prototype.getVersion = B.prototype.pa;
    B.prototype.la = q("ga");
    B.prototype.getEngine = B.prototype.la;
    B.prototype.ma = q("fa");
    B.prototype.getEngineVersion = B.prototype.ma;
    B.prototype.na = q("xa");
    B.prototype.getPlatform = B.prototype.na;
    B.prototype.oa = q("wa");
    B.prototype.getPlatformVersion = B.prototype.oa;
    B.prototype.ka = q("ea");
    B.prototype.getDocumentMode = B.prototype.ka;
    B.prototype.ja = q("k");
    B.prototype.getBrowserInfo = B.prototype.ja;
    function C(a, b) {
        this.a = a;
        this.H = b;
    }
    var ka = new B("Unknown", new z(), "Unknown", "Unknown", new z(), "Unknown", "Unknown", new z(), "Unknown", j, new y(p, p, p));
    C.prototype.parse = function() {
        var a;
        if (-1 != this.a.indexOf("MSIE")) {
            a = D(this);
            var b = E(this), c = A(b), d = F(this.a, /MSIE ([\d\w\.]+)/, 1), e = A(d);
            a = new B("MSIE", e, d, "MSIE", e, d, a, c, b, G(this.H), new y("Windows" == a && 6 <= e.e || "Windows Phone" == a && 8 <= c.e, p, p));
        } else if (-1 != this.a.indexOf("Opera")) a: {
            a = "Unknown";
            var b = F(this.a, /Presto\/([\d\w\.]+)/, 1), c = A(b), d = E(this), e = A(d), f = G(this.H);
            c.e !== l ? a = "Presto" : (-1 != this.a.indexOf("Gecko") && (a = "Gecko"), b = F(this.a, /rv:([^\)]+)/, 1), 
            c = A(b));
            if (-1 != this.a.indexOf("Opera Mini/")) {
                var g = F(this.a, /Opera Mini\/([\d\.]+)/, 1), h = A(g);
                a = new B("OperaMini", h, g, a, c, b, D(this), e, d, f, new y(p, p, p));
            } else {
                if (-1 != this.a.indexOf("Version/") && (g = F(this.a, /Version\/([\d\.]+)/, 1), 
                h = A(g), h.e !== l)) {
                    a = new B("Opera", h, g, a, c, b, D(this), e, d, f, new y(10 <= h.e, p, p));
                    break a;
                }
                g = F(this.a, /Opera[\/ ]([\d\.]+)/, 1);
                h = A(g);
                a = h.e !== l ? new B("Opera", h, g, a, c, b, D(this), e, d, f, new y(10 <= h.e, p, p)) : new B("Opera", new z(), "Unknown", a, c, b, D(this), e, d, f, new y(p, p, p));
            }
        } else if (/AppleWeb(K|k)it/.test(this.a)) {
            a = D(this);
            var b = E(this), c = A(b), d = F(this.a, /AppleWeb(?:K|k)it\/([\d\.\+]+)/, 1), e = A(d), f = "Unknown", g = new z(), h = "Unknown", n = p;
            -1 != this.a.indexOf("Chrome") || -1 != this.a.indexOf("CrMo") || -1 != this.a.indexOf("CriOS") ? f = "Chrome" : /Silk\/\d/.test(this.a) ? f = "Silk" : "BlackBerry" == a || "Android" == a ? f = "BuiltinBrowser" : -1 != this.a.indexOf("Safari") ? f = "Safari" : -1 != this.a.indexOf("AdobeAIR") && (f = "AdobeAIR");
            "BuiltinBrowser" == f ? h = "Unknown" : "Silk" == f ? h = F(this.a, /Silk\/([\d\._]+)/, 1) : "Chrome" == f ? h = F(this.a, /(Chrome|CrMo|CriOS)\/([\d\.]+)/, 2) : -1 != this.a.indexOf("Version/") ? h = F(this.a, /Version\/([\d\.\w]+)/, 1) : "AdobeAIR" == f && (h = F(this.a, /AdobeAIR\/([\d\.]+)/, 1));
            g = A(h);
            n = "AdobeAIR" == f ? 2 < g.e || 2 == g.e && 5 <= g.o : "BlackBerry" == a ? 10 <= c.e : "Android" == a ? 2 < c.e || 2 == c.e && 1 < c.o : 526 <= e.e || 525 <= e.e && 13 <= e.o;
            a = new B(f, g, h, "AppleWebKit", e, d, a, c, b, G(this.H), new y(n, 536 > e.e || 536 == e.e && 11 > e.o, "iPhone" == a || "iPad" == a || "iPod" == a || "Macintosh" == a));
        } else -1 != this.a.indexOf("Gecko") ? (a = "Unknown", b = new z(), c = "Unknown", 
        d = E(this), e = A(d), f = p, -1 != this.a.indexOf("Firefox") ? (a = "Firefox", 
        c = F(this.a, /Firefox\/([\d\w\.]+)/, 1), b = A(c), f = 3 <= b.e && 5 <= b.o) : -1 != this.a.indexOf("Mozilla") && (a = "Mozilla"), 
        g = F(this.a, /rv:([^\)]+)/, 1), h = A(g), f || (f = 1 < h.e || 1 == h.e && 9 < h.o || 1 == h.e && 9 == h.o && 2 <= h.ba || g.match(/1\.9\.1b[123]/) != l || g.match(/1\.9\.1\.[\d\.]+/) != l), 
        a = new B(a, b, c, "Gecko", h, g, D(this), e, d, G(this.H), new y(f, p, p))) : a = ka;
        return a;
    };
    function D(a) {
        var b = F(a.a, /(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/, 1);
        if ("" != b) return /BB\d{2}/.test(b) && (b = "BlackBerry"), b;
        a = F(a.a, /(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/, 1);
        return "" != a ? ("Mac_PowerPC" == a && (a = "Macintosh"), a) : "Unknown";
    }
    function E(a) {
        var b = F(a.a, /(OS X|Windows NT|Android) ([^;)]+)/, 2);
        if (b || (b = F(a.a, /Windows Phone( OS)? ([^;)]+)/, 2)) || (b = F(a.a, /(iPhone )?OS ([\d_]+)/, 2))) return b;
        if (b = F(a.a, /(?:Linux|CrOS) ([^;)]+)/, 1)) for (var b = b.split(/\s/), c = 0; c < b.length; c += 1) if (/^[\d\._]+$/.test(b[c])) return b[c];
        return (a = F(a.a, /(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/, 2)) ? a : "Unknown";
    }
    function F(a, b, c) {
        return (a = a.match(b)) && a[c] ? a[c] : "";
    }
    function G(a) {
        if (a.documentMode) return a.documentMode;
    }
    function la(a) {
        this.va = a || "-";
    }
    la.prototype.f = function(a) {
        for (var b = [], c = 0; c < arguments.length; c++) b.push(arguments[c].replace(/[\W_]+/g, "").toLowerCase());
        return b.join(this.va);
    };
    function H(a, b) {
        this.J = a;
        this.U = 4;
        this.K = "n";
        var c = (b || "n4").match(/^([nio])([1-9])$/i);
        c && (this.K = c[1], this.U = parseInt(c[2], 10));
    }
    H.prototype.getName = q("J");
    function I(a) {
        return a.K + a.U;
    }
    function ma(a) {
        var b = 4, c = "n", d = l;
        a && ((d = a.match(/(normal|oblique|italic)/i)) && d[1] && (c = d[1].substr(0, 1).toLowerCase()), 
        (d = a.match(/([1-9]00|normal|bold)/i)) && d[1] && (/bold/i.test(d[1]) ? b = 7 : /[1-9]00/.test(d[1]) && (b = parseInt(d[1].substr(0, 1), 10))));
        return c + b;
    }
    function na(a, b, c) {
        this.c = a;
        this.h = b;
        this.M = c;
        this.j = "wf";
        this.g = new la("-");
    }
    function pa(a) {
        v(a.h, a.g.f(a.j, "loading"));
        J(a, "loading");
    }
    function K(a) {
        w(a.h, a.g.f(a.j, "loading"));
        ia(a.h, a.g.f(a.j, "active")) || v(a.h, a.g.f(a.j, "inactive"));
        J(a, "inactive");
    }
    function J(a, b, c) {
        if (a.M[b]) if (c) a.M[b](c.getName(), I(c)); else a.M[b]();
    }
    function L(a, b) {
        this.c = a;
        this.C = b;
        this.s = this.c.createElement("span", {
            "aria-hidden": "true"
        }, this.C);
    }
    function M(a, b) {
        var c = a.s, d;
        d = [];
        for (var e = b.J.split(/,\s*/), f = 0; f < e.length; f++) {
            var g = e[f].replace(/['"]/g, "");
            -1 == g.indexOf(" ") ? d.push(g) : d.push("'" + g + "'");
        }
        d = d.join(",");
        e = "normal";
        f = b.U + "00";
        "o" === b.K ? e = "oblique" : "i" === b.K && (e = "italic");
        d = "position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:" + d + ";" + ("font-style:" + e + ";font-weight:" + f + ";");
        ga(a.c) ? c.setAttribute("style", d) : c.style.cssText = d;
    }
    function N(a) {
        t(a.c, "body", a.s);
    }
    L.prototype.remove = function() {
        var a = this.s;
        a.parentNode && a.parentNode.removeChild(a);
    };
    function qa(a, b, c, d, e, f, g, h) {
        this.V = a;
        this.ta = b;
        this.c = c;
        this.q = d;
        this.C = h || "BESbswy";
        this.k = e;
        this.F = {};
        this.S = f || 5e3;
        this.Z = g || l;
        this.B = this.A = l;
        a = new L(this.c, this.C);
        N(a);
        for (var n in O) O.hasOwnProperty(n) && (M(a, new H(O[n], I(this.q))), this.F[O[n]] = a.s.offsetWidth);
        a.remove();
    }
    var O = {
        Ea: "serif",
        Da: "sans-serif",
        Ca: "monospace"
    };
    qa.prototype.start = function() {
        this.A = new L(this.c, this.C);
        N(this.A);
        this.B = new L(this.c, this.C);
        N(this.B);
        this.ya = ea();
        M(this.A, new H(this.q.getName() + ",serif", I(this.q)));
        M(this.B, new H(this.q.getName() + ",sans-serif", I(this.q)));
        ra(this);
    };
    function sa(a, b, c) {
        for (var d in O) if (O.hasOwnProperty(d) && b === a.F[O[d]] && c === a.F[O[d]]) return k;
        return p;
    }
    function ra(a) {
        var b = a.A.s.offsetWidth, c = a.B.s.offsetWidth;
        b === a.F.serif && c === a.F["sans-serif"] || a.k.T && sa(a, b, c) ? ea() - a.ya >= a.S ? a.k.T && sa(a, b, c) && (a.Z === l || a.Z.hasOwnProperty(a.q.getName())) ? P(a, a.V) : P(a, a.ta) : setTimeout(s(function() {
            ra(this);
        }, a), 25) : P(a, a.V);
    }
    function P(a, b) {
        a.A.remove();
        a.B.remove();
        b(a.q);
    }
    function R(a, b, c, d) {
        this.c = b;
        this.t = c;
        this.N = 0;
        this.ca = this.Y = p;
        this.S = d;
        this.k = a.k;
    }
    function ta(a, b, c, d, e) {
        if (0 === b.length && e) K(a.t); else {
            a.N += b.length;
            e && (a.Y = e);
            for (e = 0; e < b.length; e++) {
                var f = b[e], g = c[f.getName()], h = a.t, n = f;
                v(h.h, h.g.f(h.j, n.getName(), I(n).toString(), "loading"));
                J(h, "fontloading", n);
                new qa(s(a.ha, a), s(a.ia, a), a.c, f, a.k, a.S, d, g).start();
            }
        }
    }
    R.prototype.ha = function(a) {
        var b = this.t;
        w(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "loading"));
        w(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "inactive"));
        v(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "active"));
        J(b, "fontactive", a);
        this.ca = k;
        ua(this);
    };
    R.prototype.ia = function(a) {
        var b = this.t;
        w(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "loading"));
        ia(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "active")) || v(b.h, b.g.f(b.j, a.getName(), I(a).toString(), "inactive"));
        J(b, "fontinactive", a);
        ua(this);
    };
    function ua(a) {
        0 == --a.N && a.Y && (a.ca ? (a = a.t, w(a.h, a.g.f(a.j, "loading")), w(a.h, a.g.f(a.j, "inactive")), 
        v(a.h, a.g.f(a.j, "active")), J(a, "active")) : K(a.t));
    }
    function S(a, b, c) {
        this.G = a;
        this.W = b;
        this.a = c;
        this.O = this.P = 0;
    }
    function T(a, b) {
        U.W.$[a] = b;
    }
    S.prototype.load = function(a) {
        var b = a.context || this.G;
        this.c = new fa(this.G, b);
        b = new na(this.c, b.document.documentElement, a);
        if (this.a.k.w) {
            var c = this.W, d = this.c, e = [], f;
            for (f in a) if (a.hasOwnProperty(f)) {
                var g = c.$[f];
                g && e.push(g(a[f], d));
            }
            a = a.timeout;
            this.O = this.P = e.length;
            a = new R(this.a, this.c, b, a);
            f = 0;
            for (c = e.length; f < c; f++) d = e[f], d.v(this.a, s(this.ua, this, d, b, a));
        } else K(b);
    };
    S.prototype.ua = function(a, b, c, d) {
        var e = this;
        d ? a.load(function(a, d, h) {
            var n = 0 == --e.P;
            n && pa(b);
            setTimeout(function() {
                ta(c, a, d || {}, h || l, n);
            }, 0);
        }) : (a = 0 == --this.P, this.O--, a && (0 == this.O ? K(b) : pa(b)), ta(c, [], {}, l, a));
    };
    var va = window, wa = new C(navigator.userAgent, document).parse(), U = va.WebFont = new S(window, new function() {
        this.$ = {};
    }(), wa);
    U.load = U.load;
    function V(a, b) {
        this.c = a;
        this.d = b;
    }
    V.prototype.load = function(a) {
        var b, c, d = this.d.urls || [], e = this.d.families || [];
        b = 0;
        for (c = d.length; b < c; b++) t(this.c, "head", u(this.c, d[b]));
        d = [];
        b = 0;
        for (c = e.length; b < c; b++) {
            var f = e[b].split(":");
            if (f[1]) for (var g = f[1].split(","), h = 0; h < g.length; h += 1) d.push(new H(f[0], g[h])); else d.push(new H(f[0]));
        }
        a(d);
    };
    V.prototype.v = function(a, b) {
        return b(a.k.w);
    };
    T("custom", function(a, b) {
        return new V(b, a);
    });
    function W(a, b) {
        this.c = a;
        this.d = b;
    }
    var xa = {
        regular: "n4",
        bold: "n7",
        italic: "i4",
        bolditalic: "i7",
        r: "n4",
        b: "n7",
        i: "i4",
        bi: "i7"
    };
    W.prototype.v = function(a, b) {
        return b(a.k.w);
    };
    W.prototype.load = function(a) {
        t(this.c, "head", u(this.c, x(this.c) + "//webfonts.fontslive.com/css/" + this.d.key + ".css"));
        for (var b = this.d.families, c = [], d = 0, e = b.length; d < e; d++) c.push.apply(c, ya(b[d]));
        a(c);
    };
    function ya(a) {
        var b = a.split(":");
        a = b[0];
        if (b[1]) {
            for (var c = b[1].split(","), b = [], d = 0, e = c.length; d < e; d++) {
                var f = c[d];
                if (f) {
                    var g = xa[f];
                    b.push(g ? g : f);
                }
            }
            c = [];
            for (d = 0; d < b.length; d += 1) c.push(new H(a, b[d]));
            return c;
        }
        return [ new H(a) ];
    }
    T("ascender", function(a, b) {
        return new W(b, a);
    });
    function X(a, b, c) {
        this.a = a;
        this.c = b;
        this.d = c;
        this.m = [];
    }
    X.prototype.v = function(a, b) {
        var c = this, d = c.d.projectId, e = c.d.version;
        if (d) {
            var f = c.c.u, g = c.c.createElement("script");
            g.id = "__MonotypeAPIScript__" + d;
            var h = p;
            g.onload = g.onreadystatechange = function() {
                if (!h && (!this.readyState || "loaded" === this.readyState || "complete" === this.readyState)) {
                    h = k;
                    if (f["__mti_fntLst" + d]) {
                        var e = f["__mti_fntLst" + d]();
                        if (e) for (var m = 0; m < e.length; m++) c.m.push(new H(e[m].fontfamily));
                    }
                    b(a.k.w);
                    g.onload = g.onreadystatechange = l;
                }
            };
            g.src = c.D(d, e);
            t(this.c, "head", g);
        } else b(k);
    };
    X.prototype.D = function(a, b) {
        var c = x(this.c), d = (this.d.api || "fast.fonts.com/jsapi").replace(/^.*http(s?):(\/\/)?/, "");
        return c + "//" + d + "/" + a + ".js" + (b ? "?v=" + b : "");
    };
    X.prototype.load = function(a) {
        a(this.m);
    };
    T("monotype", function(a, b) {
        var c = new C(navigator.userAgent, document).parse();
        return new X(c, b, a);
    });
    function Y(a, b) {
        this.c = a;
        this.d = b;
        this.m = [];
    }
    Y.prototype.D = function(a) {
        var b = x(this.c);
        return (this.d.api || b + "//use.typekit.net") + "/" + a + ".js";
    };
    Y.prototype.v = function(a, b) {
        var c = this.d.id, d = this.d, e = this.c.u, f = this;
        c ? (e.__webfonttypekitmodule__ || (e.__webfonttypekitmodule__ = {}), e.__webfonttypekitmodule__[c] = function(c) {
            c(a, d, function(a, c, d) {
                for (var e = 0; e < c.length; e += 1) {
                    var g = d[c[e]];
                    if (g) for (var Q = 0; Q < g.length; Q += 1) f.m.push(new H(c[e], g[Q])); else f.m.push(new H(c[e]));
                }
                b(a);
            });
        }, c = ha(this.c, this.D(c)), t(this.c, "head", c)) : b(k);
    };
    Y.prototype.load = function(a) {
        a(this.m);
    };
    T("typekit", function(a, b) {
        return new Y(b, a);
    });
    function za(a, b, c) {
        this.L = a ? a : b + Aa;
        this.p = [];
        this.Q = [];
        this.da = c || "";
    }
    var Aa = "//fonts.googleapis.com/css";
    za.prototype.f = function() {
        if (0 == this.p.length) throw Error("No fonts to load !");
        if (-1 != this.L.indexOf("kit=")) return this.L;
        for (var a = this.p.length, b = [], c = 0; c < a; c++) b.push(this.p[c].replace(/ /g, "+"));
        a = this.L + "?family=" + b.join("%7C");
        0 < this.Q.length && (a += "&subset=" + this.Q.join(","));
        0 < this.da.length && (a += "&text=" + encodeURIComponent(this.da));
        return a;
    };
    function Ba(a) {
        this.p = a;
        this.aa = [];
        this.I = {};
    }
    var Ca = {
        latin: "BESbswy",
        cyrillic: "&#1081;&#1103;&#1046;",
        greek: "&#945;&#946;&#931;",
        khmer: "&#x1780;&#x1781;&#x1782;",
        Hanuman: "&#x1780;&#x1781;&#x1782;"
    }, Da = {
        thin: "1",
        extralight: "2",
        "extra-light": "2",
        ultralight: "2",
        "ultra-light": "2",
        light: "3",
        regular: "4",
        book: "4",
        medium: "5",
        "semi-bold": "6",
        semibold: "6",
        "demi-bold": "6",
        demibold: "6",
        bold: "7",
        "extra-bold": "8",
        extrabold: "8",
        "ultra-bold": "8",
        ultrabold: "8",
        black: "9",
        heavy: "9",
        l: "3",
        r: "4",
        b: "7"
    }, Ea = {
        i: "i",
        italic: "i",
        n: "n",
        normal: "n"
    }, Fa = RegExp("^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$");
    Ba.prototype.parse = function() {
        for (var a = this.p.length, b = 0; b < a; b++) {
            var c = this.p[b].split(":"), d = c[0].replace(/\+/g, " "), e = [ "n4" ];
            if (2 <= c.length) {
                var f;
                var g = c[1];
                f = [];
                if (g) for (var g = g.split(","), h = g.length, n = 0; n < h; n++) {
                    var m;
                    m = g[n];
                    if (m.match(/^[\w]+$/)) {
                        m = Fa.exec(m.toLowerCase());
                        var r = j;
                        if (m == l) r = ""; else {
                            r = j;
                            r = m[1];
                            if (r == l || "" == r) r = "4"; else var oa = Da[r], r = oa ? oa : isNaN(r) ? "4" : r.substr(0, 1);
                            r = [ m[2] == l || "" == m[2] ? "n" : Ea[m[2]], r ].join("");
                        }
                        m = r;
                    } else m = "";
                    m && f.push(m);
                }
                0 < f.length && (e = f);
                3 == c.length && (c = c[2], f = [], c = !c ? f : c.split(","), 0 < c.length && (c = Ca[c[0]]) && (this.I[d] = c));
            }
            this.I[d] || (c = Ca[d]) && (this.I[d] = c);
            for (c = 0; c < e.length; c += 1) this.aa.push(new H(d, e[c]));
        }
    };
    function Z(a, b, c) {
        this.a = a;
        this.c = b;
        this.d = c;
    }
    var Ga = {
        Arimo: k,
        Cousine: k,
        Tinos: k
    };
    Z.prototype.v = function(a, b) {
        b(a.k.w);
    };
    Z.prototype.load = function(a) {
        var b = this.c;
        if ("MSIE" == this.a.getName() && this.d.blocking != k) {
            var c = s(this.X, this, a), d = function() {
                b.z.body ? c() : setTimeout(d, 0);
            };
            d();
        } else this.X(a);
    };
    Z.prototype.X = function(a) {
        for (var b = this.c, c = new za(this.d.api, x(b), this.d.text), d = this.d.families, e = d.length, f = 0; f < e; f++) {
            var g = d[f].split(":");
            3 == g.length && c.Q.push(g.pop());
            var h = "";
            2 == g.length && "" != g[1] && (h = ":");
            c.p.push(g.join(h));
        }
        d = new Ba(d);
        d.parse();
        t(b, "head", u(b, c.f()));
        a(d.aa, d.I, Ga);
    };
    T("google", function(a, b) {
        var c = new C(navigator.userAgent, document).parse();
        return new Z(c, b, a);
    });
    function $(a, b) {
        this.c = a;
        this.d = b;
        this.m = [];
    }
    $.prototype.D = function(a) {
        return x(this.c) + (this.d.api || "//f.fontdeck.com/s/css/js/") + (this.c.u.location.hostname || this.c.G.location.hostname) + "/" + a + ".js";
    };
    $.prototype.v = function(a, b) {
        var c = this.d.id, d = this.c.u, e = this;
        c ? (d.__webfontfontdeckmodule__ || (d.__webfontfontdeckmodule__ = {}), d.__webfontfontdeckmodule__[c] = function(a, c) {
            for (var d = 0, n = c.fonts.length; d < n; ++d) {
                var m = c.fonts[d];
                e.m.push(new H(m.name, ma("font-weight:" + m.weight + ";font-style:" + m.style)));
            }
            b(a);
        }, c = ha(this.c, this.D(c)), t(this.c, "head", c)) : b(k);
    };
    $.prototype.load = function(a) {
        a(this.m);
    };
    T("fontdeck", function(a, b) {
        return new $(b, a);
    });
    window.WebFontConfig && U.load(window.WebFontConfig);
})(this, document);

function Property(ctx, propName, initialValue, methods) {
    this.uniqueId = ++Property.uniqueId;
    this.isAlreadyComputed = false;
    this.ctx = ctx;
    this.propName = propName;
    this.value = initialValue;
    var self = this;
    Object.defineProperty(ctx, propName, {
        get: function() {
            if (!self.isAlreadyComputed && Property.isComputing) {
                self.compute();
            }
            return methods.get.call(ctx);
        },
        set: function(value) {
            methods.set.call(ctx, value);
        }
    });
    this.compute = function() {
        if (!self.isAlreadyComputed) {
            var oldValue = self.value;
            self.value = methods.compute.call(ctx);
            if (typeof Property.postComputeHooks[self.propName] !== "undefined") {
                self.value = Property.postComputeHooks[self.propName].call(ctx, self.value);
            }
            if (typeof Property.postComputeHooks["all"] !== "undefined") {
                self.value = Property.postComputeHooks["all"].call(ctx, self.value, self.propName);
            }
            ctx[propName] = self.value;
            self.isAlreadyComputed = true;
            Property.alreadyComputed.push(self);
            self.updateDom(oldValue);
        }
    };
    this.updateDom = function(oldValue) {
        var isNumeric = !isNaN(self.value);
        var isString = Object.prototype.toString.call(self.value) === "[object String]";
        if (isNumeric) {
            if (Math.abs(oldValue - self.value) >= .001) {
                methods.updateDom.call(ctx);
            }
        } else if (isString) {
            if (oldValue !== self.value) {
                methods.updateDom.call(ctx);
            }
        }
    };
}

Property.alreadyComputed = [];

Property.isComputing = false;

Property.uniqueId = 0;

Property.postComputeHooks = {};

var eqEd = eqEd || {};

var getInternetExplorerVersion = function() {
    var rv = -1;
    if (navigator.appName == "Microsoft Internet Explorer") {
        var ua = navigator.userAgent;
        var re = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
        if (re.exec(ua) != null) rv = parseFloat(RegExp.$1);
    } else if (navigator.appName == "Netscape") {
        var ua = navigator.userAgent;
        var re = new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})");
        if (re.exec(ua) != null) rv = parseFloat(RegExp.$1);
    }
    return rv;
};

var getChromeVersion = function() {
    if (window.navigator.appVersion.match(/Chrome\/(.*?) /) === null) {
        return -1;
    } else {
        return parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
    }
};

var ChromeVersion = getChromeVersion();

var IEVersion = getInternetExplorerVersion();

var clearHighlighted = function() {
    var isHighlighted;
    if (window.getSelection) {
        isHighlighted = window.getSelection().toString().length > 0;
    } else if (document.selection && document.selection.type != "Control") {
        isHighlighted = document.selection.createRange().text.length > 0;
    }
    if (isHighlighted) {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            } else if (window.getSelection().removeAllRanges) {
                window.getSelection().removeAllRanges();
            }
        } else if (document.selection) {
            if (document.selection.empty) {
                document.selection.empty();
            }
        }
    }
};

jQuery.fn.insertAt = function(index, element) {
    var lastIndex = this.children().size();
    if (index < 0) {
        index = Math.max(0, lastIndex + 1 + index);
    }
    this.append(element);
    if (index < lastIndex) {
        this.children().eq(index).before(this.children().last());
    }
    return this;
};

Array.prototype.max = function() {
    return Math.max.apply(Math, this);
};

Array.prototype.getMaxIndex = function() {
    var maxIndex = 0;
    for (var i = 1; i < this.length; i++) {
        if (this[i] > this[maxIndex]) {
            maxIndex = i;
        }
    }
    return maxIndex;
};

Array.prototype.getMinIndex = function() {
    var minIndex = 0;
    for (var i = 1; i < this.length; i++) {
        if (this[i] < this[minIndex]) {
            minIndex = i;
        }
    }
    return minIndex;
};

Array.prototype.contains = function(value) {
    return this.indexOf(value) > -1;
};

var inializePropertyHooks = function(symbolSizeConfig) {
    Property.postComputeHooks["width"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        return value + (this.padLeft + this.padRight) * fontHeight;
    };
    Property.postComputeHooks["height"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        if (this instanceof eqEd.Container) {
            if (this.wrappers[0] instanceof eqEd.TopLevelEmptyContainerWrapper) {
                return value;
            }
        }
        return value + (this.padTop + this.padBottom) * fontHeight;
    };
    Property.postComputeHooks["left"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        var parentFontHeight = this.parent.getFontHeight();
        var additionalLeft = 0;
        if (this instanceof eqEd.Wrapper) {
            additionalLeft = this.adjustLeft * fontHeight;
        } else {
            additionalLeft = this.parent.padLeft * parentFontHeight + this.adjustLeft * fontHeight;
        }
        return value + additionalLeft;
    };
    Property.postComputeHooks["top"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        if (this instanceof eqEd.TopLevelEmptyContainerWrapper) {
            return value;
        }
        return value + (this.parent.padTop + this.adjustTop) * fontHeight;
    };
    Property.postComputeHooks["topAlign"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        return value + this.padTop * fontHeight;
    };
    Property.postComputeHooks["bottomAlign"] = function(value) {
        if (typeof value === "undefined" || value === null) {
            value = 0;
        }
        var fontHeight = this.getFontHeight();
        return value + this.padBottom * fontHeight;
    };
    Property.postComputeHooks["all"] = function(value, propName) {
        var isNumeric = value !== null && !isNaN(value) && !(value === true || value === false) && Object.prototype.toString.call(value) !== "[object Array]";
        if (isNumeric && propName !== "padLeft" && propName !== "padRight" && propName !== "adjustTop" && propName !== "adjustLeft" && propName !== "heightRatio" && propName !== "accentGap") {
            value = Math.ceil(value);
        }
        return value;
    };
};

var loadWebfonts = function(callback) {
    WebFont.load({
        custom: {
            families: [ "MathJax_Main:n4,i4" ]
        },
        active: function() {
            callback();
        },
        inactive: function() {
            callback();
        }
    });
};

eqEd.SymbolSizeConfiguration = function() {
    this.fontSizes = [ "fontSizeSmallest", "fontSizeSmaller", "fontSizeNormal" ];
    this.fontStyles = [ "MathJax_MathItalic", "MathJax_Main", "MathJax_MainItalic", "MathJax_Size1", "MathJax_Size2", "MathJax_Size3", "MathJax_Size4" ];
    this.MathJax_Main = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "−", "÷", "⋅", "≈", "*", "-", "=", "+", "/", "<", ">", "≤", "≥", "∞", "%", "!", "$", ".", "(", ")", "[", "]", "{", "}", "∂", " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "⇌", "→", "^", "˙", "Γ", "Δ", "Θ", "Λ", "Ξ", "Π", "Σ", "Υ", "Φ", "Ψ", ",", ";", ":", "Ω", "∈", "∋", "∉", "⃗", "¯", "◦", "×", "±", "∧", "∨", "∖", "∅", "≡", "≅", "≠", "∼", "≺", "⪯", "⊂", "⊆", "⊃", "≻", "⪰", "⊥", "∣", "∥", ":", "′", "|", "∢", "∪", "∩" ];
    this.MathJax_MainItalic = [ "ı", "ȷ", "|" ];
    this.MathJax_MathItalic = [ " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Γ", "Δ", "Θ", "Λ", "Ξ", "Π", "Σ", "Υ", "Φ", "Ψ", "Ω", "α", "β", "γ", "δ", "ε", "ϵ", "ζ", "η", "θ", "ϑ", "ι", "κ", "λ", "∝", "μ", "ν", "ξ", "π", "ϖ", "ρ", "ϱ", "σ", "ς", "τ", "υ", "φ", "ϕ", "χ", "ψ", "ω", "ς", "'", "|" ];
    this.MathJax_Size1 = [ "|" ];
    this.MathJax_Size2 = [ "|" ];
    this.MathJax_Size3 = [ "(", ")", "{", "}", "[", "]", "|" ];
    this.MathJax_Size4 = [ "(", ")", "{", "}", "[", "]", "⎛", "⎜", "⎝", "⎞", "⎟", "⎠", "⎧", "⎪", "⎨", "⎩", "⎫", "⎪", "⎬", "⎭", "⎡", "⎢", "⎣", "⎤", "⎥", "⎦", "|" ];
    this.character = [];
    this.shortCharacters = [ " ", "a", "c", "e", "g", "ı", "ȷ", "m", "n", "o", "p", "q", "r", "s", "u", "v", "w", "x", "y", "z", "α", "γ", "ε", "ϵ", "η", "ι", "κ", "μ", "ν", "π", "ϖ", "ρ", "ϱ", "σ", "ς", "τ", "υ", "φ", "χ", "ω", "|" ];
    this.mediumCharacters = [ "i", "j", "t", "|" ];
    this.tallCharacters = [ "b", "d", "f", "h", "k", "l", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "β", "δ", "ζ", "θ", "ϑ", "λ", "ξ", "ϕ", "ψ", "Γ", "Δ", "Θ", "Λ", "Ξ", "Π", "Σ", "Υ", "Φ", "Ψ", "Ω", "|" ];
    this.charWidthExceedsBoundingBox = {
        b: .01,
        c: .01,
        d: .01,
        f: .15,
        g: .01,
        q: .075,
        y: .01,
        z: .01,
        B: .01,
        C: .0875,
        E: .0875,
        F: .2,
        H: .1,
        I: .175,
        J: .15,
        K: .075,
        M: .075,
        N: .125,
        P: .175,
        R: .02,
        S: .04,
        T: .25,
        U: .15,
        V: .33,
        W: .13,
        X: .075,
        Y: .33,
        Z: .08,
        "β": .05,
        "γ": .05,
        "δ": .05,
        "ζ": .075,
        "η": .05,
        "θ": .025,
        "ν": .1,
        "ξ": .025,
        "π": .025,
        "ϖ": .025,
        "ρ": .025,
        "ϱ": .025,
        "σ": .015,
        "ς": .15,
        "τ": .185,
        "υ": .015,
        "ψ": .015,
        "ı": .15,
        "ȷ": .15
    };
    this.height = {
        fontSizeMessage: 20,
        fontSizeSmallest: 30,
        fontSizeSmaller: 35,
        fontSizeNormal: 45
    };
    this.width = {};
    this.computeSymbolSizes();
};

(function() {
    eqEd.SymbolSizeConfiguration.prototype.computeSymbolSizes = function() {
        for (var i = 0; i < this.fontStyles.length; i++) {
            var fontStyle = this.fontStyles[i];
            for (var j = 0; j < this[fontStyle].length; j++) {
                var character = this[fontStyle][j];
                this.character.push(character);
                for (var k = 0; k < this.fontSizes.length; k++) {
                    var fontSize = this.fontSizes[k];
                    $(".testEquation").append('<div class="' + fontSize + " " + fontStyle + ' fontTest" id="fontTest">' + character + "</div>");
                    var fontTest = $("#fontTest");
                    if (typeof this.width[character] == "undefined") {
                        console.log("undefined char width", character);
                        this.width[character] = {};
                    }
                    if (typeof this.height[character] == "undefined") {
                        console.log("undefined char height", character);
                        this.height[character] = {};
                    }
                    if (typeof this.width[character][fontStyle] == "undefined") {
                        console.log("undefined char width font style", character);
                        this.width[character][fontStyle] = {};
                    }
                    if (typeof this.height[character][fontStyle] == "undefined") {
                        console.log("undefined char height font style", character);
                        this.height[character][fontStyle] = {};
                    }
                    var extraWidth = typeof this.charWidthExceedsBoundingBox[character] !== "undefined" ? this.charWidthExceedsBoundingBox[character] : 0;
                    this.width[character][fontStyle][fontSize] = fontTest.outerWidth() * (1 + extraWidth);
                    if (character === " ") {
                        this.width[character][fontStyle] = {
                            fontSizeSmallest: 13,
                            fontSizeSmaller: 16,
                            fontSizeNormal: 24
                        };
                    }
                    fontTest.remove();
                }
            }
        }
    };
})();

eqEd.Equation = function(symbolSizeConfig) {
    this.className = "eqEd.Equation";
    this.symbolSizeConfig = symbolSizeConfig;
    this.properties = [];
    this.left = 0;
    this.top = 0;
    this.width = 0;
    this.height = 0;
    this.padLeft = 0;
    this.padRight = 0;
    this.padTop = 0;
    this.padBottom = 0;
    this.adjustLeft = 0;
    this.adjustTop = 0;
    this.domObj = null;
    this.parent = null;
    this.children = [];
};

(function() {
    eqEd.Equation.prototype.constructor = eqEd.Equation;
    eqEd.Equation.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        return copy;
    };
    eqEd.Equation.prototype.buildDomObj = function() {};
    eqEd.Equation.prototype.update = function() {
        Property.isComputing = true;
        for (var i = 0; i < this.properties.length; i++) {
            this.properties[i].compute();
        }
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].update();
        }
    };
    eqEd.Equation.prototype.updateAll = function() {
        var currentElement = this;
        while (currentElement.parent !== null) {
            currentElement = currentElement.parent;
        }
        var rootElement = currentElement;
        Property.isComputing = true;
        rootElement.update();
        for (var i = 0; i < Property.alreadyComputed.length; i++) {
            Property.alreadyComputed[i].isAlreadyComputed = false;
        }
        Property.alreadyComputed = [];
        Property.isComputing = false;
    };
    eqEd.Equation.prototype.getFontHeight = function() {
        var context = this;
        while (typeof context.fontSize === "undefined") {
            context = context.parent;
        }
        return this.symbolSizeConfig.height[context.fontSize];
    };
    eqEd.Equation.JsonTypeToConstructor = function(type) {
        var typeToConstructorMapping = {
            Accent: eqEd.AccentWrapper,
            BigOperator: eqEd.BigOperatorWrapper,
            BracketPair: eqEd.BracketPairWrapper,
            Bracket: eqEd.BracketWrapper,
            FunctionLower: eqEd.FunctionLowerWrapper,
            FunctionHigher: eqEd.FunctionHigherWrapper,
            Function: eqEd.FunctionWrapper,
            Integral: eqEd.IntegralWrapper,
            Limit: eqEd.LimitWrapper,
            LogLower: eqEd.LogLowerWrapper,
            Matrix: eqEd.MatrixWrapper,
            NthRoot: eqEd.NthRootWrapper,
            Operator: eqEd.OperatorWrapper,
            SquareRoot: eqEd.SquareRootWrapper,
            StackedFraction: eqEd.StackedFractionWrapper,
            Subscript: eqEd.SubscriptWrapper,
            SuperscriptAndSubscript: eqEd.SuperscriptAndSubscriptWrapper,
            Superscript: eqEd.SuperscriptWrapper,
            Symbol: eqEd.SymbolWrapper
        };
        return typeToConstructorMapping[type];
    };
})();

eqEd.EquationDom = function(binding, html) {
    this.className = "eqEd.EquationDom";
    this.binding = binding;
    this.html = html;
    this.value = $(html);
    this.value.data("eqObject", this.binding);
    this.width = 0;
    this.height = 0;
    this.left = 0;
    this.top = 0;
};

eqEd.EquationDom.prototype.constructor = eqEd.EquationDom;

eqEd.EquationDom.prototype.updateWidth = function(width) {
    this.width = width;
    this.value.css("width", width + "px");
};

eqEd.EquationDom.prototype.updateHeight = function(height) {
    this.height = height;
    this.value.css("height", height + "px");
};

eqEd.EquationDom.prototype.updateLeft = function(left) {
    this.left = left;
    this.value.css("left", left + "px");
};

eqEd.EquationDom.prototype.updateTop = function(top) {
    this.top = top;
    this.value.css("top", top + "px");
};

eqEd.EquationDom.prototype.clone = function() {
    var copy = new eqEd.EquationDom(this.binding, this.html);
    copy.updateWidth(this.width);
    copy.updateHeight(this.height);
    copy.updateLeft(this.left);
    copy.updateTop(this.top);
    return copy;
};

eqEd.EquationDom.prototype.append = function(domObject) {
    this.value.append(domObject.value);
};

eqEd.EquationDom.prototype.empty = function() {
    this.value.empty();
};

eqEd.EquationDom.prototype.addClass = function(className) {
    this.value.addClass(className);
};

eqEd.EquationDom.prototype.updateFontSize = function(fontSize) {
    this.value.removeClass("fontSizeNormal");
    this.value.removeClass("fontSizeSmaller");
    this.value.removeClass("fontSizeSmallest");
    this.value.addClass(fontSize);
};

eqEd.Container = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.Container";
    this.wrappers = [];
    this.fontSize = "";
    var maxTopAlignIndex = null;
    this.properties.push(new Property(this, "maxTopAlignIndex", maxTopAlignIndex, {
        get: function() {
            return maxTopAlignIndex;
        },
        set: function(value) {
            maxTopAlignIndex = value;
        },
        compute: function() {
            var maxIndex = 0;
            for (var i = 1; i < this.wrappers.length; i++) {
                if (this.wrappers[i].topAlign > this.wrappers[maxIndex].topAlign) {
                    maxIndex = i;
                }
            }
            return this.wrappers.length === 0 ? null : maxIndex;
        },
        updateDom: function() {}
    }));
    var maxBottomAlignIndex = null;
    this.properties.push(new Property(this, "maxBottomAlignIndex", maxBottomAlignIndex, {
        get: function() {
            return maxBottomAlignIndex;
        },
        set: function(value) {
            maxBottomAlignIndex = value;
        },
        compute: function() {
            var maxIndex = 0;
            for (var i = 1; i < this.wrappers.length; i++) {
                if (this.wrappers[i].bottomAlign > this.wrappers[maxIndex].bottomAlign) {
                    maxIndex = i;
                }
            }
            return this.wrappers.length === 0 ? null : maxIndex;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var sum = 0;
            for (var i = 0; i < this.wrappers.length; i++) {
                sum += this.wrappers[i].width;
            }
            return sum;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            if (this.wrappers.length > 0) {
                return this.wrappers[this.maxTopAlignIndex].topAlign + this.wrappers[this.maxBottomAlignIndex].bottomAlign;
            } else {
                return 0;
            }
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.Container.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.Container.prototype.constructor = eqEd.Container;
    eqEd.Container.prototype.updateWrapperProperties = function() {
        for (var i = 0; i < this.wrappers.length; i++) {
            this.wrappers[i].index = i;
            this.wrappers[i].parent = this;
        }
    };
    eqEd.Container.prototype.addWrappers = function(indexAndWrapperList) {
        indexAndWrapperList = Array.prototype.slice.call(arguments);
        indexAndWrapperList = _.sortBy(indexAndWrapperList, function(innerArr) {
            return innerArr[0];
        });
        if (this.wrappers[0] instanceof eqEd.EmptyContainerWrapper || this.wrappers[0] instanceof eqEd.SquareEmptyContainerFillerWrapper) {
            this.removeWrappers(0);
        }
        for (var i = 0; i < indexAndWrapperList.length; i++) {
            var index = indexAndWrapperList[i][0];
            var wrapper = indexAndWrapperList[i][1];
            this.wrappers.splice(index, 0, wrapper);
            this.domObj.addWrapper(index, wrapper);
        }
        this.updateWrapperProperties();
    };
    eqEd.Container.prototype.removeWrappers = function(indexList) {
        indexList = Array.prototype.slice.call(arguments);
        var maxIndex = indexList[indexList.getMaxIndex()];
        var minIndex = indexList[indexList.getMinIndex()];
        var correction = 0;
        for (var i = 0; i < indexList.length; i++) {
            this.wrappers.splice(indexList[i] - correction, 1);
            this.domObj.removeWrapper(indexList[i] - correction);
            correction += 1;
        }
        -this.updateWrapperProperties();
    };
    eqEd.Container.prototype.update = function() {
        for (var i = 0; i < this.properties.length; i++) {
            this.properties[i].compute();
        }
        for (var i = 0; i < this.wrappers.length; i++) {
            this.wrappers[i].update();
        }
    };
    eqEd.Container.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        var indexAndWrapperList = [];
        for (var i = 0; i < this.wrappers.length; i++) {
            indexAndWrapperList.push([ i, this.wrappers[i].clone() ]);
        }
        eqEd.Container.prototype.addWrappers.apply(copy, indexAndWrapperList);
        return copy;
    };
    eqEd.Container.prototype.buildJsonObj = function() {
        var jsonWrappers = [];
        if (!(this.wrappers[0] instanceof eqEd.EmptyContainerWrapper)) {
            for (var i = 0; i < this.wrappers.length; i++) {
                jsonWrappers.push(this.wrappers[i].buildJsonObj());
            }
        }
        return jsonWrappers;
    };
    eqEd.Container.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer"></div>');
    };
})();

eqEd.ContainerDom = function(binding, html) {
    eqEd.EquationDom.call(this, binding, html);
    this.className = "eqEd.ContainerDom";
};

eqEd.ContainerDom.prototype = Object.create(eqEd.EquationDom.prototype);

eqEd.ContainerDom.prototype.constructor = eqEd.ContainerDom;

eqEd.ContainerDom.prototype.addWrapper = function(index, wrapper) {
    this.value.insertAt(index, wrapper.domObj.value);
};

eqEd.ContainerDom.prototype.removeWrapper = function(index) {
    this.value.children().eq(index).remove();
};

eqEd.Wrapper = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.Wrapper";
    this.topAlign = 0;
    this.bottomAlign = 0;
    this.index = null;
    this.childContainers = [];
    this.childNoncontainers = [];
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var newLeft = 0;
            if (this.index === 0) {
                newLeft = this.parent.padLeft;
            } else {
                var prevWrapper = this.parent.wrappers[this.index - 1];
                newLeft = prevWrapper.left + prevWrapper.width;
            }
            return newLeft;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return this.parent.wrappers[this.parent.maxTopAlignIndex].topAlign - this.topAlign;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return this.topAlign + this.bottomAlign;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.Wrapper.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.Wrapper.prototype.constructor = eqEd.Wrapper;
    eqEd.Wrapper.prototype.update = function() {
        for (var i = 0; i < this.properties.length; i++) {
            this.properties[i].compute();
        }
        for (var i = 0; i < this.childContainers.length; i++) {
            this.childContainers[i].update();
        }
        for (var i = 0; i < this.childNoncontainers.length; i++) {
            this.childNoncontainers[i].update();
        }
    };
    eqEd.Wrapper.prototype.buildJsonObj = function() {};
    eqEd.Wrapper.prototype.clone = function() {};
})();

eqEd.WrapperDom = function(binding, html) {
    eqEd.EquationDom.call(this, binding, html);
    this.className = "eqEd.WrapperDom";
};

eqEd.WrapperDom.prototype = Object.create(eqEd.EquationDom.prototype);

eqEd.WrapperDom.prototype.constructor = eqEd.WrapperDom;

eqEd.Symbol = function(character, fontStyle, symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.Symbol";
    this.character = character;
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    if (IEVersion >= 9) {
        if (this.fontStyle === "MathJax_MathItalic") {
            this.adjustTop = .32;
        } else {
            if (this.character !== "◦") {
                this.adjustTop = .3;
            }
        }
    } else {
        if (this.fontStyle === "MathJax_MathItalic") {
            this.adjustTop = .05;
        }
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.symbolSizeConfig.width[this.character][this.fontStyle][this.parent.parent.fontSize];
        },
        updateDom: function() {
            if (this.parent !== null && this.parent.parent.parent instanceof eqEd.AccentContainer) {
                if (this.character === "i") {
                    this.character = "ı";
                    this.domObj = this.buildDomObj();
                } else if (this.character === "j") {
                    this.character = "ȷ";
                    this.domObj = this.buildDomObj();
                }
            }
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.getFontHeight();
            return 1 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.Symbol.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.Symbol.prototype.constructor = eqEd.Symbol;
    eqEd.Symbol.prototype.buildDomObj = function() {
        var ele = "";
        if (this.character === "◦") {
            ele = '<div style="top: -20px" class="symbol ' + this.fontStyle + '">' + this.character + "</div>";
        } else {
            ele = '<div class="symbol ' + this.fontStyle + '">' + this.character + "</div>";
        }
        return new eqEd.EquationDom(this, ele);
    };
})();

eqEd.SymbolWrapper = function(character, fontStyle, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SymbolWrapper";
    this.symbol = new eqEd.Symbol(character, fontStyle, symbolSizeConfig);
    this.symbol.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.symbol.domObj);
    this.childNoncontainers = [ this.symbol ];
    var isDifferential = 0;
    this.properties.push(new Property(this, "isDifferential", isDifferential, {
        get: function() {
            return isDifferential;
        },
        set: function(value) {
            isDifferential = value;
        },
        compute: function() {
            var isDifferentialVal = false;
            if (this.symbol.character === "d") {
                if (this.index !== this.parent.wrappers.length - 1 && this.parent.wrappers[this.index + 1] instanceof eqEd.SymbolWrapper && this.parent.wrappers[this.index + 1].symbol.character !== "d") {
                    var integralCount = 0;
                    var differentialCount = 0;
                    for (var i = 0; i < this.index; i++) {
                        var wrapper = this.parent.wrappers[i];
                        if (wrapper instanceof eqEd.IntegralWrapper) {
                            integralCount += wrapper.numIntegrals;
                        } else if (wrapper instanceof eqEd.SymbolWrapper && wrapper.symbol.character === "d" && this.parent.wrappers[i + 1] instanceof eqEd.SymbolWrapper && this.parent.wrappers[i + 1].symbol.character !== "d") {
                            differentialCount++;
                        }
                    }
                    if (integralCount > differentialCount) {
                        isDifferentialVal = true;
                    }
                }
            }
            return isDifferentialVal;
        },
        updateDom: function() {}
    }));
    var padLeft = 0;
    this.properties.push(new Property(this, "padLeft", padLeft, {
        get: function() {
            return padLeft;
        },
        set: function(value) {
            padLeft = value;
        },
        compute: function() {
            var padLeftVal = 0;
            if (this.isDifferential) {
                padLeftVal = .15;
            }
            if (this.index === 0) {}
            return padLeftVal;
        },
        updateDom: function() {}
    }));
    var padRight = 0;
    this.properties.push(new Property(this, "padRight", padRight, {
        get: function() {
            return padRight;
        },
        set: function(value) {
            padRight = value;
        },
        compute: function() {
            var padRightVal = 0;
            if (this.index !== 0 && this.parent.wrappers[this.index - 1].isDifferential) {
                padRightVal += 0;
            }
            return padRightVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.symbol.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.symbol.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.symbol.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SymbolWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SymbolWrapper.prototype.constructor = eqEd.SymbolWrapper;
    eqEd.SymbolWrapper.prototype.clone = function() {
        return new this.constructor(this.symbol.character, this.symbol.fontStyle, this.symbolSizeConfig);
    };
    eqEd.SymbolWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper symbolWrapper"></div>');
    };
    eqEd.SymbolWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.symbol.character,
            operands: null
        };
        return jsonObj;
    };
    eqEd.SymbolWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var fontStyle = "";
        if (_.indexOf(symbolSizeConfig.MathJax_MathItalic, jsonObj.value) !== -1) {
            fontStyle = "MathJax_MathItalic";
        } else if (_.indexOf(symbolSizeConfig.MathJax_Main, jsonObj.value) !== -1) {
            fontStyle = "MathJax_Main";
        } else if (_.indexOf(symbolSizeConfig.MathJax_MainItalic, jsonObj.value) !== -1) {
            fontStyle = "MathJax_MainItalic";
        }
        var symbolWrapper = new eqEd.SymbolWrapper(jsonObj.value, fontStyle, symbolSizeConfig);
        return symbolWrapper;
    };
})();

eqEd.OperatorWrapper = function(operatorSymbol, fontStyle, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.OperatorWrapper";
    this.operatorSymbol = operatorSymbol;
    this.operator = new eqEd.Symbol(operatorSymbol, fontStyle, symbolSizeConfig);
    this.operator.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.operator.domObj);
    this.childNoncontainers = [ this.operator ];
    var isUnary = false;
    this.properties.push(new Property(this, "isUnary", isUnary, {
        get: function() {
            return isUnary;
        },
        set: function(value) {
            isUnary = value;
        },
        compute: function() {
            var isUnaryVal = false;
            var i = this.index;
            if ((i === 0 || this.parent.wrappers[i - 1] instanceof eqEd.OperatorWrapper || this.parent.wrappers[i - 1] instanceof eqEd.BracketWrapper && this.parent.wrappers[i - 1].bracket instanceof eqEd.LeftBracket) && (this.operator.character === "+" || this.operator.character === "−")) {
                isUnaryVal = true;
            }
            return isUnaryVal;
        },
        updateDom: function() {}
    }));
    var isComparison = false;
    this.properties.push(new Property(this, "isComparison", isComparison, {
        get: function() {
            return isComparison;
        },
        set: function(value) {
            isComparison = value;
        },
        compute: function() {
            var isComparisonVal = false;
            if (this.operator.character === "=" || this.operator.character === "<" || this.operator.character === ">" || this.operator.character === "≤" || this.operator.character === "≥" || this.operator.character === "≈" || this.operator.character === "≡" || this.operator.character === "≅" || this.operator.character === "≠" || this.operator.character === "∼" || this.operator.character === "∝" || this.operator.character === "≺" || this.operator.character === "⪯" || this.operator.character === "⊂" || this.operator.character === "⊆" || this.operator.character === "≻" || this.operator.character === "⪰") {
                isComparisonVal = true;
            }
            return isComparisonVal;
        },
        updateDom: function() {}
    }));
    var padLeft = false;
    this.properties.push(new Property(this, "padLeft", padLeft, {
        get: function() {
            return padLeft;
        },
        set: function(value) {
            padLeft = value;
        },
        compute: function() {
            var padLeftVal = .15;
            if (this.isComparison) {
                padLeftVal = .2;
            } else if (this.isUnary && this.index === 0) {
                padLeftVal = 0;
            }
            return padLeftVal;
        },
        updateDom: function() {}
    }));
    var padRight = false;
    this.properties.push(new Property(this, "padRight", padRight, {
        get: function() {
            return padRight;
        },
        set: function(value) {
            padRight = value;
        },
        compute: function() {
            var padRightVal = 0;
            if (this.isUnary) {
                padRightVal = 0;
            } else {
                if (this.isComparison) {
                    padRightVal = .2;
                } else {
                    padRightVal = .15;
                }
            }
            return padRightVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.operator.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.operator.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.operator.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.OperatorWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.OperatorWrapper.prototype.constructor = eqEd.OperatorWrapper;
    eqEd.OperatorWrapper.prototype.clone = function() {
        return new this.constructor(this.operatorSymbol, this.operator.fontStyle, this.symbolSizeConfig);
    };
    eqEd.OperatorWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper operatorWrapper"></div>');
    };
    eqEd.OperatorWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.operator.character,
            operands: null
        };
        return jsonObj;
    };
    eqEd.OperatorWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var operatorWrapper = new eqEd.OperatorWrapper(jsonObj.value, "MathJax_Main", symbolSizeConfig);
        return operatorWrapper;
    };
})();

eqEd.EmptyContainerWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.EmptyContainerWrapper";
};

(function() {
    eqEd.EmptyContainerWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.EmptyContainerWrapper.prototype.constructor = eqEd.EmptyContainerWrapper;
})();

eqEd.TopLevelEmptyContainerWrapper = function(symbolSizeConfig, editorMessage) {
    eqEd.EmptyContainerWrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.EmptyContainerWrapper";
    this.topLevelEmptyContainerMessage = new eqEd.TopLevelEmptyContainerMessage(symbolSizeConfig, editorMessage);
    this.topLevelEmptyContainerMessage.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.topLevelEmptyContainerMessage.domObj);
    this.childNoncontainers = [ this.topLevelEmptyContainerMessage ];
    this.padLeft = .25;
    this.padRight = .25;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.topLevelEmptyContainerMessage.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.getFontHeight();
            return (.5 + this.parent.padTop) * fontHeight;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.getFontHeight();
            return (.5 + this.parent.padBottom) * fontHeight;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.TopLevelEmptyContainerWrapper.prototype = Object.create(eqEd.EmptyContainerWrapper.prototype);
    eqEd.TopLevelEmptyContainerWrapper.prototype.constructor = eqEd.TopLevelEmptyContainerWrapper;
    eqEd.TopLevelEmptyContainerWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper emptyContainerWrapper topLevelEmptyContainerWrapper"></div>');
    };
})();

eqEd.TopLevelEmptyContainerMessage = function(symbolSizeConfig, editorMessage) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.TopLevelEmptyContainerMessage";
    this.message = editorMessage;
    this.fontSize = "fontSizeMessage";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.domObj.value.width();
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return this.domObj.value.height();
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.getFontHeight();
            return .5 * (this.parent.height - this.height);
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.TopLevelEmptyContainerMessage.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.TopLevelEmptyContainerMessage.prototype.constructor = eqEd.TopLevelEmptyContainerMessage;
    eqEd.TopLevelEmptyContainerMessage.prototype.clone = function() {
        return new this.constructor();
    };
    eqEd.TopLevelEmptyContainerMessage.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<span class="topLevelEmptyContainerMessage ' + this.fontSize + '">' + this.message + "</span>");
    };
})();

eqEd.SquareEmptyContainerWrapper = function(symbolSizeConfig) {
    eqEd.EmptyContainerWrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareEmptyContainerWrapper";
    this.squareEmptyContainer = new eqEd.SquareEmptyContainer(symbolSizeConfig);
    this.squareEmptyContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.squareEmptyContainer.domObj);
    this.childContainers = [ this.squareEmptyContainer ];
    this.padLeft = .05;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.squareEmptyContainer.width + 2 * this.squareEmptyContainer.borderWidth;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return .5 * fontHeight;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return .5 * fontHeight;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SquareEmptyContainerWrapper.prototype = Object.create(eqEd.EmptyContainerWrapper.prototype);
    eqEd.SquareEmptyContainerWrapper.prototype.constructor = eqEd.SquareEmptyContainerWrapper;
    eqEd.SquareEmptyContainerWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper emptyContainerWrapper squareEmptyContainerWrapper"></div>');
    };
    eqEd.SquareEmptyContainerWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.squareEmptyContainer = this.squareEmptyContainer.clone();
        copy.squareEmptyContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.squareEmptyContainer.domObj);
        copy.childContainers = [ copy.squareEmptyContainer ];
        return copy;
    };
})();

eqEd.SquareEmptyContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareEmptyContainer";
    this.borderWidth = 4;
    this.fontSize = "fontSizeNormal";
    this.domObj = this.buildDomObj();
    this.squareEmptyContainerFillerWrapper = new eqEd.SquareEmptyContainerFillerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, this.squareEmptyContainerFillerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.fontSize];
            return .5 * fontHeight - .5 * this.squareEmptyContainerFillerWrapper.height - this.borderWidth;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            return actualParentContainer.fontSize;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.SquareEmptyContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.SquareEmptyContainer.prototype.constructor = eqEd.SquareEmptyContainer;
    eqEd.SquareEmptyContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer squareEmptyContainer ' + this.fontSize + '"></div>');
    };
})();

eqEd.SquareEmptyContainerFillerWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareEmptyContainerFillerWrapper";
    this.domObj = this.buildDomObj();
    this.sideLength = .6;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return this.sideLength * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return .5 * this.sideLength * fontHeight;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return .5 * this.sideLength * fontHeight;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SquareEmptyContainerFillerWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SquareEmptyContainerFillerWrapper.prototype.constructor = eqEd.SquareEmptyContainerFillerWrapper;
    eqEd.SquareEmptyContainerFillerWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper squareEmptyContainerFillerWrapper"></div>');
    };
    eqEd.SquareEmptyContainerFillerWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        return copy;
    };
})();

eqEd.StackedFractionWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.StackedFractionWrapper";
    this.stackedFractionNumeratorContainer = new eqEd.StackedFractionNumeratorContainer(symbolSizeConfig);
    this.stackedFractionDenominatorContainer = new eqEd.StackedFractionDenominatorContainer(symbolSizeConfig);
    this.stackedFractionHorizontalBar = new eqEd.StackedFractionHorizontalBar(symbolSizeConfig);
    this.stackedFractionNumeratorContainer.parent = this;
    this.stackedFractionDenominatorContainer.parent = this;
    this.stackedFractionHorizontalBar.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.stackedFractionNumeratorContainer.domObj);
    this.domObj.append(this.stackedFractionDenominatorContainer.domObj);
    this.domObj.append(this.stackedFractionHorizontalBar.domObj);
    this.childNoncontainers = [ this.stackedFractionHorizontalBar ];
    this.childContainers = [ this.stackedFractionNumeratorContainer, this.stackedFractionDenominatorContainer ];
    this.padLeft = .05;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.stackedFractionHorizontalBar.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.stackedFractionHorizontalBar.height + this.stackedFractionNumeratorContainer.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.stackedFractionHorizontalBar.height + this.stackedFractionDenominatorContainer.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.StackedFractionWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.StackedFractionWrapper.prototype.constructor = eqEd.StackedFractionWrapper;
    eqEd.StackedFractionWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper stackedFractionWrapper"></div>');
    };
    eqEd.StackedFractionWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.stackedFractionNumeratorContainer = this.stackedFractionNumeratorContainer.clone();
        copy.stackedFractionDenominatorContainer = this.stackedFractionDenominatorContainer.clone();
        copy.stackedFractionHorizontalBar = this.stackedFractionHorizontalBar.clone();
        copy.stackedFractionNumeratorContainer.parent = copy;
        copy.stackedFractionDenominatorContainer.parent = copy;
        copy.stackedFractionHorizontalBar.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.stackedFractionNumeratorContainer.domObj);
        copy.domObj.append(copy.stackedFractionDenominatorContainer.domObj);
        copy.domObj.append(copy.stackedFractionHorizontalBar.domObj);
        copy.childNoncontainers = [ copy.stackedFractionHorizontalBar ];
        copy.childContainers = [ copy.stackedFractionNumeratorContainer, copy.stackedFractionDenominatorContainer ];
        return copy;
    };
    eqEd.StackedFractionWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                numerator: this.stackedFractionNumeratorContainer.buildJsonObj(),
                denominator: this.stackedFractionDenominatorContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.StackedFractionWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var stackedFractionWrapper = new eqEd.StackedFractionWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.numerator.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.numerator[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.numerator[i], symbolSizeConfig);
            stackedFractionWrapper.stackedFractionNumeratorContainer.addWrappers([ i, innerWrapper ]);
        }
        for (var i = 0; i < jsonObj.operands.denominator.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.denominator[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.denominator[i], symbolSizeConfig);
            stackedFractionWrapper.stackedFractionDenominatorContainer.addWrappers([ i, innerWrapper ]);
        }
        return stackedFractionWrapper;
    };
})();

eqEd.StackedFractionNumeratorContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.StackedFractionNumeratorContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padBottom = .025;
    this.padTop = .025;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var maxNumDenomWidth = this.width > this.parent.stackedFractionDenominatorContainer.width ? this.width : this.parent.stackedFractionDenominatorContainer.width;
            return .5 * (maxNumDenomWidth - this.width) + .5 * this.parent.stackedFractionHorizontalBar.exceedsMaxNumDenomWidth * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                if (actualParentContainer.parent instanceof eqEd.StackedFractionWrapper) {
                    fontSizeVal = "fontSizeSmaller";
                } else {
                    fontSizeVal = "fontSizeNormal";
                }
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.StackedFractionNumeratorContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.StackedFractionNumeratorContainer.prototype.constructor = eqEd.StackedFractionNumeratorContainer;
    eqEd.StackedFractionNumeratorContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer stackedFractionNumeratorContainer"></div>');
    };
})();

eqEd.StackedFractionDenominatorContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.StackedFractionDenominatorContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padBottom = .025;
    this.padTop = .025;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var maxNumDenomWidth = this.width > this.parent.stackedFractionNumeratorContainer.width ? this.width : this.parent.stackedFractionNumeratorContainer.width;
            return .5 * (maxNumDenomWidth - this.width) + .5 * this.parent.stackedFractionHorizontalBar.exceedsMaxNumDenomWidth * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return this.parent.stackedFractionNumeratorContainer.height + this.parent.stackedFractionHorizontalBar.height;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                if (actualParentContainer.parent instanceof eqEd.StackedFractionWrapper) {
                    fontSizeVal = "fontSizeSmaller";
                } else {
                    fontSizeVal = "fontSizeNormal";
                }
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.StackedFractionDenominatorContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.StackedFractionDenominatorContainer.prototype.constructor = eqEd.StackedFractionDenominatorContainer;
    eqEd.StackedFractionDenominatorContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer stackedFractionDenominatorContainer"></div>');
    };
})();

eqEd.StackedFractionHorizontalBar = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.StackedFractionHorizontalBar";
    this.domObj = this.buildDomObj();
    this.exceedsMaxNumDenomWidth = .25;
    this.barHeightRatio = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var maxNumDenomWidth = this.parent.stackedFractionDenominatorContainer.width > this.parent.stackedFractionNumeratorContainer.width ? this.parent.stackedFractionDenominatorContainer.width : this.parent.stackedFractionNumeratorContainer.width;
            return maxNumDenomWidth + this.exceedsMaxNumDenomWidth * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height["fontSizeNormal"];
            return this.barHeightRatio * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return this.parent.stackedFractionNumeratorContainer.height;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.StackedFractionHorizontalBar.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.StackedFractionHorizontalBar.prototype.constructor = eqEd.StackedFractionHorizontalBar;
    eqEd.StackedFractionHorizontalBar.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="stackedFractionHorizontalBar"></div>');
    };
})();

eqEd.SuperscriptWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SuperscriptWrapper";
    this.superscriptContainer = new eqEd.SuperscriptContainer(symbolSizeConfig);
    this.superscriptContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.superscriptContainer.domObj);
    this.childContainers = [ this.superscriptContainer ];
    this.maxBaseWrapperOverlap = .9;
    var padRight = 0;
    this.properties.push(new Property(this, "padRight", padRight, {
        get: function() {
            return padRight;
        },
        set: function(value) {
            padRight = value;
        },
        compute: function() {
            var padRightVal = .05;
            if (this.index !== 0 && this.parent.wrappers[this.index - 1] instanceof eqEd.FunctionWrapper) {
                if (this.parent.wrappers[this.index + 1] instanceof eqEd.BracketWrapper || this.parent.wrappers[this.index + 1] instanceof eqEd.BracketPairWrapper) {
                    padRightVal = .05;
                } else {
                    padRightVal = .175;
                }
            }
            return padRightVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.superscriptContainer.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var baseWrapper = null;
            var base = null;
            var baseWrapperOverlap = .75;
            var superscriptContainerBottomAlign = 0;
            if (this.superscriptContainer.wrappers.length !== 0) {
                superscriptContainerBottomAlign = this.superscriptContainer.wrappers[this.superscriptContainer.maxBottomAlignIndex].bottomAlign;
            }
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
                if (baseWrapper instanceof eqEd.SuperscriptWrapper || baseWrapper instanceof eqEd.SuperscriptAndSubscriptWrapper) {
                    base = baseWrapper.superscriptContainer;
                    fontHeight = this.symbolSizeConfig.height[base.fontSize];
                } else {
                    if (baseWrapper instanceof eqEd.SquareRootWrapper) {
                        baseWrapperOverlap = superscriptContainerBottomAlign / baseWrapper.height;
                        if (baseWrapperOverlap <= this.maxBaseWrapperOverlap) {
                            baseWrapperOverlap = baseWrapperOverlap;
                        } else {
                            baseWrapperOverlap = this.maxBaseWrapperOverlap;
                        }
                    }
                    if (baseWrapper instanceof eqEd.NthRootWrapper) {
                        var baseWrapperOverlap = superscriptContainerBottomAlign / baseWrapper.nthRootDiagonal.height;
                        if (baseWrapperOverlap <= this.maxBaseWrapperOverlap) {
                            baseWrapperOverlap = baseWrapperOverlap;
                        } else {
                            baseWrapperOverlap = this.maxBaseWrapperOverlap;
                        }
                    }
                    base = baseWrapper;
                }
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
                base = baseWrapper;
            }
            var topAlign = 0;
            if (baseWrapper instanceof eqEd.NthRootWrapper) {
                if (this.superscriptContainer.offsetTop * fontHeight + superscriptContainerBottomAlign > baseWrapper.nthRootDiagonal.height * baseWrapperOverlap) {
                    topAlign = this.superscriptContainer.height - (baseWrapper.nthRootDiagonal.height * baseWrapperOverlap - (base.topAlign - (base.height - baseWrapper.nthRootDiagonal.height)));
                } else {
                    topAlign = baseWrapper.topAlign - (base.height - baseWrapper.nthRootDiagonal.height) + this.superscriptContainer.height - superscriptContainerBottomAlign - this.superscriptContainer.offsetTop * fontHeight;
                }
            } else {
                if (this.superscriptContainer.offsetTop * fontHeight + superscriptContainerBottomAlign > base.height * baseWrapperOverlap) {
                    topAlign = this.superscriptContainer.height - (base.height * baseWrapperOverlap - baseWrapper.topAlign);
                } else {
                    topAlign = baseWrapper.topAlign + this.superscriptContainer.height - superscriptContainerBottomAlign - this.superscriptContainer.offsetTop * fontHeight;
                }
            }
            return topAlign;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var baseWrapper = null;
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
            }
            return baseWrapper.bottomAlign;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SuperscriptWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SuperscriptWrapper.prototype.constructor = eqEd.SuperscriptWrapper;
    eqEd.SuperscriptWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper superscriptWrapper"></div>');
    };
    eqEd.SuperscriptWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.superscriptContainer = this.superscriptContainer.clone();
        copy.superscriptContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.superscriptContainer.domObj);
        copy.childContainers = [ copy.superscriptContainer ];
        return copy;
    };
    eqEd.SuperscriptWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                superscript: this.superscriptContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.SuperscriptWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var superscriptWrapper = new eqEd.SuperscriptWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.superscript.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.superscript[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.superscript[i], symbolSizeConfig);
            superscriptWrapper.superscriptContainer.addWrappers([ i, innerWrapper ]);
        }
        return superscriptWrapper;
    };
})();

eqEd.SuperscriptContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.SuperscriptContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.offsetTop = .2;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var baseWrapper = null;
            if (this.parent.index !== 0) {
                baseWrapper = this.parent.parent.wrappers[this.parent.index - 1];
            } else {
                baseWrapper = null;
            }
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                if (baseWrapper instanceof eqEd.SuperscriptWrapper || baseWrapper instanceof eqEd.SuperscriptAndSubscriptWrapper) {
                    fontSizeVal = "fontSizeSmallest";
                } else {
                    fontSizeVal = "fontSizeSmaller";
                }
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.SuperscriptContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.SuperscriptContainer.prototype.constructor = eqEd.SuperscriptContainer;
    eqEd.SuperscriptContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer superscriptContainer"></div>');
    };
})();

eqEd.SubscriptWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SubscriptWrapper";
    this.subscriptContainer = new eqEd.SubscriptContainer(symbolSizeConfig);
    this.subscriptContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.subscriptContainer.domObj);
    this.childContainers = [ this.subscriptContainer ];
    var padRight = 0;
    this.properties.push(new Property(this, "padRight", padRight, {
        get: function() {
            return padRight;
        },
        set: function(value) {
            padRight = value;
        },
        compute: function() {
            var padRightVal = 0;
            if (this.index !== 0 && this.parent.wrappers[this.index - 1] instanceof eqEd.FunctionWrapper) {
                if (this.parent.wrappers[this.index + 1] instanceof eqEd.BracketWrapper || this.parent.wrappers[this.index + 1] instanceof eqEd.BracketPairWrapper) {
                    padRightVal = .05;
                } else {
                    padRightVal = .175;
                }
            }
            return padRightVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.subscriptContainer.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var baseWrapper = null;
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
            }
            return baseWrapper.topAlign;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var baseWrapper = null;
            var base = null;
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
                if (baseWrapper instanceof eqEd.SubscriptWrapper) {
                    base = baseWrapper.subscriptContainer;
                } else {
                    base = baseWrapper;
                }
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
                base = baseWrapper;
            }
            var fontHeightNested = this.symbolSizeConfig.height[this.subscriptContainer.fontSize];
            return this.subscriptContainer.height + baseWrapper.bottomAlign - this.subscriptContainer.offsetTop * fontHeightNested;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SubscriptWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SubscriptWrapper.prototype.constructor = eqEd.SubscriptWrapper;
    eqEd.SubscriptWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper subscriptWrapper"></div>');
    };
    eqEd.SubscriptWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.subscriptContainer = this.subscriptContainer.clone();
        copy.subscriptContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.subscriptContainer.domObj);
        copy.childContainers = [ copy.subscriptContainer ];
        return copy;
    };
    eqEd.SubscriptWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                subscript: this.subscriptContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.SubscriptWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var subscriptWrapper = new eqEd.SubscriptWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.subscript.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.subscript[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.subscript[i], symbolSizeConfig);
            subscriptWrapper.subscriptContainer.addWrappers([ i, innerWrapper ]);
        }
        return subscriptWrapper;
    };
})();

eqEd.SubscriptContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.SubscriptContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.offsetTop = .75;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var baseWrapper = null;
            if (this.parent.index !== 0) {
                baseWrapper = this.parent.parent.wrappers[this.parent.index - 1];
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent.parent;
                baseWrapper.index = 0;
                baseWrapper.update();
            }
            var fontHeight = this.symbolSizeConfig.height[this.fontSize];
            return this.parent.topAlign + baseWrapper.bottomAlign - this.offsetTop * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var baseWrapper = null;
            if (this.parent.index !== 0) {
                baseWrapper = this.parent.parent.wrappers[this.parent.index - 1];
            } else {
                baseWrapper = null;
            }
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                if (baseWrapper instanceof eqEd.SubscriptWrapper || baseWrapper instanceof eqEd.SuperscriptAndSubscriptWrapper) {
                    fontSizeVal = "fontSizeSmallest";
                } else {
                    fontSizeVal = "fontSizeSmaller";
                }
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.SubscriptContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.SubscriptContainer.prototype.constructor = eqEd.SubscriptContainer;
    eqEd.SubscriptContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer subscriptContainer"></div>');
    };
})();

eqEd.SuperscriptAndSubscriptWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SuperscriptAndSubscriptWrapper";
    this.superscriptContainer = new eqEd.SuperscriptContainer(symbolSizeConfig);
    this.subscriptContainer = new eqEd.SubscriptContainer(symbolSizeConfig);
    this.subscriptContainer.offsetTop = .45;
    this.domObj = this.buildDomObj();
    this.superscriptContainer.parent = this;
    this.subscriptContainer.parent = this;
    this.domObj.append(this.superscriptContainer.domObj);
    this.domObj.append(this.subscriptContainer.domObj);
    this.childContainers = [ this.superscriptContainer, this.subscriptContainer ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var maxWidth = this.superscriptContainer.width > this.subscriptContainer.width ? this.superscriptContainer.width : this.subscriptContainer.width;
            return maxWidth;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var baseWrapper = null;
            var base = null;
            var baseWrapperOverlap = .75;
            var superscriptContainerBottomAlign = 0;
            if (this.superscriptContainer.wrappers.length !== 0) {
                superscriptContainerBottomAlign = this.superscriptContainer.wrappers[this.superscriptContainer.maxBottomAlignIndex].bottomAlign;
            }
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
                if (baseWrapper instanceof eqEd.SuperscriptWrapper || baseWrapper instanceof eqEd.SuperscriptAndSubscriptWrapper) {
                    base = baseWrapper.superscriptContainer;
                    fontHeight = this.symbolSizeConfig.height[base.fontSize];
                } else {
                    if (baseWrapper instanceof eqEd.SquareRootWrapper) {
                        baseWrapperOverlap = superscriptContainerBottomAlign / baseWrapper.height;
                        if (baseWrapperOverlap <= this.maxBaseWrapperOverlap) {
                            baseWrapperOverlap = baseWrapperOverlap;
                        } else {
                            baseWrapperOverlap = this.maxBaseWrapperOverlap;
                        }
                    }
                    if (baseWrapper instanceof eqEd.NthRootWrapper) {
                        var baseWrapperOverlap = superscriptContainerBottomAlign / baseWrapper.nthRootDiagonal.height;
                        if (baseWrapperOverlap <= this.maxBaseWrapperOverlap) {
                            baseWrapperOverlap = baseWrapperOverlap;
                        } else {
                            baseWrapperOverlap = this.maxBaseWrapperOverlap;
                        }
                    }
                    base = baseWrapper;
                }
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
                base = baseWrapper;
            }
            var topAlign = 0;
            if (baseWrapper instanceof eqEd.NthRootWrapper) {
                if (this.superscriptContainer.offsetTop * fontHeight + superscriptContainerBottomAlign > baseWrapper.nthRootDiagonal.height * baseWrapperOverlap) {
                    topAlign = this.superscriptContainer.height - (baseWrapper.nthRootDiagonal.height * baseWrapperOverlap - (base.topAlign - (base.height - baseWrapper.nthRootDiagonal.height)));
                } else {
                    topAlign = baseWrapper.topAlign - (base.height - baseWrapper.nthRootDiagonal.height) + this.superscriptContainer.height - superscriptContainerBottomAlign - this.superscriptContainer.offsetTop * fontHeight;
                }
            } else {
                if (this.superscriptContainer.offsetTop * fontHeight + superscriptContainerBottomAlign > base.height * baseWrapperOverlap) {
                    topAlign = this.superscriptContainer.height - (base.height * baseWrapperOverlap - baseWrapper.topAlign);
                } else {
                    topAlign = baseWrapper.topAlign + this.superscriptContainer.height - superscriptContainerBottomAlign - this.superscriptContainer.offsetTop * fontHeight;
                }
            }
            return topAlign;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var baseWrapper = null;
            var base = null;
            if (this.index !== 0) {
                baseWrapper = this.parent.wrappers[this.index - 1];
                if (baseWrapper instanceof eqEd.SubscriptWrapper) {
                    base = baseWrapper.subscriptContainer;
                } else {
                    base = baseWrapper;
                }
            } else {
                baseWrapper = new eqEd.SymbolWrapper("a", "MathJax_MathItalic", this.symbolSizeConfig);
                baseWrapper.parent = this.parent;
                baseWrapper.index = 0;
                for (var i = 0; i < baseWrapper.properties.length; i++) {
                    var prop = baseWrapper.properties[i];
                    if (prop.propName !== "top" && prop.propName !== "left") {
                        prop.compute();
                    }
                }
                base = baseWrapper;
            }
            var fontHeightNested = this.symbolSizeConfig.height[this.subscriptContainer.fontSize];
            return this.subscriptContainer.height + baseWrapper.bottomAlign - this.subscriptContainer.offsetTop * fontHeightNested;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SuperscriptAndSubscriptWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SuperscriptAndSubscriptWrapper.prototype.constructor = eqEd.SuperscriptAndSubscriptWrapper;
    eqEd.SuperscriptAndSubscriptWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper superscriptAndSubscriptWrapper"></div>');
    };
    eqEd.SuperscriptAndSubscriptWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.superscriptContainer = this.superscriptContainer.clone();
        copy.subscriptContainer = this.subscriptContainer.clone();
        copy.subscriptContainer.offsetTop = .45;
        copy.domObj = copy.buildDomObj();
        copy.superscriptContainer.parent = copy;
        copy.subscriptContainer.parent = copy;
        copy.domObj.append(copy.superscriptContainer.domObj);
        copy.domObj.append(copy.subscriptContainer.domObj);
        copy.childContainers = [ copy.superscriptContainer, copy.subscriptContainer ];
        return copy;
    };
    eqEd.SuperscriptAndSubscriptWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                superscript: this.superscriptContainer.buildJsonObj(),
                subscript: this.subscriptContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.SuperscriptAndSubscriptWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var superscriptAndSubscriptWrapper = new eqEd.SuperscriptAndSubscriptWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.superscript.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.superscript[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.superscript[i], symbolSizeConfig);
            superscriptAndSubscriptWrapper.superscriptContainer.addWrappers([ i, innerWrapper ]);
        }
        for (var i = 0; i < jsonObj.operands.subscript.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.subscript[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.subscript[i], symbolSizeConfig);
            superscriptAndSubscriptWrapper.subscriptContainer.addWrappers([ i, innerWrapper ]);
        }
        return superscriptAndSubscriptWrapper;
    };
})();

eqEd.SquareRootWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareRootWrapper";
    this.domObj = this.buildDomObj();
    this.radicandContainer = new eqEd.SquareRootRadicandContainer(symbolSizeConfig);
    this.squareRootOverBar = new eqEd.SquareRootOverBar(symbolSizeConfig);
    this.radical = new eqEd.SquareRootRadical(symbolSizeConfig);
    this.squareRootDiagonal = new eqEd.SquareRootDiagonal(symbolSizeConfig);
    this.radicandContainer.parent = this;
    this.squareRootOverBar.parent = this;
    this.radical.parent = this;
    this.squareRootDiagonal.parent = this;
    this.domObj.append(this.radicandContainer.domObj);
    this.domObj.append(this.squareRootOverBar.domObj);
    this.domObj.append(this.radical.domObj);
    this.domObj.append(this.squareRootDiagonal.domObj);
    this.childContainers = [ this.radicandContainer ];
    this.childNoncontainers = [ this.squareRootDiagonal, this.radical, this.squareRootOverBar ];
    this.padBottomWhenParentIsFraction = .2;
    this.padLeft = .1;
    this.padRight = .1;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.radical.width + this.squareRootDiagonal.width + this.radicandContainer.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var topAlignVal = 0;
            if (this.radicandContainer.wrappers.length > 0) {
                topAlignVal += this.radicandContainer.wrappers[this.radicandContainer.maxTopAlignIndex].topAlign;
            }
            if (this.radicandContainer.isMaxTopAlignRootWrapper) {
                topAlignVal += this.radicandContainer.padTopMaxChildAlignTopIsRoot * fontHeight;
            } else {
                topAlignVal += this.radicandContainer.padTopMaxChildAlignTopIsNotRoot * fontHeight;
            }
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var bottomAlignVal = 0;
            if (this.radicandContainer.wrappers.length > 0) {
                bottomAlignVal += this.radicandContainer.wrappers[this.radicandContainer.maxBottomAlignIndex].bottomAlign;
            }
            if (this.radicandContainer.isMaxTopAlignRootWrapper) {
                bottomAlignVal += this.radicandContainer.padBottomMaxChildAlignTopIsRoot * fontHeight;
            } else {
                bottomAlignVal += this.radicandContainer.padBottomMaxChildAlignTopIsNotRoot * fontHeight;
            }
            if (this.parent instanceof eqEd.StackedFractionNumeratorContainer) {
                bottomAlignVal += this.padBottomWhenParentIsFraction * fontHeight;
            }
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SquareRootWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SquareRootWrapper.prototype.constructor = eqEd.SquareRootWrapper;
    eqEd.SquareRootWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper squareRootWrapper"></div>');
    };
    eqEd.SquareRootWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.domObj = copy.buildDomObj();
        copy.radicandContainer = this.radicandContainer.clone();
        copy.squareRootOverBar = this.squareRootOverBar.clone();
        copy.radical = this.radical.clone();
        copy.squareRootDiagonal = this.squareRootDiagonal.clone();
        copy.radicandContainer.parent = copy;
        copy.squareRootOverBar.parent = copy;
        copy.radical.parent = copy;
        copy.squareRootDiagonal.parent = copy;
        copy.domObj.append(copy.radicandContainer.domObj);
        copy.domObj.append(copy.squareRootOverBar.domObj);
        copy.domObj.append(copy.radical.domObj);
        copy.domObj.append(copy.squareRootDiagonal.domObj);
        copy.childContainers = [ copy.radicandContainer ];
        copy.childNoncontainers = [ copy.squareRootDiagonal, copy.radical, copy.squareRootOverBar ];
        return copy;
    };
    eqEd.SquareRootWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                radicand: this.radicandContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.SquareRootWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var squareRootWrapper = new eqEd.SquareRootWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.radicand.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.radicand[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.radicand[i], symbolSizeConfig);
            squareRootWrapper.radicandContainer.addWrappers([ i, innerWrapper ]);
        }
        return squareRootWrapper;
    };
})();

eqEd.SquareRootOverBar = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareRootOverBar";
    this.domObj = this.buildDomObj();
    this.adjustLeft = -.06;
    this.heightRatio = .055;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return this.parent.radicandContainer.width - this.adjustLeft * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height["fontSizeNormal"];
            return this.heightRatio * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return this.parent.radical.width + this.parent.squareRootDiagonal.width;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.SquareRootOverBar.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.SquareRootOverBar.prototype.constructor = eqEd.SquareRootOverBar;
    eqEd.SquareRootOverBar.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="squareRootOverBar"></div>');
    };
})();

eqEd.SquareRootRadical = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareRootRadical";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var widthVal = 0;
            if (this.parent.squareRootDiagonal.height < 2 * fontHeight) {
                widthVal = .4 * fontHeight;
            } else {
                widthVal = .5 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var heightVal = 0;
            if (this.parent.squareRootDiagonal.height < 2 * fontHeight) {
                heightVal = .7 * fontHeight;
            } else {
                heightVal = .75 * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return this.parent.squareRootDiagonal.height - this.height;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.SquareRootRadical.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.SquareRootRadical.prototype.constructor = eqEd.SquareRootRadical;
    eqEd.SquareRootRadical.prototype.buildDomObj = function() {
        var htmlRep = '<div class="squareRootRadical" style="width: 74.842293px; height: 127.48769px;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 74.842293 127.48769" preserveAspectRatio="none"><defs id="defs4"><clipPath clipPathUnits="userSpaceOnUse" id="clipPath3765"><rect style="fill:#b1ded2;fill-opacity:1;stroke:none" id="rect3767" width="74.842293" height="127.62585" x="198.84776" y="668.99451" /></clipPath></defs><g inkscape:label="Layer 1" inkscape:groupmode="layer" id="layer1" transform="translate(-198.84776,-668.99451)"><g clip-path="url(#clipPath3765)"><path d="m 265.30006,796.48219 -47.75994,-111.23309 -14.88621,11.47479 -3.82493,-3.82493 30.28931,-23.46646 44.65864,103.89336 109.8892,-228.9789 c 0.68896,-1.30943 1.89502,-1.96414 3.61817,-1.96415 1.17139,1e-5 2.17069,0.41351 2.99792,1.24052 0.8268,0.82701 1.2403,1.82632 1.24052,2.99791 -2.2e-4,0.68918 -0.0691,1.17161 -0.20676,1.44728 L 273.15667,794.51804 c -0.55144,1.30919 -1.61966,1.96391 -3.20467,1.96415 l -4.65194,0" style="" id="path2987" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.SquareRootDiagonal = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareRootDiagonal";
    this.domObj = this.buildDomObj();
    this.adjustLeft = -.035;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .58 * fontHeight + .05 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var heightVal = this.parent.radicandContainer.height;
            if (this.parent.radicandContainer.isMaxTopAlignRootWrapper) {
                heightVal += (this.parent.radicandContainer.padTopMaxChildAlignTopIsRoot + this.parent.radicandContainer.padBottomMaxChildAlignTopIsRoot) * fontHeight;
            } else {
                heightVal += (this.parent.radicandContainer.padTopMaxChildAlignTopIsNotRoot + this.parent.radicandContainer.padBottomMaxChildAlignTopIsNotRoot) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return this.parent.radical.width;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.SquareRootDiagonal.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.SquareRootDiagonal.prototype.constructor = eqEd.SquareRootDiagonal;
    eqEd.SquareRootDiagonal.prototype.buildDomObj = function() {
        var htmlRep = '<div class="squareRootDiagonal" style="width: 130.0331px; height: 256.45282px;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 130.0331 256.45282" preserveAspectRatio="none"><g transform="translate(-391.39675,-547.35338)"><g transform="scale(1.1433177,0.87464752)" style="font-size:162.99891663px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:cmex10;-inkscape-font-specification:cmex10" id="text2989"><path d="m 342.3342,915.58351 0,-0.95508 c 0.053,-0.1064 0.0796,-0.21252 0.0796,-0.31835 0.053,-0.1064 0.0796,-0.21252 0.0796,-0.31836 L 448.42675,628.42526 c 0.42437,-1.37954 1.51208,-2.25503 3.26317,-2.62645 l 0.95507,0 c 1.75084,0.31836 2.89162,1.45914 3.42234,3.42234 l 0,0.95507 c -1.2e-4,0.10612 -0.0267,0.23877 -0.0796,0.39795 -1.2e-4,0.10612 -0.0266,0.21224 -0.0796,0.31836 L 349.97477,916.45899 c -0.42449,1.3262 -1.51221,2.17515 -3.26316,2.54686 l -0.95507,0 c -1.75098,-0.31865 -2.89176,-1.45943 -3.42234,-3.42234" style="" id="path2987" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.SquareRootRadicandContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.SquareRootRadicandContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padTopMaxChildAlignTopIsRoot = .45;
    this.padTopMaxChildAlignTopIsNotRoot = .15;
    this.padBottomMaxChildAlignTopIsRoot = .2;
    this.padBottomMaxChildAlignTopIsNotRoot = 0;
    var isMaxTopAlignRootWrapper = false;
    this.properties.push(new Property(this, "isMaxTopAlignRootWrapper", isMaxTopAlignRootWrapper, {
        get: function() {
            return isMaxTopAlignRootWrapper;
        },
        set: function(value) {
            isMaxTopAlignRootWrapper = value;
        },
        compute: function() {
            var maxTopAlignIndexWrapper = this.wrappers[this.maxTopAlignIndex];
            return maxTopAlignIndexWrapper instanceof eqEd.SquareRootWrapper || maxTopAlignIndexWrapper instanceof eqEd.NthRootWrapper;
        },
        updateDom: function() {}
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return this.parent.radical.width + this.parent.squareRootDiagonal.width;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.isMaxTopAlignRootWrapper) {
                topVal += this.padTopMaxChildAlignTopIsRoot * fontHeight;
            } else {
                topVal += this.padTopMaxChildAlignTopIsNotRoot * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            return actualParentContainer.fontSize;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.SquareRootRadicandContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.SquareRootRadicandContainer.prototype.constructor = eqEd.SquareRootRadicandContainer;
    eqEd.SquareRootRadicandContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer squareRootRadicandContainer"></div>');
    };
})();

eqEd.NthRootWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootWrapper";
    this.domObj = this.buildDomObj();
    this.radicandContainer = new eqEd.NthRootRadicandContainer(symbolSizeConfig);
    this.nthRootOverBar = new eqEd.NthRootOverBar(symbolSizeConfig);
    this.radical = new eqEd.NthRootRadical(symbolSizeConfig);
    this.nthRootDiagonal = new eqEd.NthRootDiagonal(symbolSizeConfig);
    this.nthRootDegreeContainer = new eqEd.NthRootDegreeContainer(symbolSizeConfig);
    this.radicandContainer.parent = this;
    this.nthRootOverBar.parent = this;
    this.radical.parent = this;
    this.nthRootDiagonal.parent = this;
    this.nthRootDegreeContainer.parent = this;
    this.domObj.append(this.nthRootDegreeContainer.domObj);
    this.domObj.append(this.radicandContainer.domObj);
    this.domObj.append(this.nthRootOverBar.domObj);
    this.domObj.append(this.radical.domObj);
    this.domObj.append(this.nthRootDiagonal.domObj);
    this.childContainers = [ this.nthRootDegreeContainer, this.radicandContainer ];
    this.childNoncontainers = [ this.nthRootDiagonal, this.radical, this.nthRootOverBar ];
    this.padBottomWhenParentIsFraction = .2;
    this.padLeft = .1;
    this.padRight = .1;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = this.radical.width + this.nthRootDiagonal.width + this.radicandContainer.width;
            if (this.nthRootDegreeContainer.isLeftFlushToWrapper) {
                widthVal += this.nthRootDegreeContainer.width - this.nthRootDegreeContainer.offsetRadicalRight * fontHeight + this.nthRootDegreeContainer.diagonalHeightAdjustment * this.nthRootDiagonal.height - this.radical.width;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var topAlignVal = 0;
            if (this.radicandContainer.wrappers.length > 0) {
                topAlignVal += this.radicandContainer.wrappers[this.radicandContainer.maxTopAlignIndex].topAlign;
            }
            if (this.radicandContainer.isMaxTopAlignRootWrapper) {
                topAlignVal += this.radicandContainer.padTopMaxChildAlignTopIsRoot * fontHeight;
            } else {
                topAlignVal += this.radicandContainer.padTopMaxChildAlignTopIsNotRoot * fontHeight;
            }
            if (this.nthRootDegreeContainer.isTopFlushToWrapper) {
                topAlignVal += this.nthRootDegreeContainer.height + this.radical.height + this.nthRootDegreeContainer.offsetRadicalBottom * fontHeight - this.nthRootDiagonal.height;
            }
            console.log(this.nthRootDegreeContainer.isTopFlushToWrapper);
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var bottomAlignVal = 0;
            if (this.radicandContainer.wrappers.length > 0) {
                bottomAlignVal += this.radicandContainer.wrappers[this.radicandContainer.maxBottomAlignIndex].bottomAlign;
            }
            if (this.radicandContainer.isMaxTopAlignRootWrapper) {
                bottomAlignVal += this.radicandContainer.padBottomMaxChildAlignTopIsRoot * fontHeight;
            } else {
                bottomAlignVal += this.radicandContainer.padBottomMaxChildAlignTopIsNotRoot * fontHeight;
            }
            if (this.parent instanceof eqEd.StackedFractionNumeratorContainer) {
                bottomAlignVal += this.padBottomWhenParentIsFraction * fontHeight;
            }
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.NthRootWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.NthRootWrapper.prototype.constructor = eqEd.NthRootWrapper;
    eqEd.NthRootWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper nthRootWrapper"></div>');
    };
    eqEd.NthRootWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.domObj = copy.buildDomObj();
        copy.radicandContainer = this.radicandContainer.clone();
        copy.nthRootOverBar = this.nthRootOverBar.clone();
        copy.radical = this.radical.clone();
        copy.nthRootDiagonal = this.nthRootDiagonal.clone();
        copy.nthRootDegreeContainer = this.nthRootDegreeContainer.clone();
        copy.radicandContainer.parent = copy;
        copy.nthRootOverBar.parent = copy;
        copy.radical.parent = copy;
        copy.nthRootDiagonal.parent = copy;
        copy.nthRootDegreeContainer.parent = copy;
        copy.domObj.append(copy.radicandContainer.domObj);
        copy.domObj.append(copy.nthRootOverBar.domObj);
        copy.domObj.append(copy.radical.domObj);
        copy.domObj.append(copy.nthRootDiagonal.domObj);
        copy.domObj.append(copy.nthRootDegreeContainer.domObj);
        copy.childContainers = [ copy.radicandContainer, copy.nthRootDegreeContainer ];
        copy.childNoncontainers = [ copy.nthRootDiagonal, copy.radical, copy.nthRootOverBar ];
        return copy;
    };
    eqEd.NthRootWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                radicand: this.radicandContainer.buildJsonObj(),
                degree: this.nthRootDegreeContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.NthRootWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var nthRootWrapper = new eqEd.NthRootWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.radicand.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.radicand[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.radicand[i], symbolSizeConfig);
            nthRootWrapper.radicandContainer.addWrappers([ i, innerWrapper ]);
        }
        for (var i = 0; i < jsonObj.operands.degree.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.degree[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.degree[i], symbolSizeConfig);
            nthRootWrapper.nthRootDegreeContainer.addWrappers([ i, innerWrapper ]);
        }
        return nthRootWrapper;
    };
})();

eqEd.NthRootOverBar = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootOverBar";
    this.domObj = this.buildDomObj();
    this.adjustLeft = -.06;
    this.heightRatio = .055;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return this.parent.radicandContainer.width - this.adjustLeft * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height["fontSizeNormal"];
            return this.heightRatio * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = this.parent.radical.width + this.parent.nthRootDiagonal.width;
            if (this.parent.nthRootDegreeContainer.isLeftFlushToWrapper) {
                leftVal += this.parent.nthRootDegreeContainer.width - this.parent.nthRootDegreeContainer.offsetRadicalRight * fontHeight + this.parent.nthRootDegreeContainer.diagonalHeightAdjustment * this.parent.nthRootDiagonal.height - this.parent.radical.width;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.nthRootDegreeContainer.isTopFlushToWrapper) {
                topVal += this.parent.nthRootDegreeContainer.height + this.parent.radical.height + this.parent.nthRootDegreeContainer.offsetRadicalBottom * fontHeight - this.parent.nthRootDiagonal.height;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.NthRootOverBar.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.NthRootOverBar.prototype.constructor = eqEd.NthRootOverBar;
    eqEd.NthRootOverBar.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="nthRootOverBar"></div>');
    };
})();

eqEd.NthRootRadical = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootRadical";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var widthVal = 0;
            if (this.parent.nthRootDiagonal.height < 2 * fontHeight) {
                widthVal = .4 * fontHeight;
            } else {
                widthVal = .5 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var heightVal = 0;
            if (this.parent.nthRootDiagonal.height < 2 * fontHeight) {
                heightVal = .7 * fontHeight;
            } else {
                heightVal = .75 * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.nthRootDegreeContainer.isLeftFlushToWrapper) {
                leftVal += this.parent.nthRootDegreeContainer.width - this.parent.nthRootDegreeContainer.offsetRadicalRight * fontHeight + this.parent.nthRootDegreeContainer.diagonalHeightAdjustment * this.parent.nthRootDiagonal.height - this.parent.radical.width;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = this.parent.nthRootDiagonal.height - this.height;
            if (this.parent.nthRootDegreeContainer.isTopFlushToWrapper) {
                topVal += this.parent.nthRootDegreeContainer.height + this.parent.radical.height + this.parent.nthRootDegreeContainer.offsetRadicalBottom * fontHeight - this.parent.nthRootDiagonal.height;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.NthRootRadical.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.NthRootRadical.prototype.constructor = eqEd.NthRootRadical;
    eqEd.NthRootRadical.prototype.buildDomObj = function() {
        var htmlRep = '<div class="nthRootRadical" style="width: 74.842293px; height: 127.48769px;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 74.842293 127.48769" preserveAspectRatio="none"><defs id="defs4"><clipPath clipPathUnits="userSpaceOnUse" id="clipPath3765"><rect style="fill:#b1ded2;fill-opacity:1;stroke:none" id="rect3767" width="74.842293" height="127.62585" x="198.84776" y="668.99451" /></clipPath></defs><g inkscape:label="Layer 1" inkscape:groupmode="layer" id="layer1" transform="translate(-198.84776,-668.99451)"><g clip-path="url(#clipPath3765)"><path d="m 265.30006,796.48219 -47.75994,-111.23309 -14.88621,11.47479 -3.82493,-3.82493 30.28931,-23.46646 44.65864,103.89336 109.8892,-228.9789 c 0.68896,-1.30943 1.89502,-1.96414 3.61817,-1.96415 1.17139,1e-5 2.17069,0.41351 2.99792,1.24052 0.8268,0.82701 1.2403,1.82632 1.24052,2.99791 -2.2e-4,0.68918 -0.0691,1.17161 -0.20676,1.44728 L 273.15667,794.51804 c -0.55144,1.30919 -1.61966,1.96391 -3.20467,1.96415 l -4.65194,0" style="" id="path2987" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.NthRootDiagonal = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootDiagonal";
    this.domObj = this.buildDomObj();
    this.adjustLeft = -.035;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .58 * fontHeight + .05 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var heightVal = this.parent.radicandContainer.height;
            if (this.parent.radicandContainer.isMaxTopAlignRootWrapper) {
                heightVal += (this.parent.radicandContainer.padTopMaxChildAlignTopIsRoot + this.parent.radicandContainer.padBottomMaxChildAlignTopIsRoot) * fontHeight;
            } else {
                heightVal += (this.parent.radicandContainer.padTopMaxChildAlignTopIsNotRoot + this.parent.radicandContainer.padBottomMaxChildAlignTopIsNotRoot) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = this.parent.radical.width;
            if (this.parent.nthRootDegreeContainer.isLeftFlushToWrapper) {
                leftVal += this.parent.nthRootDegreeContainer.width - this.parent.nthRootDegreeContainer.offsetRadicalRight * fontHeight + this.parent.nthRootDegreeContainer.diagonalHeightAdjustment * this.parent.nthRootDiagonal.height - this.parent.radical.width;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.nthRootDegreeContainer.isTopFlushToWrapper) {
                topVal += this.parent.nthRootDegreeContainer.height + this.parent.radical.height + this.parent.nthRootDegreeContainer.offsetRadicalBottom * fontHeight - this.height;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.NthRootDiagonal.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.NthRootDiagonal.prototype.constructor = eqEd.NthRootDiagonal;
    eqEd.NthRootDiagonal.prototype.buildDomObj = function() {
        var htmlRep = '<div class="nthRootDiagonal" style="width: 130.0331px; height: 256.45282px;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 130.0331 256.45282" preserveAspectRatio="none"><g transform="translate(-391.39675,-547.35338)"><g transform="scale(1.1433177,0.87464752)" style="font-size:162.99891663px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:cmex10;-inkscape-font-specification:cmex10" id="text2989"><path d="m 342.3342,915.58351 0,-0.95508 c 0.053,-0.1064 0.0796,-0.21252 0.0796,-0.31835 0.053,-0.1064 0.0796,-0.21252 0.0796,-0.31836 L 448.42675,628.42526 c 0.42437,-1.37954 1.51208,-2.25503 3.26317,-2.62645 l 0.95507,0 c 1.75084,0.31836 2.89162,1.45914 3.42234,3.42234 l 0,0.95507 c -1.2e-4,0.10612 -0.0267,0.23877 -0.0796,0.39795 -1.2e-4,0.10612 -0.0266,0.21224 -0.0796,0.31836 L 349.97477,916.45899 c -0.42449,1.3262 -1.51221,2.17515 -3.26316,2.54686 l -0.95507,0 c -1.75098,-0.31865 -2.89176,-1.45943 -3.42234,-3.42234" style="" id="path2987" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.NthRootRadicandContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootRadicandContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padTopMaxChildAlignTopIsRoot = .45;
    this.padTopMaxChildAlignTopIsNotRoot = .15;
    this.padBottomMaxChildAlignTopIsRoot = .2;
    this.padBottomMaxChildAlignTopIsNotRoot = 0;
    var isMaxTopAlignRootWrapper = false;
    this.properties.push(new Property(this, "isMaxTopAlignRootWrapper", isMaxTopAlignRootWrapper, {
        get: function() {
            return isMaxTopAlignRootWrapper;
        },
        set: function(value) {
            isMaxTopAlignRootWrapper = value;
        },
        compute: function() {
            var maxTopAlignIndexWrapper = this.wrappers[this.maxTopAlignIndex];
            return maxTopAlignIndexWrapper instanceof eqEd.SquareRootWrapper || maxTopAlignIndexWrapper instanceof eqEd.NthRootWrapper;
        },
        updateDom: function() {}
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = this.parent.radical.width + this.parent.nthRootDiagonal.width;
            if (this.parent.nthRootDegreeContainer.isLeftFlushToWrapper) {
                leftVal += this.parent.nthRootDegreeContainer.width - this.parent.nthRootDegreeContainer.offsetRadicalRight * fontHeight + this.parent.nthRootDegreeContainer.diagonalHeightAdjustment * this.parent.nthRootDiagonal.height - this.parent.radical.width;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.isMaxTopAlignRootWrapper) {
                topVal += this.padTopMaxChildAlignTopIsRoot * fontHeight;
            } else {
                topVal += this.padTopMaxChildAlignTopIsNotRoot * fontHeight;
            }
            if (this.parent.nthRootDegreeContainer.isTopFlushToWrapper) {
                topVal += this.parent.nthRootDegreeContainer.height + this.parent.radical.height + this.parent.nthRootDegreeContainer.offsetRadicalBottom * fontHeight - this.parent.nthRootDiagonal.height;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            return actualParentContainer.fontSize;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.NthRootRadicandContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.NthRootRadicandContainer.prototype.constructor = eqEd.NthRootRadicandContainer;
    eqEd.NthRootRadicandContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer nthRootRadicandContainer"></div>');
    };
})();

eqEd.NthRootDegreeContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.NthRootDegreeContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.offsetRadicalBottom = -.1;
    this.offsetRadicalRight = .3;
    this.diagonalHeightAdjustment = .048;
    var isLeftFlushToWrapper = false;
    this.properties.push(new Property(this, "isLeftFlushToWrapper", isLeftFlushToWrapper, {
        get: function() {
            return isLeftFlushToWrapper;
        },
        set: function(value) {
            isLeftFlushToWrapper = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var diagonalHeight = this.parent.radicandContainer.height;
            var isLeftFlushToWrapperVal = true;
            if (this.width - this.offsetRadicalRight * fontHeight + this.diagonalHeightAdjustment * diagonalHeight < this.parent.radical.width) {
                isLeftFlushToWrapperVal = false;
            }
            return isLeftFlushToWrapperVal;
        },
        updateDom: function() {}
    }));
    var isTopFlushToWrapper = false;
    this.properties.push(new Property(this, "isTopFlushToWrapper", isTopFlushToWrapper, {
        get: function() {
            return isTopFlushToWrapper;
        },
        set: function(value) {
            isTopFlushToWrapper = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var diagonalHeight = this.parent.radicandContainer.height;
            var isTopFlushToWrapperVal = false;
            if (diagonalHeight - (this.parent.radical.height + this.offsetRadicalBottom * fontHeight) < this.height) {
                isTopFlushToWrapperVal = true;
            }
            return isTopFlushToWrapperVal;
        },
        updateDom: function() {}
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (!this.isLeftFlushToWrapper) {
                leftVal += this.parent.radical.width - (this.width - this.offsetRadicalRight * fontHeight + this.diagonalHeightAdjustment * this.parent.nthRootDiagonal.height);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (!this.isTopFlushToWrapper) {
                topVal += this.parent.nthRootDiagonal.height - this.parent.radical.height - this.offsetRadicalBottom * fontHeight - this.height;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            return "fontSizeSmallest";
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.NthRootDegreeContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.NthRootDegreeContainer.prototype.constructor = eqEd.NthRootDegreeContainer;
    eqEd.NthRootDegreeContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer nthRootDegreeContainer"></div>');
    };
})();

eqEd.BracketWrapper = function(bracketType, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.BracketWrapper";
    this.bracketType = bracketType;
    var bracketCtors = {
        leftParenthesisBracket: eqEd.LeftParenthesisBracket,
        rightParenthesisBracket: eqEd.RightParenthesisBracket,
        leftSquareBracket: eqEd.LeftSquareBracket,
        rightSquareBracket: eqEd.RightSquareBracket,
        leftCurlyBracket: eqEd.LeftCurlyBracket,
        beginCases: eqEd.BeginCases,
        rightCurlyBracket: eqEd.RightCurlyBracket,
        leftAngleBracket: eqEd.LeftAngleBracket,
        rightAngleBracket: eqEd.RightAngleBracket,
        leftFloorBracket: eqEd.LeftFloorBracket,
        rightFloorBracket: eqEd.RightFloorBracket,
        leftCeilBracket: eqEd.LeftCeilBracket,
        rightCeilBracket: eqEd.RightCeilBracket
    };
    this.domObj = this.buildDomObj();
    this.bracket = new bracketCtors[bracketType](symbolSizeConfig);
    this.bracket.parent = this;
    this.domObj.append(this.bracket.domObj);
    this.childNoncontainers = [ this.bracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.bracket.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.bracket.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.bracket.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.BracketWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.BracketWrapper.prototype.constructor = eqEd.BracketWrapper;
    eqEd.BracketWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper bracketWrapper ' + this.bracketType + '"></div>');
    };
    eqEd.BracketWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.bracketType, this.symbolSizeConfig);
        return copy;
    };
    eqEd.BracketWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.bracketType,
            operands: null
        };
        return jsonObj;
    };
    eqEd.BracketWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var bracketWrapper = new eqEd.BracketWrapper(jsonObj.value, symbolSizeConfig);
        return bracketWrapper;
    };
})();

eqEd.Bracket = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.Bracket";
    if (IEVersion >= 9) {
        this.adjustTop += .28;
    }
    var heightRatio = 0;
    this.properties.push(new Property(this, "heightRatio", heightRatio, {
        get: function() {
            return heightRatio;
        },
        set: function(value) {
            heightRatio = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return this.desiredHeight / fontHeight;
        },
        updateDom: function() {
            this.updateBracketStructure();
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var topVal = 0;
            if (this.parent instanceof eqEd.BracketPairWrapper) {
                if (this.parent.bracketContainer.wrappers.length > 0) {
                    var containerTopAlign = this.parent.bracketContainer.wrappers[this.parent.bracketContainer.maxTopAlignIndex].topAlign;
                    var bracketTopAlign = .5 * this.height;
                    if (bracketTopAlign < containerTopAlign) {
                        topVal = containerTopAlign - bracketTopAlign;
                    }
                }
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var leftVal = 0;
            if (this.parent instanceof eqEd.BracketPairWrapper && this instanceof eqEd.RightBracket) {
                leftVal = this.parent.leftBracket.width + this.parent.bracketContainer.width;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
};

(function() {
    eqEd.Bracket.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.Bracket.prototype.constructor = eqEd.Bracket;
    eqEd.Bracket.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.domObj = copy.buildDomObj();
        if (this.wholeBracket !== null) {
            copy.wholeBracket = this.wholeBracket.clone();
            copy.wholeBracket.parent = copy;
            copy.domObj.append(copy.wholeBracket.domObj);
            copy.children.push(copy.wholeBracket);
        } else {
            copy.wholeBracket = null;
        }
        if (this.topBracket !== null) {
            copy.topBracket = this.topBracket.clone();
            copy.topBracket.parent = copy;
            copy.domObj.append(copy.topBracket.domObj);
            copy.children.push(copy.topBracket);
        } else {
            copy.topBracket = null;
        }
        copy.middleBrackets = [];
        for (var i = 0; i < this.middleBrackets.length; i++) {
            var middleBracket = this.middleBrackets[i].clone();
            middleBracket.parent = copy;
            copy.domObj.append(middleBracket.domObj);
            copy.middleBrackets.push(middleBracket);
            copy.children.push(copy.middleBracket);
        }
        if (this.bottomBracket !== null) {
            copy.bottomBracket = this.bottomBracket.clone();
            copy.bottomBracket.parent = copy;
            copy.domObj.append(copy.bottomBracket.domObj);
            copy.children.push(copy.bottomBracket);
        } else {
            copy.bottomBracket = null;
        }
        this.childNoncontainers = [ this.wholeBracket ];
        return copy;
    };
})();

eqEd.WholeBracket = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.WholeBracket";
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.WholeBracket.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.WholeBracket.prototype.constructor = eqEd.WholeBracket;
    eqEd.WholeBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="wholeBracket ' + this.fontStyle + '">' + this.character + "</div>");
    };
    eqEd.WholeBracket.prototype.clone = function() {
        var copy = new this.constructor(this.fontStyle, this.symbolSizeConfig);
        return copy;
    };
})();

eqEd.TopBracket = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.TopBracket";
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.TopBracket.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.TopBracket.prototype.constructor = eqEd.TopBracket;
    eqEd.TopBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="topBracket ' + this.fontStyle + '">' + this.character + "</div>");
    };
    eqEd.TopBracket.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        return copy;
    };
})();

eqEd.MiddleBracket = function(index, symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.MiddleBracket";
    this.index = index;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
};

(function() {
    eqEd.MiddleBracket.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.MiddleBracket.prototype.constructor = eqEd.MiddleBracket;
    eqEd.MiddleBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="middleBracket ' + this.fontStyle + '">' + this.character + "</div>");
    };
    eqEd.MiddleBracket.prototype.clone = function() {
        var copy = new this.constructor(this.index, this.symbolSizeConfig);
        return copy;
    };
})();

eqEd.BottomBracket = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.BottomBracket";
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
};

(function() {
    eqEd.BottomBracket.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.BottomBracket.prototype.constructor = eqEd.BottomBracket;
    eqEd.BottomBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bottomBracket ' + this.fontStyle + '">' + this.character + "</div>");
    };
    eqEd.BottomBracket.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        return copy;
    };
})();

eqEd.LeftBracket = function(symbolSizeConfig) {
    eqEd.Bracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftBracket";
    var desiredHeight = 0;
    this.properties.push(new Property(this, "desiredHeight", desiredHeight, {
        get: function() {
            return desiredHeight;
        },
        set: function(value) {
            desiredHeight = value;
        },
        compute: function() {
            var desiredHeightVal = 0;
            if (this.parent instanceof eqEd.BracketWrapper) {
                var sameBracketTypeCounter = 0;
                var matchingBracketIndex = null;
                var maxTopAlign = 0;
                var maxBottomAlign = 0;
                for (var i = this.parent.index + 1; i < this.parent.parent.wrappers.length; i++) {
                    var wrapper = this.parent.parent.wrappers[i];
                    if (wrapper instanceof eqEd.BracketWrapper) {
                        if (wrapper.bracket instanceof this.constructor) {
                            sameBracketTypeCounter++;
                        } else if (wrapper.bracket instanceof this.matchingBracketCtor && sameBracketTypeCounter === 0) {
                            matchingBracketIndex = i;
                            break;
                        } else if (wrapper.bracket instanceof this.matchingBracketCtor) {
                            sameBracketTypeCounter--;
                        }
                    } else {
                        maxTopAlign = wrapper.topAlign > maxTopAlign ? wrapper.topAlign : maxTopAlign;
                        maxBottomAlign = wrapper.bottomAlign > maxBottomAlign ? wrapper.bottomAlign : maxBottomAlign;
                    }
                }
                if (matchingBracketIndex !== null && !(maxTopAlign === 0 && maxBottomAlign === 0)) {
                    desiredHeightVal = maxTopAlign > maxBottomAlign ? 2 * maxTopAlign : 2 * maxBottomAlign;
                } else {
                    var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
                    desiredHeightVal = fontHeight;
                }
            } else if (this.parent instanceof eqEd.BracketPairWrapper) {
                if (this.parent.bracketContainer.wrappers.length > 0) {
                    var maxTopAlign = this.parent.bracketContainer.wrappers[this.parent.bracketContainer.maxTopAlignIndex].topAlign;
                    var maxBottomAlign = this.parent.bracketContainer.wrappers[this.parent.bracketContainer.maxBottomAlignIndex].bottomAlign;
                    desiredHeightVal = maxTopAlign > maxBottomAlign ? 2 * maxTopAlign : 2 * maxBottomAlign;
                }
            }
            return desiredHeightVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.LeftBracket.prototype = Object.create(eqEd.Bracket.prototype);
    eqEd.LeftBracket.prototype.constructor = eqEd.LeftBracket;
})();

eqEd.RightBracket = function(symbolSizeConfig) {
    eqEd.Bracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightBracket";
    var desiredHeight = 0;
    this.properties.push(new Property(this, "desiredHeight", desiredHeight, {
        get: function() {
            return desiredHeight;
        },
        set: function(value) {
            desiredHeight = value;
        },
        compute: function() {
            var desiredHeightVal = 0;
            if (this.parent instanceof eqEd.BracketWrapper) {
                var sameBracketTypeCounter = 0;
                var matchingBracketIndex = null;
                var maxTopAlign = 0;
                var maxBottomAlign = 0;
                for (var i = this.parent.index - 1; i >= 0; i--) {
                    var wrapper = this.parent.parent.wrappers[i];
                    if (wrapper instanceof eqEd.BracketWrapper) {
                        if (wrapper.bracket instanceof this.constructor) {
                            sameBracketTypeCounter++;
                        } else if (wrapper.bracket instanceof this.matchingBracketCtor && sameBracketTypeCounter === 0) {
                            matchingBracketIndex = i;
                            break;
                        } else if (wrapper.bracket instanceof this.matchingBracketCtor) {
                            sameBracketTypeCounter--;
                        }
                    } else {
                        maxTopAlign = wrapper.topAlign > maxTopAlign ? wrapper.topAlign : maxTopAlign;
                        maxBottomAlign = wrapper.bottomAlign > maxBottomAlign ? wrapper.bottomAlign : maxBottomAlign;
                    }
                }
                if (matchingBracketIndex !== null && !(maxTopAlign === 0 && maxBottomAlign === 0)) {
                    desiredHeightVal = maxTopAlign > maxBottomAlign ? 2 * maxTopAlign : 2 * maxBottomAlign;
                } else {
                    var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
                    desiredHeightVal = fontHeight;
                }
            } else if (this.parent instanceof eqEd.BracketPairWrapper) {
                if (this.parent.bracketContainer.wrappers.length > 0) {
                    var maxTopAlign = this.parent.bracketContainer.wrappers[this.parent.bracketContainer.maxTopAlignIndex].topAlign;
                    var maxBottomAlign = this.parent.bracketContainer.wrappers[this.parent.bracketContainer.maxBottomAlignIndex].bottomAlign;
                    desiredHeightVal = maxTopAlign > maxBottomAlign ? 2 * maxTopAlign : 2 * maxBottomAlign;
                }
            }
            return desiredHeightVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.RightBracket.prototype = Object.create(eqEd.Bracket.prototype);
    eqEd.RightBracket.prototype.constructor = eqEd.RightBracket;
})();

eqEd.LeftParenthesisBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftParenthesisBracket";
    this.matchingBracketCtor = eqEd.RightParenthesisBracket;
    this.wholeBracket = new eqEd.LeftParenthesisWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .377777 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .733333 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .777777 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                widthVal = .88888 * fontHeight;
            } else {
                widthVal = .88888 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                heightVal = 3.33 * fontHeight;
            } else {
                heightVal = (3.9 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftParenthesisBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftParenthesisBracket.prototype.constructor = eqEd.LeftParenthesisBracket;
    eqEd.LeftParenthesisBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftParenthesisBracket"></div>');
    };
    eqEd.LeftParenthesisBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftParenthesisWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftParenthesisWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.LeftParenthesisWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
            this.topBracket = new eqEd.LeftParenthesisTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.LeftParenthesisBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            this.children = [ this.topBracket, this.bottomBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 3.9) / .45) + 1;
            this.topBracket = new eqEd.LeftParenthesisTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.LeftParenthesisBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.LeftParenthesisMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.RightParenthesisBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightParenthesisBracket";
    this.matchingBracketCtor = eqEd.LeftParenthesisBracket;
    this.wholeBracket = new eqEd.RightParenthesisWholeBracket("MathJax_Main", symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .377777 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .733333 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .777777 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                widthVal = .88888 * fontHeight;
            } else {
                widthVal = .88888 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                heightVal = 3.33 * fontHeight;
            } else {
                heightVal = (3.9 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightParenthesisBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightParenthesisBracket.prototype.constructor = eqEd.RightParenthesisBracket;
    eqEd.RightParenthesisBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightParenthesisBracket"></div>');
    };
    eqEd.RightParenthesisBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightParenthesisWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightParenthesisWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.RightParenthesisWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
            this.topBracket = new eqEd.RightParenthesisTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.RightParenthesisBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            this.children = [ this.topBracket, this.bottomBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 3.9) / .45) + 1;
            this.topBracket = new eqEd.RightParenthesisTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.RightParenthesisBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.RightParenthesisMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.LeftParenthesisWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftParenthesisWholeBracket";
    this.character = "(";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftParenthesisWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftParenthesisWholeBracket.prototype.constructor = eqEd.LeftParenthesisWholeBracket;
})();

eqEd.LeftParenthesisTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftParenthesisTopBracket";
    this.character = "⎛";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.LeftParenthesisTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.LeftParenthesisTopBracket.prototype.constructor = eqEd.LeftParenthesisTopBracket;
})();

eqEd.LeftParenthesisMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftParenthesisMiddleBracket";
    this.character = "⎜";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index + 1.5) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftParenthesisMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftParenthesisMiddleBracket.prototype.constructor = eqEd.LeftParenthesisMiddleBracket;
})();

eqEd.LeftParenthesisBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftParenthesisBottomBracket";
    this.character = "⎝";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.middleBrackets.length === 0) {
                topVal = 1.939 * fontHeight;
            } else {
                topVal = (2.5 + .45 * (this.parent.middleBrackets.length - 1)) * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftParenthesisBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.LeftParenthesisBottomBracket.prototype.constructor = eqEd.LeftParenthesisBottomBracket;
})();

eqEd.RightParenthesisWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightParenthesisWholeBracket";
    this.character = ")";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightParenthesisWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightParenthesisWholeBracket.prototype.constructor = eqEd.RightParenthesisWholeBracket;
})();

eqEd.RightParenthesisTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightParenthesisTopBracket";
    this.character = "⎞";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.RightParenthesisTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.RightParenthesisTopBracket.prototype.constructor = eqEd.RightParenthesisTopBracket;
})();

eqEd.RightParenthesisMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightParenthesisMiddleBracket";
    this.character = "⎟";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index + 1.5) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightParenthesisMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightParenthesisMiddleBracket.prototype.constructor = eqEd.RightParenthesisMiddleBracket;
})();

eqEd.RightParenthesisBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightParenthesisBottomBracket";
    this.character = "⎠";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.middleBrackets.length === 0) {
                topVal = 1.939 * fontHeight;
            } else {
                topVal = (2.5 + .45 * (this.parent.middleBrackets.length - 1)) * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightParenthesisBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.RightParenthesisBottomBracket.prototype.constructor = eqEd.RightParenthesisBottomBracket;
})();

eqEd.LeftSquareBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftSquareBracket";
    this.matchingBracketCtor = eqEd.RightSquareBracket;
    this.wholeBracket = new eqEd.LeftSquareWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .288888 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .533333 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .577777 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftSquareBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftSquareBracket.prototype.constructor = eqEd.LeftSquareBracket;
    eqEd.LeftSquareBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftSquareBracket"></div>');
    };
    eqEd.LeftSquareBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftSquareWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftSquareWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.LeftSquareWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.topBracket = new eqEd.LeftSquareTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.LeftSquareBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.LeftSquareMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.LeftSquareWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftSquareWholeBracket";
    this.character = "[";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftSquareWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftSquareWholeBracket.prototype.constructor = eqEd.LeftSquareWholeBracket;
})();

eqEd.LeftSquareTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftSquareTopBracket";
    this.character = "⎡";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.LeftSquareTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.LeftSquareTopBracket.prototype.constructor = eqEd.LeftSquareTopBracket;
})();

eqEd.LeftSquareMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftSquareMiddleBracket";
    this.character = "⎢";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftSquareMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftSquareMiddleBracket.prototype.constructor = eqEd.LeftSquareMiddleBracket;
})();

eqEd.LeftSquareBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftSquareBottomBracket";
    this.character = "⎣";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = this.parent.middleBrackets[this.parent.middleBrackets.length - 1].top - .65 * fontHeight;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftSquareBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.LeftSquareBottomBracket.prototype.constructor = eqEd.LeftSquareBottomBracket;
})();

eqEd.RightSquareBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightSquareBracket";
    this.matchingBracketCtor = eqEd.LeftSquareBracket;
    this.wholeBracket = new eqEd.RightSquareWholeBracket("MathJax_Main", symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .288888 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .533333 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .577777 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightSquareBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightSquareBracket.prototype.constructor = eqEd.RightSquareBracket;
    eqEd.RightSquareBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightSquareBracket"></div>');
    };
    eqEd.RightSquareBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightSquareWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightSquareWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.RightSquareWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.topBracket = new eqEd.RightSquareTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.RightSquareBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.RightSquareMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.RightSquareWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightSquareWholeBracket";
    this.character = "]";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightSquareWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightSquareWholeBracket.prototype.constructor = eqEd.RightSquareWholeBracket;
})();

eqEd.RightSquareTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightSquareTopBracket";
    this.character = "⎤";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.RightSquareTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.RightSquareTopBracket.prototype.constructor = eqEd.RightSquareTopBracket;
})();

eqEd.RightSquareMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightSquareMiddleBracket";
    this.character = "⎥";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightSquareMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightSquareMiddleBracket.prototype.constructor = eqEd.RightSquareMiddleBracket;
})();

eqEd.RightSquareBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightSquareBottomBracket";
    this.character = "⎦";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = this.parent.middleBrackets[this.parent.middleBrackets.length - 1].top - .65 * fontHeight;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightSquareBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.RightSquareBottomBracket.prototype.constructor = eqEd.RightSquareBottomBracket;
})();

eqEd.LeftCurlyBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCurlyBracket";
    this.matchingBracketCtor = eqEd.RightCurlyBracket;
    this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .511111 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .755555 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .8 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                widthVal = .666666 * fontHeight;
            } else {
                widthVal = .888888 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                heightVal = 3.33 * fontHeight;
            } else {
                var bottomBracketTop = this.bottomBracket.top / fontHeight;
                heightVal = (bottomBracketTop + 1.652778 - this.padTop) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftCurlyBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftCurlyBracket.prototype.constructor = eqEd.LeftCurlyBracket;
    eqEd.LeftCurlyBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftCurlyBracket"></div>');
    };
    eqEd.LeftCurlyBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.round((this.heightRatio - 3.4) / .231);
            numberOfMiddleBrackets = numberOfMiddleBrackets % 2 !== 0 ? numberOfMiddleBrackets + 1 : numberOfMiddleBrackets;
            this.topBracket = new eqEd.LeftCurlyTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.LeftCurlyBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < Math.round(.5 * numberOfMiddleBrackets); i++) {
                var middleBracket = new eqEd.LeftCurlyMiddleBracket(i, "middleVert", this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            var middleCurly = new eqEd.LeftCurlyMiddleBracket(Math.round(.5 * numberOfMiddleBrackets), "middleCurly", this.symbolSizeConfig);
            middleCurly.parent = this;
            this.domObj.append(middleCurly.domObj);
            this.middleBrackets.push(middleCurly);
            for (var i = Math.round(.5 * numberOfMiddleBrackets) + 1; i < numberOfMiddleBrackets + 1; i++) {
                var middleBracket = new eqEd.LeftCurlyMiddleBracket(i, "middleVert", this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.LeftCurlyWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCurlyWholeBracket";
    this.character = "{";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftCurlyWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftCurlyWholeBracket.prototype.constructor = eqEd.LeftCurlyWholeBracket;
})();

eqEd.LeftCurlyTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCurlyTopBracket";
    this.character = "⎧";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .15;
};

(function() {
    eqEd.LeftCurlyTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.LeftCurlyTopBracket.prototype.constructor = eqEd.LeftCurlyTopBracket;
})();

eqEd.LeftCurlyMiddleBracket = function(index, characterType, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftCurlyMiddleBracket";
    this.characterType = characterType;
    if (this.characterType === "middleVert") {
        this.character = "⎪";
    } else if (this.characterType === "middleCurly") {
        this.character = "⎨";
    }
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = 0;
            var numSegs = this.parent.middleBrackets.length - 1;
            var adjustTopFactor = .231;
            if (this.index < Math.round(numSegs / 2)) {
                topVal = ((this.index + 1) * adjustTopFactor + .15) * fontHeight;
            } else if (this.index === Math.round(numSegs / 2)) {
                topVal = (this.index * adjustTopFactor + 1.1 + .15) * fontHeight;
            } else {
                var centerBracket = Math.round(numSegs / 2) * adjustTopFactor + 1.1 + .15;
                topVal = (centerBracket + .878 + (this.index - Math.round(numSegs / 2) - 1) * adjustTopFactor) * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftCurlyMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftCurlyMiddleBracket.prototype.constructor = eqEd.LeftCurlyMiddleBracket;
})();

eqEd.LeftCurlyBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCurlyBottomBracket";
    this.character = "⎩";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var length = this.parent.middleBrackets.length;
            var centerIndex = Math.floor(length / 2);
            return this.parent.middleBrackets[centerIndex].top + ((length - 1 - centerIndex) * .231 + .5) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftCurlyBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.LeftCurlyBottomBracket.prototype.constructor = eqEd.LeftCurlyBottomBracket;
})();

eqEd.RightCurlyBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCurlyBracket";
    this.matchingBracketCtor = eqEd.LeftCurlyBracket;
    this.wholeBracket = new eqEd.RightCurlyWholeBracket("MathJax_Main", symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .511111 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .755555 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .8 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                widthVal = .666666 * fontHeight;
            } else {
                widthVal = .888888 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else if (this.heightRatio > 3 && this.heightRatio <= 3.33) {
                heightVal = 3.33 * fontHeight;
            } else {
                var bottomBracketTop = this.bottomBracket.top / fontHeight;
                heightVal = (bottomBracketTop + 1.652778 - this.padTop) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightCurlyBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightCurlyBracket.prototype.constructor = eqEd.RightCurlyBracket;
    eqEd.RightCurlyBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightCurlyBracket"></div>');
    };
    eqEd.RightCurlyBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightCurlyWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightCurlyWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.RightCurlyWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.round((this.heightRatio - 3.4) / .231);
            numberOfMiddleBrackets = numberOfMiddleBrackets % 2 !== 0 ? numberOfMiddleBrackets + 1 : numberOfMiddleBrackets;
            this.topBracket = new eqEd.RightCurlyTopBracket(this.symbolSizeConfig);
            this.bottomBracket = new eqEd.RightCurlyBottomBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.bottomBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < Math.round(.5 * numberOfMiddleBrackets); i++) {
                var middleBracket = new eqEd.RightCurlyMiddleBracket(i, "middleVert", this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            var middleCurly = new eqEd.RightCurlyMiddleBracket(Math.round(.5 * numberOfMiddleBrackets), "middleCurly", this.symbolSizeConfig);
            middleCurly.parent = this;
            this.domObj.append(middleCurly.domObj);
            this.middleBrackets.push(middleCurly);
            for (var i = Math.round(.5 * numberOfMiddleBrackets) + 1; i < numberOfMiddleBrackets + 1; i++) {
                var middleBracket = new eqEd.RightCurlyMiddleBracket(i, "middleVert", this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets).concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.RightCurlyWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCurlyWholeBracket";
    this.character = "}";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightCurlyWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightCurlyWholeBracket.prototype.constructor = eqEd.RightCurlyWholeBracket;
})();

eqEd.RightCurlyTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCurlyTopBracket";
    this.character = "⎫";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .15;
};

(function() {
    eqEd.RightCurlyTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.RightCurlyTopBracket.prototype.constructor = eqEd.RightCurlyTopBracket;
})();

eqEd.RightCurlyMiddleBracket = function(index, characterType, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightCurlyMiddleBracket";
    this.characterType = characterType;
    if (this.characterType === "middleVert") {
        this.character = "⎪";
    } else if (this.characterType === "middleCurly") {
        this.character = "⎬";
    }
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = 0;
            var numSegs = this.parent.middleBrackets.length - 1;
            var adjustTopFactor = .231;
            if (this.index < Math.round(numSegs / 2)) {
                topVal = ((this.index + 1) * adjustTopFactor + .15) * fontHeight;
            } else if (this.index === Math.round(numSegs / 2)) {
                topVal = (this.index * adjustTopFactor + 1.1 + .15) * fontHeight;
            } else {
                var centerBracket = Math.round(numSegs / 2) * adjustTopFactor + 1.1 + .15;
                topVal = (centerBracket + .878 + (this.index - Math.round(numSegs / 2) - 1) * adjustTopFactor) * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightCurlyMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightCurlyMiddleBracket.prototype.constructor = eqEd.RightCurlyMiddleBracket;
})();

eqEd.RightCurlyBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCurlyBottomBracket";
    this.character = "⎭";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var length = this.parent.middleBrackets.length;
            var centerIndex = Math.floor(length / 2);
            return this.parent.middleBrackets[centerIndex].top + ((length - 1 - centerIndex) * .231 + .5) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightCurlyBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.RightCurlyBottomBracket.prototype.constructor = eqEd.RightCurlyBottomBracket;
})();

eqEd.LeftAngleBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftAngleBracket";
    this.matchingBracketCtor = eqEd.RightAngleBracket;
    this.wholeBracket = new eqEd.LeftAngleWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .377777 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .733333 * fontHeight;
            } else {
                widthVal = .777777 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else {
                heightVal = 3 * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftAngleBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftAngleBracket.prototype.constructor = eqEd.LeftAngleBracket;
    eqEd.LeftAngleBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class=" bracket leftBracket leftAngleBracket"></div>');
    };
    eqEd.LeftAngleBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftAngleWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftAngleWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            this.wholeBracket = new eqEd.LeftAngleWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        }
    };
})();

eqEd.LeftAngleWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftAngleWholeBracket";
    this.character = "⟨";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftAngleWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftAngleWholeBracket.prototype.constructor = eqEd.LeftAngleWholeBracket;
})();

eqEd.RightAngleBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightAngleBracket";
    this.matchingBracketCtor = eqEd.LeftAngleBracket;
    this.wholeBracket = new eqEd.RightAngleWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .377777 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .733333 * fontHeight;
            } else {
                widthVal = .777777 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else {
                heightVal = 3 * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightAngleBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightAngleBracket.prototype.constructor = eqEd.RightAngleBracket;
    eqEd.RightAngleBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket RightAngleBracket"></div>');
    };
    eqEd.RightAngleBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightAngleWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightAngleWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            this.wholeBracket = new eqEd.RightAngleWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        }
    };
})();

eqEd.RightAngleWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightAngleWholeBracket";
    this.character = "⟩";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightAngleWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightAngleWholeBracket.prototype.constructor = eqEd.RightAngleWholeBracket;
})();

eqEd.LeftFloorBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftFloorBracket";
    this.matchingBracketCtor = eqEd.RightFloorBracket;
    this.wholeBracket = new eqEd.LeftFloorWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .444444 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .5777777 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .644444 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftFloorBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftFloorBracket.prototype.constructor = eqEd.LeftFloorBracket;
    eqEd.LeftFloorBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftFloorBracket"></div>');
    };
    eqEd.LeftFloorBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftFloorWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftFloorWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.LeftFloorWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.bottomBracket = new eqEd.LeftFloorBottomBracket(this.symbolSizeConfig);
            this.bottomBracket.parent = this;
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.LeftFloorMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = this.middleBrackets.concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.LeftFloorWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftFloorWholeBracket";
    this.character = "⌊";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftFloorWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftFloorWholeBracket.prototype.constructor = eqEd.LeftFloorWholeBracket;
})();

eqEd.LeftFloorMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftFloorMiddleBracket";
    this.character = "⎢";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftFloorMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftFloorMiddleBracket.prototype.constructor = eqEd.LeftFloorMiddleBracket;
})();

eqEd.LeftFloorBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftFloorBottomBracket";
    this.character = "⎣";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = this.parent.middleBrackets[this.parent.middleBrackets.length - 1].top - .65 * fontHeight;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftFloorBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.LeftFloorBottomBracket.prototype.constructor = eqEd.LeftFloorBottomBracket;
})();

eqEd.RightFloorBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightFloorBracket";
    this.matchingBracketCtor = eqEd.LeftFloorBracket;
    this.wholeBracket = new eqEd.RightFloorWholeBracket("MathJax_Main", symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .444444 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .577777 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .644444 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightFloorBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightFloorBracket.prototype.constructor = eqEd.RightFloorBracket;
    eqEd.RightFloorBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightFloorBracket"></div>');
    };
    eqEd.RightFloorBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightFloorWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightFloorWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.RightFloorWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.bottomBracket = new eqEd.RightFloorBottomBracket(this.symbolSizeConfig);
            this.bottomBracket.parent = this;
            this.domObj.append(this.bottomBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.RightFloorMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = this.middleBrackets.concat([ this.bottomBracket ]);
        }
    };
})();

eqEd.RightFloorWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightFloorWholeBracket";
    this.character = "⌋";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightFloorWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightFloorWholeBracket.prototype.constructor = eqEd.RightFloorWholeBracket;
})();

eqEd.RightFloorMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightFloorMiddleBracket";
    this.character = "⎥";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightFloorMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightFloorMiddleBracket.prototype.constructor = eqEd.RightFloorMiddleBracket;
})();

eqEd.RightFloorBottomBracket = function(symbolSizeConfig) {
    eqEd.BottomBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightFloorBottomBracket";
    this.character = "⎦";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            var topVal = this.parent.middleBrackets[this.parent.middleBrackets.length - 1].top - .65 * fontHeight;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightFloorBottomBracket.prototype = Object.create(eqEd.BottomBracket.prototype);
    eqEd.RightFloorBottomBracket.prototype.constructor = eqEd.RightFloorBottomBracket;
})();

eqEd.LeftCeilBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCeilBracket";
    this.matchingBracketCtor = eqEd.RightCeilBracket;
    this.wholeBracket = new eqEd.LeftCeilWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .444444 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .5777777 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .644444 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftCeilBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftCeilBracket.prototype.constructor = eqEd.LeftCeilBracket;
    eqEd.LeftCeilBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftCeilBracket"></div>');
    };
    eqEd.LeftCeilBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.LeftCeilWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.LeftCeilWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.LeftCeilWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.topBracket = new eqEd.LeftCeilTopBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.LeftCeilMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets);
        }
    };
})();

eqEd.LeftCeilWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCeilWholeBracket";
    this.character = "⌈";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftCeilWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftCeilWholeBracket.prototype.constructor = eqEd.LeftCeilWholeBracket;
})();

eqEd.LeftCeilTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftCeilTopBracket";
    this.character = "⎡";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.LeftCeilTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.LeftCeilTopBracket.prototype.constructor = eqEd.LeftCeilTopBracket;
})();

eqEd.LeftCeilMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftCeilMiddleBracket";
    this.character = "⎢";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftCeilMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftCeilMiddleBracket.prototype.constructor = eqEd.LeftCeilMiddleBracket;
})();

eqEd.RightCeilBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCeilBracket";
    this.matchingBracketCtor = eqEd.LeftCeilBracket;
    this.wholeBracket = new eqEd.RightCeilWholeBracket("MathJax_Main", symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                widthVal = .444444 * fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                widthVal = .5777777 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                widthVal = .644444 * fontHeight;
            } else {
                widthVal = .666666 * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            if (this.heightRatio <= 1.5) {
                heightVal = fontHeight;
            } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
                heightVal = 2.4 * fontHeight;
            } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
                heightVal = 3 * fontHeight;
            } else {
                heightVal = (.6 + .45 * (this.middleBrackets.length - 1)) * fontHeight;
            }
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightCeilBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightCeilBracket.prototype.constructor = eqEd.RightCeilBracket;
    eqEd.RightCeilBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightCeilBracket"></div>');
    };
    eqEd.RightCeilBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        if (this.heightRatio <= 1.5) {
            this.wholeBracket = new eqEd.RightCeilWholeBracket("MathJax_Main", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 1.5 && this.heightRatio <= 2.4) {
            this.wholeBracket = new eqEd.RightCeilWholeBracket("MathJax_Size3", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else if (this.heightRatio > 2.4 && this.heightRatio <= 3) {
            this.wholeBracket = new eqEd.RightCeilWholeBracket("MathJax_Size4", this.symbolSizeConfig);
            this.wholeBracket.parent = this;
            this.domObj.append(this.wholeBracket.domObj);
            this.children = [ this.wholeBracket ];
        } else {
            var numberOfMiddleBrackets = Math.ceil((this.heightRatio - .6) / .45) + 1;
            this.topBracket = new eqEd.RightCeilTopBracket(this.symbolSizeConfig);
            this.topBracket.parent = this;
            this.domObj.append(this.topBracket.domObj);
            for (var i = 0; i < numberOfMiddleBrackets; i++) {
                var middleBracket = new eqEd.RightCeilMiddleBracket(i, this.symbolSizeConfig);
                middleBracket.parent = this;
                this.domObj.append(middleBracket.domObj);
                this.middleBrackets.push(middleBracket);
            }
            this.children = [ this.topBracket ].concat(this.middleBrackets);
        }
    };
})();

eqEd.RightCeilWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCeilWholeBracket";
    this.character = "⌉";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightCeilWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightCeilWholeBracket.prototype.constructor = eqEd.RightCeilWholeBracket;
})();

eqEd.RightCeilTopBracket = function(symbolSizeConfig) {
    eqEd.TopBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightCeilTopBracket";
    this.character = "⎤";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    this.adjustTop = .4;
};

(function() {
    eqEd.RightCeilTopBracket.prototype = Object.create(eqEd.TopBracket.prototype);
    eqEd.RightCeilTopBracket.prototype.constructor = eqEd.RightCeilTopBracket;
})();

eqEd.RightCeilMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightCeilMiddleBracket";
    this.character = "⎥";
    this.fontStyle = "MathJax_Size4";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.45 * this.index - .15) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightCeilMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightCeilMiddleBracket.prototype.constructor = eqEd.RightCeilMiddleBracket;
})();

eqEd.LeftAbsValBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftAbsValBracket";
    this.matchingBracketCtor = eqEd.RightAbsValBracket;
    this.wholeBracket = new eqEd.LeftAbsValWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            widthVal = .2666666 * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var numBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
            heightVal = (1.07 + .5 * (numBrackets - 1)) * fontHeight;
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftAbsValBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftAbsValBracket.prototype.constructor = eqEd.LeftAbsValBracket;
    eqEd.LeftAbsValBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftAbsValBracket"></div>');
    };
    eqEd.LeftAbsValBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
        for (var i = 0; i < numberOfMiddleBrackets; i++) {
            var middleBracket = new eqEd.LeftAbsValMiddleBracket(i, this.symbolSizeConfig);
            middleBracket.parent = this;
            this.domObj.append(middleBracket.domObj);
            this.middleBrackets.push(middleBracket);
        }
        this.children = this.middleBrackets;
    };
})();

eqEd.RightAbsValBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightAbsValBracket";
    this.matchingBracketCtor = eqEd.LeftAbsValBracket;
    this.wholeBracket = new eqEd.RightAbsValWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            widthVal = .266666 * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var numBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
            heightVal = (1.07 + .5 * (numBrackets - 1)) * fontHeight;
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightAbsValBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightAbsValBracket.prototype.constructor = eqEd.RightAbsValBracket;
    eqEd.RightAbsValBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightAbsValBracket"></div>');
    };
    eqEd.RightAbsValBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
        for (var i = 0; i < numberOfMiddleBrackets; i++) {
            var middleBracket = new eqEd.RightAbsValMiddleBracket(i, this.symbolSizeConfig);
            middleBracket.parent = this;
            this.domObj.append(middleBracket.domObj);
            this.middleBrackets.push(middleBracket);
        }
        this.children = this.middleBrackets;
    };
})();

eqEd.LeftAbsValWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftAbsValWholeBracket";
    this.character = "|";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftAbsValWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftAbsValWholeBracket.prototype.constructor = eqEd.LeftAbsValWholeBracket;
})();

eqEd.LeftAbsValMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftAbsValMiddleBracket";
    this.character = "|";
    this.fontStyle = "MathJax_Main";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.5 * this.index - .06) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftAbsValMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftAbsValMiddleBracket.prototype.constructor = eqEd.LeftAbsValMiddleBracket;
})();

eqEd.RightAbsValWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightAbsValWholeBracket";
    this.character = "|";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightAbsValWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightAbsValWholeBracket.prototype.constructor = eqEd.RightAbsValWholeBracket;
})();

eqEd.RightAbsValMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightAbsValMiddleBracket";
    this.character = "|";
    this.fontStyle = "MathJax_Main";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.5 * this.index - .06) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightAbsValMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightAbsValMiddleBracket.prototype.constructor = eqEd.RightAbsValMiddleBracket;
})();

eqEd.LeftNormBracket = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftNormBracket";
    this.matchingBracketCtor = eqEd.RightNormBracket;
    this.wholeBracket = new eqEd.LeftNormWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            widthVal = .4888888 * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var numBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
            heightVal = (1.07 + .5 * (numBrackets - 1)) * fontHeight;
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.LeftNormBracket.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.LeftNormBracket.prototype.constructor = eqEd.LeftNormBracket;
    eqEd.LeftNormBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket leftNormBracket"></div>');
    };
    eqEd.LeftNormBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
        console.log(numberOfMiddleBrackets);
        for (var i = 0; i < numberOfMiddleBrackets; i++) {
            var middleBracket = new eqEd.LeftNormMiddleBracket(i, this.symbolSizeConfig);
            middleBracket.parent = this;
            this.domObj.append(middleBracket.domObj);
            this.middleBrackets.push(middleBracket);
        }
        this.children = this.middleBrackets;
    };
})();

eqEd.RightNormBracket = function(symbolSizeConfig) {
    eqEd.RightBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightNormBracket";
    this.matchingBracketCtor = eqEd.LeftNormBracket;
    this.wholeBracket = new eqEd.RightNormWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            widthVal = .4888888 * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var numBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
            heightVal = (1.07 + .5 * (numBrackets - 1)) * fontHeight;
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.RightNormBracket.prototype = Object.create(eqEd.RightBracket.prototype);
    eqEd.RightNormBracket.prototype.constructor = eqEd.RightNormBracket;
    eqEd.RightNormBracket.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket rightBracket rightNormBracket"></div>');
    };
    eqEd.RightNormBracket.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        var numberOfMiddleBrackets = Math.ceil((this.heightRatio - 1.07) / .5) + 1;
        for (var i = 0; i < numberOfMiddleBrackets; i++) {
            var middleBracket = new eqEd.RightNormMiddleBracket(i, this.symbolSizeConfig);
            middleBracket.parent = this;
            this.domObj.append(middleBracket.domObj);
            this.middleBrackets.push(middleBracket);
        }
        this.children = this.middleBrackets;
    };
})();

eqEd.LeftNormWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.LeftNormWholeBracket";
    this.character = "∥";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftNormWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.LeftNormWholeBracket.prototype.constructor = eqEd.LeftNormWholeBracket;
})();

eqEd.LeftNormMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.LeftNormMiddleBracket";
    this.character = "∥";
    this.fontStyle = "MathJax_Main";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.5 * this.index - .06) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LeftNormMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.LeftNormMiddleBracket.prototype.constructor = eqEd.LeftNormMiddleBracket;
})();

eqEd.RightNormWholeBracket = function(fontStyle, symbolSizeConfig) {
    eqEd.WholeBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.RightNormWholeBracket";
    this.character = "∥";
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    this.adjustTop = 0;
    if (this.fontStyle === "MathJax_Main") {
        this.adjustTop = -.0625;
    } else if (this.fontStyle === "MathJax_Size3") {
        this.adjustTop = .7;
    } else if (this.fontStyle === "MathJax_Size4") {
        this.adjustTop = .995;
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightNormWholeBracket.prototype = Object.create(eqEd.WholeBracket.prototype);
    eqEd.RightNormWholeBracket.prototype.constructor = eqEd.RightNormWholeBracket;
})();

eqEd.RightNormMiddleBracket = function(index, symbolSizeConfig) {
    eqEd.MiddleBracket.call(this, index, symbolSizeConfig);
    this.className = "eqEd.RightNormMiddleBracket";
    this.character = "∥";
    this.fontStyle = "MathJax_Main";
    this.domObj = this.buildDomObj();
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.parent.fontSize];
            return (.5 * this.index - .06) * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.RightNormMiddleBracket.prototype = Object.create(eqEd.MiddleBracket.prototype);
    eqEd.RightNormMiddleBracket.prototype.constructor = eqEd.RightNormMiddleBracket;
})();

eqEd.BracketPairWrapper = function(bracketType, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.BracketPairWrapper";
    this.bracketType = bracketType;
    var bracketCtors = {
        parenthesisBracket: {
            left: eqEd.LeftParenthesisBracket,
            right: eqEd.RightParenthesisBracket
        },
        squareBracket: {
            left: eqEd.LeftSquareBracket,
            right: eqEd.RightSquareBracket
        },
        curlyBracket: {
            left: eqEd.LeftCurlyBracket,
            right: eqEd.RightCurlyBracket
        },
        angleBracket: {
            left: eqEd.LeftAngleBracket,
            right: eqEd.RightAngleBracket
        },
        floorBracket: {
            left: eqEd.LeftFloorBracket,
            right: eqEd.RightFloorBracket
        },
        ceilBracket: {
            left: eqEd.LeftCeilBracket,
            right: eqEd.RightCeilBracket
        },
        absValBracket: {
            left: eqEd.LeftAbsValBracket,
            right: eqEd.RightAbsValBracket
        },
        normBracket: {
            left: eqEd.LeftNormBracket,
            right: eqEd.RightNormBracket
        }
    };
    this.leftBracket = new bracketCtors[bracketType]["left"](symbolSizeConfig);
    this.bracketContainer = new eqEd.BracketContainer(symbolSizeConfig);
    this.rightBracket = new bracketCtors[bracketType]["right"](symbolSizeConfig);
    this.leftBracket.parent = this;
    this.bracketContainer.parent = this;
    this.rightBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.leftBracket.domObj);
    this.domObj.append(this.bracketContainer.domObj);
    this.domObj.append(this.rightBracket.domObj);
    this.childContainers = [ this.bracketContainer ];
    this.childNoncontainers = [ this.leftBracket, this.rightBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.leftBracket.width + this.bracketContainer.width + this.rightBracket.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var topAlignVal = 0;
            if (this.bracketContainer.wrappers.length > 0) {
                var containerTopAlign = this.bracketContainer.wrappers[this.bracketContainer.maxTopAlignIndex].topAlign;
                var bracketTopAlign = .5 * this.leftBracket.height;
                if (bracketTopAlign < containerTopAlign) {
                    topAlignVal = containerTopAlign;
                } else {
                    topAlignVal = bracketTopAlign;
                }
            }
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var bottomAlignVal = 0;
            if (this.bracketContainer.wrappers.length > 0) {
                var containerBottomAlign = this.bracketContainer.wrappers[this.bracketContainer.maxBottomAlignIndex].bottomAlign;
                var bracketBottomAlign = .5 * this.leftBracket.height;
                if (bracketBottomAlign < containerBottomAlign) {
                    bottomAlignVal = containerBottomAlign;
                } else {
                    bottomAlignVal = bracketBottomAlign;
                }
            }
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.BracketPairWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.BracketPairWrapper.prototype.constructor = eqEd.BracketPairWrapper;
    eqEd.BracketPairWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdwrapper bracketPairWrapper ' + this.bracketType + '"></div>');
    };
    eqEd.BracketPairWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.bracketType, this.symbolSizeConfig);
        copy.leftBracket = this.leftBracket.clone();
        copy.bracketContainer = this.bracketContainer.clone();
        copy.rightBracket = this.rightBracket.clone();
        copy.leftBracket.parent = copy;
        copy.bracketContainer.parent = copy;
        copy.rightBracket.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.leftBracket.domObj);
        copy.domObj.append(copy.bracketContainer.domObj);
        copy.domObj.append(copy.rightBracket.domObj);
        copy.childNoncontainers = [ copy.leftBracket, copy.rightBracket ];
        copy.childContainers = [ copy.bracketContainer ];
        return copy;
    };
    eqEd.BracketPairWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.bracketType,
            operands: {
                bracketedExpression: this.bracketContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.BracketPairWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var bracketPairWrapper = new eqEd.BracketPairWrapper(jsonObj.value, symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.bracketedExpression.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.bracketedExpression[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.bracketedExpression[i], symbolSizeConfig);
            bracketPairWrapper.bracketContainer.addWrappers([ i, innerWrapper ]);
        }
        return bracketPairWrapper;
    };
})();

eqEd.BracketContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.BracketContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return this.parent.leftBracket.width;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var topVal = 0;
            if (this.wrappers.length > 0) {
                var containerTopAlign = this.wrappers[this.maxTopAlignIndex].topAlign;
                var bracketTopAlign = .5 * this.parent.leftBracket.height;
                if (bracketTopAlign > containerTopAlign) {
                    topVal = bracketTopAlign - containerTopAlign;
                }
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            fontSizeVal = actualParentContainer.fontSize;
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.BracketContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.BracketContainer.prototype.constructor = eqEd.BracketContainer;
    eqEd.BracketContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer bracketContainer"></div>');
    };
})();

eqEd.BigOperatorWrapper = function(isInline, hasUpperLimit, hasLowerLimit, bigOperatorType, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.BigOperatorWrapper";
    this.isInline = isInline;
    this.hasUpperLimit = hasUpperLimit;
    this.hasLowerLimit = hasLowerLimit;
    this.bigOperatorType = bigOperatorType;
    this.upperLimitGap = .1;
    this.lowerLimitGap = .2;
    this.operandGap = .15;
    this.inlineUpperLimitOverlap = .4;
    this.inlineLowerLimitOverlap = .4;
    this.inlineLimitGap = .1;
    this.inlineOperandGap = .15;
    this.bigOperatorSymbolCtors = {
        sum: eqEd.SumBigOperatorSymbol,
        bigCap: eqEd.BigCapBigOperatorSymbol,
        bigCup: eqEd.BigCupBigOperatorSymbol,
        bigSqCap: eqEd.BigSqCapBigOperatorSymbol,
        bigSqCup: eqEd.BigSqCupBigOperatorSymbol,
        prod: eqEd.ProdBigOperatorSymbol,
        coProd: eqEd.CoProdBigOperatorSymbol,
        bigVee: eqEd.BigVeeBigOperatorSymbol,
        bigWedge: eqEd.BigWedgeBigOperatorSymbol
    };
    this.domObj = this.buildDomObj();
    this.childContainers = [];
    if (this.hasUpperLimit) {
        this.upperLimitContainer = new eqEd.BigOperatorUpperLimitContainer(this.symbolSizeConfig);
        this.upperLimitContainer.parent = this;
        this.domObj.append(this.upperLimitContainer.domObj);
        this.childContainers.push(this.upperLimitContainer);
    }
    if (this.hasLowerLimit) {
        this.lowerLimitContainer = new eqEd.BigOperatorLowerLimitContainer(this.symbolSizeConfig);
        this.lowerLimitContainer.parent = this;
        this.domObj.append(this.lowerLimitContainer.domObj);
        this.childContainers.push(this.lowerLimitContainer);
    }
    this.operandContainer = new eqEd.BigOperatorOperandContainer(this.symbolSizeConfig);
    this.symbol = new this.bigOperatorSymbolCtors[this.bigOperatorType](this.symbolSizeConfig);
    this.operandContainer.parent = this;
    this.symbol.parent = this;
    this.domObj.append(this.operandContainer.domObj);
    this.domObj.append(this.symbol.domObj);
    this.childNoncontainers = [ this.symbol ];
    this.childContainers.push(this.operandContainer);
    this.padLeft = .05;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            if (this.isInline) {
                var maxWidthList = [];
                if (this.hasUpperLimit) {
                    maxWidthList.push(this.upperLimitContainer.width);
                }
                if (this.hasLowerLimit) {
                    maxWidthList.push(this.lowerLimitContainer.width);
                }
                var limitWidth = maxWidthList.length > 0 ? maxWidthList.max() : 0;
                widthVal = this.symbol.width + this.inlineLimitGap * fontHeight + limitWidth + this.inlineOperandGap * fontHeight + this.operandContainer.width;
            } else {
                var maxWidthList = [];
                if (this.hasUpperLimit) {
                    maxWidthList.push(this.upperLimitContainer.width);
                }
                if (this.hasLowerLimit) {
                    maxWidthList.push(this.lowerLimitContainer.width);
                }
                maxWidthList.push(this.symbol.width);
                var maxWidth = maxWidthList.max();
                widthVal = maxWidth + this.operandContainer.width + this.operandGap * fontHeight;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var topAlignVal = 0;
            var leftPartTopAlign = 0;
            var rightPartTopAlign = 0;
            if (this.operandContainer.maxTopAlignIndex !== null) {
                rightPartTopAlign = this.operandContainer.wrappers[this.operandContainer.maxTopAlignIndex].topAlign;
            }
            if (this.isInline) {
                if (this.hasUpperLimit) {
                    if (this.upperLimitContainer.height > this.symbol.height * this.inlineUpperLimitOverlap) {
                        leftPartTopAlign = .1 * this.symbol.height + this.upperLimitContainer.height;
                    } else {
                        leftPartTopAlign = .5 * this.symbol.height;
                    }
                } else {
                    leftPartTopAlign = .5 * this.symbol.height;
                }
            } else {
                if (this.operandContainer.wrappers.length > 0) {
                    if (this.hasUpperLimit) {
                        var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
                        leftPartTopAlign = .5 * this.symbol.height + this.upperLimitContainer.height + this.upperLimitGap * fontHeight;
                    } else {
                        leftPartTopAlign = .5 * this.symbol.height;
                    }
                }
            }
            topAlignVal = leftPartTopAlign > rightPartTopAlign ? leftPartTopAlign : rightPartTopAlign;
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var bottomAlignVal = 0;
            var leftPartBottomAlign = 0;
            var rightPartBottomAlign = 0;
            if (this.operandContainer.maxBottomAlignIndex !== null) {
                rightPartBottomAlign = this.operandContainer.wrappers[this.operandContainer.maxBottomAlignIndex].topAlign;
            }
            if (this.isInline) {
                if (this.hasLowerLimit) {
                    if (this.lowerLimitContainer.height > this.symbol.height * this.inlineLowerLimitOverlap) {
                        leftPartBottomAlign = .1 * this.symbol.height + this.lowerLimitContainer.height;
                    } else {
                        leftPartBottomAlign = .5 * this.symbol.height;
                    }
                } else {
                    leftPartBottomAlign = .5 * this.symbol.height;
                }
            } else {
                if (this.operandContainer.wrappers.length > 0) {
                    if (this.hasLowerLimit) {
                        var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
                        leftPartBottomAlign = .5 * this.symbol.height + this.lowerLimitContainer.height + this.lowerLimitGap * fontHeight;
                    } else {
                        leftPartBottomAlign = .5 * this.symbol.height;
                    }
                }
            }
            bottomAlignVal = leftPartBottomAlign > rightPartBottomAlign ? leftPartBottomAlign : rightPartBottomAlign;
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.BigOperatorWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.BigOperatorWrapper.prototype.constructor = eqEd.BigOperatorWrapper;
    eqEd.BigOperatorWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper bigOperatorWrapper"></div>');
    };
    eqEd.BigOperatorWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.isInline, this.hasUpperLimit, this.hasLowerLimit, this.bigOperatorType, this.symbolSizeConfig);
        copy.childContainers = [];
        copy.domObj = copy.buildDomObj();
        if (copy.hasUpperLimit) {
            copy.upperLimitContainer = this.upperLimitContainer.clone();
            copy.upperLimitContainer.parent = copy;
            copy.domObj.append(copy.upperLimitContainer.domObj);
            copy.childContainers.push(copy.upperLimitContainer);
        }
        if (copy.hasLowerLimit) {
            copy.lowerLimitContainer = this.lowerLimitContainer.clone();
            copy.lowerLimitContainer.parent = copy;
            copy.domObj.append(copy.lowerLimitContainer.domObj);
            copy.childContainers.push(copy.lowerLimitContainer);
        }
        copy.operandContainer = this.operandContainer.clone();
        copy.symbol = new copy.bigOperatorSymbolCtors[copy.bigOperatorType](copy.symbolSizeConfig);
        copy.operandContainer.parent = copy;
        copy.symbol.parent = copy;
        copy.domObj.append(copy.operandContainer.domObj);
        copy.domObj.append(copy.symbol.domObj);
        copy.childNoncontainers = [ copy.symbol ];
        copy.childContainers.push(copy.operandContainer);
        return copy;
    };
    eqEd.BigOperatorWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.bigOperatorType
        };
        if (!this.hasLowerLimit && !this.hasUpperLimit) {
            jsonObj.operands = {
                operand: this.operandContainer.buildJsonObj()
            };
        } else if (this.hasLowerLimit && !this.hasUpperLimit) {
            jsonObj.operands = {
                lowerLimit: this.lowerLimitContainer.buildJsonObj(),
                operand: this.operandContainer.buildJsonObj()
            };
        } else if (!this.hasLowerLimit && this.hasUpperLimit) {
            jsonObj.operands = {
                upperLimit: this.upperLimitContainer.buildJsonObj(),
                operand: this.operandContainer.buildJsonObj()
            };
        } else {
            jsonObj.operands = {
                lowerLimit: this.lowerLimitContainer.buildJsonObj(),
                upperLimit: this.upperLimitContainer.buildJsonObj(),
                operand: this.operandContainer.buildJsonObj()
            };
        }
        return jsonObj;
    };
    eqEd.BigOperatorWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var hasUpperLimit = typeof jsonObj.operands.upperLimit !== "undefined";
        var hasLowerLimit = typeof jsonObj.operands.lowerLimit !== "undefined";
        var bigOperatorWrapper = new eqEd.BigOperatorWrapper(false, hasUpperLimit, hasLowerLimit, jsonObj.value, symbolSizeConfig);
        if (hasUpperLimit) {
            for (var i = 0; i < jsonObj.operands.upperLimit.length; i++) {
                var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.upperLimit[i].type);
                var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.upperLimit[i], symbolSizeConfig);
                bigOperatorWrapper.upperLimitContainer.addWrappers([ i, innerWrapper ]);
            }
        }
        if (hasLowerLimit) {
            for (var i = 0; i < jsonObj.operands.lowerLimit.length; i++) {
                var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.lowerLimit[i].type);
                var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.lowerLimit[i], symbolSizeConfig);
                bigOperatorWrapper.lowerLimitContainer.addWrappers([ i, innerWrapper ]);
            }
        }
        for (var i = 0; i < jsonObj.operands.operand.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.operand[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.operand[i], symbolSizeConfig);
            bigOperatorWrapper.operandContainer.addWrappers([ i, innerWrapper ]);
        }
        return bigOperatorWrapper;
    };
})();

eqEd.BigOperatorUpperLimitContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.BigOperatorUpperLimitContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.isInline) {
                leftVal = this.parent.symbol.width + this.parent.inlineLimitGap * fontHeight;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = .5 * (maxWidth - this.width);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.isInline) {
                var leftPartTopAlign = 0;
                if (this.height > this.parent.symbol.height * this.parent.inlineUpperLimitOverlap) {
                    leftPartTopAlign = (.5 - this.parent.inlineLowerLimitOverlap) * this.parent.symbol.height + this.height;
                } else {
                    leftPartTopAlign = .5 * this.parent.symbol.height;
                }
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight - leftPartTopAlign;
            } else {
                var leftPartTopAlign = this.height + .5 * this.parent.symbol.height + this.parent.upperLimitGap * fontHeight;
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight - leftPartTopAlign;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.BigOperatorUpperLimitContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.BigOperatorUpperLimitContainer.prototype.constructor = eqEd.BigOperatorUpperLimitContainer;
    eqEd.BigOperatorUpperLimitContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer bigOperatorUpperLimitContainer"></div>');
    };
})();

eqEd.BigOperatorLowerLimitContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.BigOperatorLowerLimitContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.isInline) {
                leftVal = this.parent.symbol.width + this.parent.inlineLimitGap * fontHeight;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = .5 * (maxWidth - this.width);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.isInline) {
                var additionalTopAlign = 0;
                if (this.height > this.parent.symbol.height * this.parent.inlineLowerLimitOverlap) {
                    additionalTopAlign = (.5 - this.parent.inlineLowerLimitOverlap) * this.parent.symbol.height;
                } else {
                    additionalTopAlign = .5 * this.parent.symbol.height - this.height;
                }
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight + additionalTopAlign;
            } else {
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight + this.parent.symbol.height * .5 + this.parent.lowerLimitGap * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.BigOperatorLowerLimitContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.BigOperatorLowerLimitContainer.prototype.constructor = eqEd.BigOperatorLowerLimitContainer;
    eqEd.BigOperatorLowerLimitContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer bigOperatorLowerLimitContainer"></div>');
    };
})();

eqEd.BigOperatorOperandContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.BigOperatorOperandContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.isInline) {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                var limitWidth = maxWidthList.length > 0 ? maxWidthList.max() : 0;
                leftVal = this.parent.symbol.width + this.parent.inlineLimitGap * fontHeight + limitWidth + this.parent.inlineOperandGap * fontHeight;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = maxWidth + this.parent.operandGap * fontHeight;
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var topVal = 0;
            if (this.wrappers.length > 0) {
                topVal = this.parent.topAlign - this.wrappers[this.maxTopAlignIndex].topAlign;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            fontSizeVal = actualParentContainer.fontSize;
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.BigOperatorOperandContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.BigOperatorOperandContainer.prototype.constructor = eqEd.BigOperatorOperandContainer;
    eqEd.BigOperatorOperandContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer bigOperatorOperandContainer"></div>');
    };
})();

eqEd.BigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.BigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var leftVal = 0;
            if (this.parent.isInline) {
                leftVal = 0;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = .5 * (maxWidth - this.width);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = this.parent.topAlign - .5 * this.height;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 1.5 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.BigOperatorSymbol.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.BigOperatorSymbol.prototype.constructor = eqEd.BigOperatorSymbol;
})();

eqEd.SumBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.SumBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .94287111375 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.SumBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.SumBigOperatorSymbol.prototype.constructor = eqEd.SumBigOperatorSymbol;
    eqEd.SumBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol sumBigOperatorSymbol" style="width: 52.797009; height: 55.995998;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 52.797009 55.995998" preserveAspectRatio="none"><g transform="translate(-50.817524,-457.79474)"><g><path d="m 51.36436,513.79074 c -0.36456,-6e-5 -0.546839,-0.20968 -0.546836,-0.62886 -3e-6,-0.14588 0.05468,-0.27348 0.164051,-0.38279 L 71.351213,487.87071 50.981575,459.81803 c -0.10937,-0.10937 -0.164054,-0.20962 -0.164051,-0.30076 l 0,-1.23038 c -3e-6,-0.12759 0.05924,-0.24152 0.177722,-0.34177 0.118478,-0.10025 0.241516,-0.15038 0.369114,-0.15038 l 47.438016,0 4.812154,13.09672 -1.61316,0 c -0.92968,-2.55191 -2.337779,-4.57976 -4.224311,-6.08355 -1.886632,-1.5038 -4.042075,-2.59748 -6.466335,-3.28102 -2.424347,-0.68354 -4.784853,-1.10278 -7.081525,-1.25772 -2.296745,-0.15494 -5.094719,-0.23241 -8.393931,-0.2324 l -18.701789,0 18.483054,25.37318 c 0.10934,0.10934 0.164023,0.23694 0.164051,0.38279 -2.8e-5,0.14579 -0.05471,0.27339 -0.164051,0.38278 l -19.986853,24.41623 20.533689,0 c 3.244528,-6e-5 6.006047,-0.0775 8.284565,-0.23241 2.278443,-0.15499 4.620722,-0.56511 7.026841,-1.23038 2.406032,-0.66537 4.543247,-1.75904 6.411651,-3.28101 1.868304,-1.52208 3.239954,-3.55904 4.114944,-6.1109 l 1.61316,0 -4.812154,14.05369 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigCapBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigCapBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71482492204 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigCapBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigCapBigOperatorSymbol.prototype.constructor = eqEd.BigCapBigOperatorSymbol;
    eqEd.BigCapBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigCapBigOperatorSymbol" style="width: 200; height: 279.78879;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 200 279.78879" preserveAspectRatio="none"><g transform="translate(-259.34158,-210.57319)"><g><path d="m 352.34201,210.57944 c -11.10773,0.9043 -21.5904,3.34581 -31.44804,7.32454 -9.85778,3.9791 -19.04052,9.47042 -27.54827,16.47397 -8.79949,7.19138 -16.14903,16.00749 -22.04863,26.44835 -5.89965,10.44114 -9.7494,22.55704 -11.54927,36.34773 -0.0642,0.36428 -0.11359,2.61352 -0.14814,6.74773 -0.0346,4.1344 -0.0691,12.76842 -0.1037,25.90208 -0.0346,13.1338 -0.084,33.3819 -0.14814,60.74436 -0.004,32.99791 0.004,56.54642 0.025,70.64558 0.0208,14.09904 0.0792,21.1486 0.17499,21.14868 0.46246,2.3456 1.58739,4.25381 3.37479,5.72464 1.78737,1.47065 3.86224,2.22894 6.22461,2.27486 2.34983,-0.0501 4.39971,-0.80004 6.14962,-2.24986 1.74986,-1.45 2.89979,-3.29988 3.44978,-5.54965 0.0958,-0.0959 0.15413,-7.15379 0.17499,-21.17368 0.0208,-14.02 0.0291,-36.82689 0.025,-68.42072 -0.004,-29.84394 0.004,-52.30085 0.025,-67.3708 0.0208,-15.0698 0.0791,-23.07762 0.17499,-24.02349 1.26655,-15.12811 6.43289,-28.56893 15.49903,-40.32249 9.06604,-11.75328 21.03195,-20.44439 35.89776,-26.07337 4.61629,-1.70389 9.33265,-2.99548 14.14911,-3.87476 4.81627,-0.87894 9.63263,-1.32058 14.4491,-1.32491 22.78595,0.63346 41.45976,7.86633 56.0215,21.69864 14.56141,13.8326 22.68589,30.46488 24.37348,49.89689 0.0956,0.94587 0.15396,8.95369 0.17499,24.02349 0.0206,15.06996 0.029,37.52687 0.025,67.3708 -0.004,31.59383 0.004,54.40072 0.025,68.42072 0.0206,14.01988 0.079,21.07777 0.17499,21.17368 0.54977,2.24978 1.6997,4.09966 3.44978,5.54965 1.7497,1.44982 3.79957,2.19977 6.14962,2.24986 2.36215,-0.0459 4.43702,-0.8042 6.22461,-2.27486 1.78718,-1.47083 2.91211,-3.37904 3.37479,-5.72464 0.0956,-8e-5 0.15395,-7.04963 0.17499,-21.14868 0.0206,-14.09916 0.0289,-37.64767 0.025,-70.64558 -0.045,-24.62447 -0.0804,-43.4587 -0.10625,-56.50273 -0.0263,-13.0439 -0.0742,-22.24123 -0.14374,-27.59202 -0.07,-5.35061 -0.1929,-8.7983 -0.36872,-10.3431 -0.17624,-1.5446 -0.43664,-3.12991 -0.7812,-4.75596 -1.96676,-11.9158 -6.13316,-23.08176 -12.49922,-33.49791 -6.36646,-10.41586 -14.53261,-19.38196 -24.49847,-26.89831 -14.83256,-11.23245 -31.96481,-17.96536 -51.39679,-20.19874 -1.30837,-0.0956 -3.19159,-0.15397 -5.64965,-0.17499 -2.45829,-0.0207 -4.84147,-0.029 -7.14955,-0.025 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigCupBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigCupBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71476115809 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigCupBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigCupBigOperatorSymbol.prototype.constructor = eqEd.BigCupBigOperatorSymbol;
    eqEd.BigCupBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigCupBigOperatorSymbol" style="width: 200; height: 279.81375;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 200 279.81375" preserveAspectRatio="none"><g transform="translate(-382.19872,-150.51443)"><g><path d="m 382.40496,158.31394 c -0.0958,0.096 -0.15417,7.2039 -0.17499,21.32367 -0.0208,14.1201 -0.0292,37.67694 -0.025,70.67059 0.0448,24.62457 0.0802,43.45879 0.10624,56.50272 0.026,13.04399 0.0739,22.24133 0.14375,27.59202 0.0698,5.35071 0.19268,8.79841 0.36872,10.34311 0.17602,1.54469 0.43642,3.13001 0.7812,4.75595 1.4249,8.84526 4.12473,17.35306 8.09949,25.52341 3.97473,8.17028 9.07441,15.72813 15.29905,22.67358 7.8078,8.46607 16.89056,15.4323 27.2483,20.89869 10.35761,5.46624 21.34025,9.03268 32.94794,10.69934 2.91222,0.47904 5.33707,0.77069 7.27455,0.87494 1.93727,0.10407 4.51211,0.14573 7.72451,0.12499 9.07015,-0.0126 17.17797,-0.88753 24.32348,-2.62484 7.14525,-1.73748 14.10314,-4.26231 20.8737,-7.57452 9.72422,-4.82477 18.32368,-10.87439 25.79839,-18.14886 7.47435,-7.27461 13.67395,-15.62408 18.59884,-25.04844 2.5913,-5.05805 4.70783,-10.29106 6.3496,-15.69902 1.64136,-5.40801 2.85795,-11.24097 3.64977,-17.49891 0.064,-0.36417 0.11336,-2.61341 0.14814,-6.74773 0.0344,-4.1343 0.0689,-12.76832 0.10369,-25.90208 0.0344,-13.13371 0.0837,-33.3818 0.14815,-60.74435 0.004,-32.99365 -0.004,-56.55049 -0.025,-70.67059 -0.021,-14.11978 -0.0794,-21.22766 -0.17498,-21.32367 -0.46268,-2.24967 -1.58761,-4.09955 -3.37479,-5.54965 -1.78759,-1.44972 -3.86246,-2.19967 -6.22461,-2.24986 -2.35006,0.0502 -4.39993,0.80014 -6.14962,2.24986 -1.75008,1.4501 -2.90001,3.29998 -3.44978,5.54965 -0.096,0.096 -0.15435,7.1539 -0.17499,21.17368 -0.021,14.02011 -0.0294,36.82699 -0.025,68.42073 0.004,29.84403 -0.004,52.30094 -0.025,67.37079 -0.021,15.0699 -0.0794,23.07773 -0.17499,24.0235 -1.27094,15.1282 -6.42895,28.56901 -15.47403,40.32248 -9.04544,11.75338 -20.95302,20.4445 -35.72277,26.07337 -4.61235,1.70399 -9.33705,2.99557 -14.17411,3.87475 -4.83732,0.87905 -9.71201,1.32069 -14.62409,1.32493 -22.78616,-0.63337 -41.45998,-7.86624 -56.0215,-21.69865 -14.56163,-13.83251 -22.68611,-30.46478 -24.37348,-49.89688 -0.0959,-0.94578 -0.15418,-8.95361 -0.17499,-24.02351 -0.0209,-15.06984 -0.0292,-37.52675 -0.025,-67.37078 0.004,-31.59374 -0.004,-54.40063 -0.025,-68.42073 -0.0209,-14.01978 -0.0792,-21.07767 -0.17498,-21.17368 -0.55833,-2.33717 -1.74159,-4.21205 -3.54978,-5.62465 -1.80825,-1.41222 -3.89145,-2.13717 -6.24961,-2.17486 -2.54152,0.0752 -4.65806,0.87514 -6.3496,2.39985 -1.69158,1.52509 -2.70818,3.32498 -3.04981,5.39966 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigSqCapBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigSqCapBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71426980882 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigSqCapBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigSqCapBigOperatorSymbol.prototype.constructor = eqEd.BigSqCapBigOperatorSymbol;
    eqEd.BigSqCapBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigSqCapBigOperatorSymbol" style="width: 39.999485; height: 56.000526;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 39.999485 56.000526" preserveAspectRatio="none"><g transform="translate(-336.48568,-397.21981)"><g transform="scale(1,-1)"><path d="m 336.52568,-451.66036 c -5e-4,0.12053 -0.004,1.44841 -0.0104,3.98366 -0.006,2.5353 -0.0129,5.79501 -0.0193,9.77913 -0.006,3.98416 -0.01,8.20978 -0.0104,12.67687 4.9e-4,4.46711 0.004,8.69273 0.0104,12.67688 0.006,3.98414 0.0128,7.24384 0.0193,9.77913 0.006,2.53526 0.01,3.86314 0.0104,3.98365 0.20666,0.72664 0.71332,1.2333 1.51998,1.51998 l 18.31976,0.04 c 6.62322,8.2e-4 11.36649,-8.5e-4 14.22982,-0.005 2.86326,-0.004 4.30657,-0.0159 4.32994,-0.035 0.36829,-0.0858 0.69162,-0.26418 0.96999,-0.53499 0.27829,-0.27085 0.46162,-0.59918 0.54999,-0.98499 4.5e-4,-0.12051 0.004,-1.44839 0.0104,-3.98365 0.006,-2.53528 0.0128,-5.79499 0.0193,-9.77913 0.006,-3.98415 0.01,-8.20977 0.0104,-12.67688 -5.3e-4,-4.46709 -0.004,-8.69271 -0.0104,-12.67687 -0.006,-3.98412 -0.0129,-7.24383 -0.0193,-9.77913 -0.006,-2.53524 -0.01,-3.86313 -0.0104,-3.98366 -0.11004,-0.44995 -0.34004,-0.81995 -0.68999,-1.10998 -0.35004,-0.28996 -0.76003,-0.43996 -1.22998,-0.45 -0.47004,0.01 -0.88003,0.16004 -1.22999,0.45 -0.35003,0.29003 -0.58003,0.66003 -0.68999,1.10998 -0.0192,-0.008 -0.0309,1.96835 -0.035,5.92993 -0.004,3.96164 -0.006,10.43822 -0.005,19.42975 l 0,25.15967 -32.15958,0 0,-25.15967 c 8.2e-4,-8.99153 -8.4e-4,-15.46811 -0.005,-19.42975 -0.004,-3.96158 -0.0158,-5.93822 -0.035,-5.92993 -0.11167,-0.46745 -0.34834,-0.84245 -0.70999,-1.12498 -0.36167,-0.28246 -0.77833,-0.42746 -1.24999,-0.435 -0.50333,0.015 -0.91666,0.17504 -1.23998,0.48 -0.32333,0.30503 -0.53666,0.66503 -0.63999,1.07998 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigSqCupBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigSqCupBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71426980882 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigSqCupBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigSqCupBigOperatorSymbol.prototype.constructor = eqEd.BigSqCupBigOperatorSymbol;
    eqEd.BigSqCupBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigSqCupBigOperatorSymbol" style="width: 39.999485; height: 56.000526;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 39.999485 56.000526" preserveAspectRatio="none"><g transform="translate(-285.05712,-397.21982)"><g><path d="m 285.09712,398.7798 c -5e-4,0.12053 -0.004,1.44841 -0.0104,3.98365 -0.006,2.53531 -0.0128,5.79501 -0.0193,9.77913 -0.006,3.98417 -0.01,8.20979 -0.0104,12.67688 4.9e-4,4.46711 0.004,8.69273 0.0104,12.67687 0.006,3.98414 0.0128,7.24385 0.0193,9.77914 0.006,2.53526 0.01,3.86314 0.0104,3.98365 0.20666,0.72664 0.71332,1.2333 1.51998,1.51998 l 18.31976,0.04 c 6.62322,8.1e-4 11.36649,-8.5e-4 14.22982,-0.005 2.86326,-0.004 4.30657,-0.0159 4.32994,-0.035 0.36829,-0.0858 0.69162,-0.26418 0.96999,-0.53499 0.27829,-0.27085 0.46162,-0.59918 0.54999,-0.98499 4.6e-4,-0.12051 0.004,-1.44839 0.0104,-3.98365 0.006,-2.53529 0.0128,-5.795 0.0193,-9.77914 0.006,-3.98414 0.01,-8.20976 0.0104,-12.67687 -5.3e-4,-4.46709 -0.004,-8.69271 -0.0104,-12.67688 -0.006,-3.98412 -0.0129,-7.24382 -0.0193,-9.77913 -0.006,-2.53524 -0.01,-3.86312 -0.0104,-3.98365 -0.11004,-0.44996 -0.34003,-0.81995 -0.68999,-1.10999 -0.35003,-0.28996 -0.76003,-0.43995 -1.22998,-0.44999 -0.47004,0.01 -0.88003,0.16004 -1.22999,0.44999 -0.35003,0.29004 -0.58003,0.66003 -0.68999,1.10999 -0.0192,-0.008 -0.0309,1.96834 -0.035,5.92992 -0.004,3.96165 -0.006,10.43822 -0.005,19.42975 l 0,25.15968 -32.15958,0 0,-25.15968 c 8.3e-4,-8.99153 -8.4e-4,-15.46811 -0.005,-19.42975 -0.004,-3.96158 -0.0158,-5.93822 -0.035,-5.92992 -0.11167,-0.46746 -0.34834,-0.84245 -0.70999,-1.12499 -0.36167,-0.28246 -0.77833,-0.42745 -1.24999,-0.43499 -0.50333,0.015 -0.91665,0.17503 -1.23998,0.47999 -0.32333,0.30504 -0.53666,0.66503 -0.63999,1.07999 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.ProdBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.ProdBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return .83214285669 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.ProdBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.ProdBigOperatorSymbol.prototype.constructor = eqEd.ProdBigOperatorSymbol;
    eqEd.ProdBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol prodBigOperatorSymbol" style="width: 46.5994; height: 55.999279;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 46.5994 55.999279" preserveAspectRatio="none"><g transform="translate(-256.52568,-351.50552)"><g><path d="m 296.60516,401.94488 0,-44.91943 c 0.33245,-1.22495 1.02744,-2.09494 2.08497,-2.60996 1.05744,-0.51496 2.40243,-0.76496 4.03495,-0.74999 l 0.4,0 0,-2.15998 -46.5994,0 0,2.15998 0.39999,0 c 0.72749,0.003 1.41248,0.0575 2.05497,0.16499 0.64249,0.10754 1.19748,0.25254 1.66498,0.435 0.69915,0.29253 1.22081,0.65752 1.56498,1.09498 0.34416,0.43753 0.63582,0.99253 0.87499,1.66498 l 0,44.91943 -0.12,0.35999 c -0.38917,1.10664 -1.10082,1.89329 -2.13497,2.35997 -1.03416,0.46665 -2.33581,0.69331 -3.90495,0.67999 l -0.39999,0 0,2.15997 19.83974,0 0,-2.15997 -0.39999,0 c -1.6375,0.0158 -2.99248,-0.23584 -4.06495,-0.75499 -1.0725,-0.51917 -1.75749,-1.40083 -2.05497,-2.64496 l -0.04,-24.11969 0,-24.15969 20.03974,0 0,48.27938 -0.12,0.35999 c -0.3892,1.10664 -1.10086,1.89329 -2.13497,2.35997 -1.03419,0.46665 -2.33584,0.69331 -3.90495,0.67999 l -0.4,0 0,2.15997 19.83975,0 0,-2.15997 -0.4,0 c -1.63752,0.0158 -2.99251,-0.23584 -4.06495,-0.75499 -1.07253,-0.51917 -1.75752,-1.40083 -2.05497,-2.64496 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.CoProdBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.CoProdBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return .83214285669 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.CoProdBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.CoProdBigOperatorSymbol.prototype.constructor = eqEd.CoProdBigOperatorSymbol;
    eqEd.CoProdBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol coProdBigOperatorSymbol" style="width: 46.5994; height: 55.999279;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 46.5994 55.999279" preserveAspectRatio="none"><g transform="translate(-110.8114,-368.64838)"><g><path d="m 150.89088,419.08773 0,-44.91942 c 0.33246,-1.22496 1.02745,-2.09494 2.08497,-2.60997 1.05745,-0.51496 2.40243,-0.76496 4.03495,-0.74999 l 0.4,0 0,-2.15997 -19.83975,0 0,2.15997 0.4,0 c 0.72746,0.003 1.41245,0.0575 2.05497,0.165 0.64246,0.10753 1.19745,0.25253 1.66498,0.43499 0.69912,0.29253 1.22078,0.65753 1.56498,1.09499 0.34413,0.43753 0.63579,0.99252 0.87499,1.66498 l 0,48.31937 -20.03974,0 0,-24.15968 0.04,-24.15969 c 0.33248,-1.22496 1.02747,-2.09494 2.08497,-2.60997 1.05747,-0.51496 2.40245,-0.76496 4.03495,-0.74999 l 0.39999,0 0,-2.15997 -19.83974,0 0,2.15997 0.39999,0 c 0.72749,0.003 1.41248,0.0575 2.05498,0.165 0.64248,0.10753 1.19747,0.25253 1.66497,0.43499 0.69916,0.29253 1.22081,0.65753 1.56498,1.09499 0.34416,0.43753 0.63582,0.99252 0.87499,1.66498 l 0,44.91942 -0.12,0.35999 c -0.38917,1.10664 -1.10082,1.8933 -2.13497,2.35997 -1.03416,0.46665 -2.33581,0.69331 -3.90495,0.67999 l -0.39999,0 0,2.15998 46.5994,0 0,-2.15998 -0.4,0 c -1.63752,0.0158 -2.9925,-0.23584 -4.06495,-0.75499 -1.07252,-0.51917 -1.75751,-1.40082 -2.05497,-2.64496 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigVeeBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigVeeBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71433033986 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigVeeBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigVeeBigOperatorSymbol.prototype.constructor = eqEd.BigVeeBigOperatorSymbol;
    eqEd.BigVeeBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigVeeBigOperatorSymbol" style="width: 52.797009; height: 55.995998;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 40.001984 55.999279" preserveAspectRatio="none"><g transform="translate(-222.19872,-417.21982)"><g><path d="m 222.19997,419.21979 c -8.3e-4,0.0617 8.3e-4,0.12837 0.005,0.2 0.004,0.0717 0.0158,0.13837 0.035,0.2 0.0476,0.14642 0.50907,1.48585 1.38443,4.01828 0.87535,2.5325 1.99904,5.77967 3.37107,9.74154 1.37201,3.96191 2.8268,8.16019 4.36438,12.59484 1.53756,4.43467 2.99236,8.62739 4.36439,12.57817 1.372,3.95078 2.49569,7.18129 3.37107,9.69154 0.87534,2.51023 1.33681,3.82188 1.38443,3.93495 0.18581,0.32331 0.43414,0.57664 0.74499,0.75999 0.31081,0.18331 0.64913,0.27665 1.01498,0.28 0.36581,-0.008 0.69414,-0.10252 0.98499,-0.285 0.29081,-0.18251 0.50914,-0.40751 0.65499,-0.67499 0.0477,-0.10677 0.51111,-1.41768 1.39017,-3.93273 0.879,-2.51507 2.0072,-5.75373 3.38458,-9.71598 1.37733,-3.96227 2.83738,-8.16758 4.38013,-12.61595 1.5427,-4.44836 3.00163,-8.65923 4.3768,-12.63262 1.3751,-3.97335 2.49996,-7.22867 3.37459,-9.76598 0.87454,-2.53725 1.33238,-3.87594 1.3735,-4.01606 0.0191,-0.0616 0.0308,-0.1283 0.035,-0.2 0.004,-0.0716 0.006,-0.13829 0.005,-0.2 -0.01,-0.50162 -0.19004,-0.94828 -0.54,-1.33998 -0.35003,-0.39162 -0.81003,-0.59829 -1.37998,-0.61999 -0.36587,0.003 -0.7042,0.0967 -1.01499,0.28 -0.31086,0.18336 -0.55919,0.43669 -0.74499,0.75999 -0.0447,0.10448 -0.43978,1.22002 -1.18517,3.34662 -0.74546,2.12667 -1.7331,4.95774 -2.96292,8.49322 -1.22989,3.53553 -2.59383,7.46881 -4.0918,11.79985 l -8.0799,23.3197 -8.07989,-23.3197 c -1.49802,-4.33104 -2.86195,-8.26432 -4.0918,-11.79985 -1.22987,-3.53548 -2.21751,-6.36655 -2.96293,-8.49322 -0.74543,-2.12661 -1.14048,-3.24215 -1.18517,-3.34662 -0.16833,-0.3233 -0.41166,-0.57663 -0.72999,-0.75999 -0.31833,-0.1833 -0.66166,-0.27663 -1.02998,-0.28 -0.5875,0.0234 -1.05249,0.2367 -1.39499,0.63999 -0.34249,0.40337 -0.51749,0.85669 -0.52499,1.35998 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.BigWedgeBigOperatorSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.BigWedgeBigOperatorSymbol";
    this.domObj = this.buildDomObj();
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .71433033986 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.BigWedgeBigOperatorSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.BigWedgeBigOperatorSymbol.prototype.constructor = eqEd.BigWedgeBigOperatorSymbol;
    eqEd.BigWedgeBigOperatorSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol bigWedgeBigOperatorSymbol" style="width: 52.797009; height: 55.995998;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 40.001984 55.999279" preserveAspectRatio="none"><g transform="translate(-185.05587,-445.79123)"><g><path d="m 225.0566,499.83053 c 7.9e-4,-0.0617 -8.7e-4,-0.12834 -0.005,-0.19999 -0.004,-0.0717 -0.0159,-0.13835 -0.035,-0.2 -0.0411,-0.14011 -0.49895,-1.47879 -1.3735,-4.01606 -0.87462,-2.53729 -1.99949,-5.79262 -3.37458,-9.76599 -1.37518,-3.97337 -2.83411,-8.18424 -4.3768,-12.63261 -1.54276,-4.44835 -3.0028,-8.65367 -4.38013,-12.61595 -1.37738,-3.96224 -2.50558,-7.2009 -3.38458,-9.71599 -0.87906,-2.51502 -1.34245,-3.82593 -1.39017,-3.93272 -0.16752,-0.28496 -0.40252,-0.51496 -0.70499,-0.68999 -0.30252,-0.17496 -0.62752,-0.26496 -0.97499,-0.27 -0.40418,0.007 -0.75584,0.10337 -1.05499,0.29 -0.29918,0.1867 -0.52084,0.42336 -0.66499,0.70999 -0.0476,0.11972 -0.50908,1.43699 -1.38442,3.9518 -0.87538,2.51487 -1.99907,5.74915 -3.37107,9.70284 -1.37203,3.95373 -2.82683,8.14873 -4.36439,12.58502 -1.53758,4.43631 -2.99238,8.63575 -4.36439,12.59835 -1.37202,3.9626 -2.49571,7.21021 -3.37107,9.74284 -0.87536,2.53261 -1.33683,3.8721 -1.38442,4.01847 -0.0192,0.0783 -0.0308,0.15165 -0.035,0.22 -0.004,0.0683 -0.006,0.14165 -0.005,0.21999 0.0142,0.53665 0.20583,0.99331 0.57499,1.36999 0.36916,0.37664 0.83082,0.5733 1.38498,0.58999 0.36666,-0.003 0.70332,-0.0975 1.00999,-0.285 0.30666,-0.18751 0.54332,-0.45251 0.70999,-0.79499 0.0447,-0.0914 0.43974,-1.19753 1.18517,-3.31847 0.74542,-2.12098 1.73306,-4.94859 2.96293,-8.48286 1.22985,-3.53427 2.59378,-7.46706 4.0918,-11.79836 l 8.07989,-23.3197 8.0799,23.3197 c 1.49797,4.3313 2.8619,8.26409 4.0918,11.79836 1.22982,3.53427 2.21746,6.36188 2.96292,8.48286 0.74538,2.12094 1.14044,3.2271 1.18517,3.31847 0.18579,0.34248 0.43412,0.60748 0.74499,0.79499 0.31079,0.18748 0.64912,0.28248 1.01499,0.285 0.56995,-0.0217 1.02994,-0.22835 1.37998,-0.61999 0.34995,-0.39168 0.52995,-0.83834 0.53999,-1.33999 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.IntegralWrapper = function(isInline, hasUpperLimit, hasLowerLimit, integralType, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.IntegralWrapper";
    this.isInline = isInline;
    this.hasUpperLimit = hasUpperLimit;
    this.hasLowerLimit = hasLowerLimit;
    this.integralType = integralType;
    this.upperLimitGap = .1;
    this.lowerLimitGap = .2;
    this.inlineUpperLimitOverlap = .25;
    this.inlineLowerLimitOverlap = .25;
    this.inlineLimitGap = .15;
    this.numIntegrals = 0;
    if (this.integralType === "single" || this.integralType === "singleContour") {
        this.numIntegrals = 1;
    } else if (this.integralType === "double" || this.integralType === "doubleContour") {
        this.numIntegrals = 2;
    } else if (this.integralType === "triple" || this.integralType === "tripleContour") {
        this.numIntegrals = 3;
    }
    this.integralSymbolCtors = {
        single: eqEd.IntegralSymbol,
        double: eqEd.DoubleIntegralSymbol,
        triple: eqEd.TripleIntegralSymbol,
        singleContour: eqEd.ContourIntegralSymbol,
        doubleContour: eqEd.ContourDoubleIntegralSymbol,
        tripleContour: eqEd.ContourTripleIntegralSymbol
    };
    this.domObj = this.buildDomObj();
    this.childContainers = [];
    if (this.hasUpperLimit) {
        this.upperLimitContainer = new eqEd.IntegralUpperLimitContainer(symbolSizeConfig);
        this.upperLimitContainer.parent = this;
        this.domObj.append(this.upperLimitContainer.domObj);
        this.childContainers.push(this.upperLimitContainer);
    }
    if (this.hasLowerLimit) {
        this.lowerLimitContainer = new eqEd.IntegralLowerLimitContainer(symbolSizeConfig);
        this.lowerLimitContainer.parent = this;
        this.domObj.append(this.lowerLimitContainer.domObj);
        this.childContainers.push(this.lowerLimitContainer);
    }
    this.symbol = new this.integralSymbolCtors[this.integralType](symbolSizeConfig);
    this.symbol.parent = this;
    this.domObj.append(this.symbol.domObj);
    this.childNoncontainers = [ this.symbol ];
    this.padLeft = .15;
    this.padRight = .15;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            if (this.isInline) {
                var maxWidthList = [];
                if (this.hasUpperLimit) {
                    maxWidthList.push(this.upperLimitContainer.width);
                }
                if (this.hasLowerLimit) {
                    maxWidthList.push(this.lowerLimitContainer.width - this.lowerLimitContainer.inlineLeftOverlap * fontHeight);
                }
                var limitWidth = maxWidthList.length > 0 ? maxWidthList.max() : 0;
                widthVal = this.symbol.width + this.inlineLimitGap * fontHeight + limitWidth;
            } else {
                var maxWidthList = [];
                if (this.hasUpperLimit) {
                    maxWidthList.push(this.upperLimitContainer.width);
                }
                if (this.hasLowerLimit) {
                    maxWidthList.push(this.lowerLimitContainer.width);
                }
                maxWidthList.push(this.symbol.width);
                var maxWidth = maxWidthList.max();
                widthVal = maxWidth;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var topAlignVal = 0;
            if (this.isInline) {
                if (this.hasUpperLimit) {
                    if (this.upperLimitContainer.height > this.symbol.height * this.inlineUpperLimitOverlap) {
                        topAlignVal = (.5 - this.inlineUpperLimitOverlap) * this.symbol.height + this.upperLimitContainer.height;
                    } else {
                        topAlignVal = .5 * this.symbol.height;
                    }
                } else {
                    topAlignVal = .5 * this.symbol.height;
                }
            } else {
                if (this.hasUpperLimit) {
                    var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
                    topAlignVal = .5 * this.symbol.height + this.upperLimitContainer.height + this.upperLimitGap * fontHeight;
                } else {
                    topAlignVal = .5 * this.symbol.height;
                }
            }
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var bottomAlignVal = 0;
            if (this.isInline) {
                if (this.hasLowerLimit) {
                    if (this.lowerLimitContainer.height > this.symbol.height * this.inlineLowerLimitOverlap) {
                        bottomAlignVal = (.5 - this.inlineLowerLimitOverlap) * this.symbol.height + this.lowerLimitContainer.height;
                    } else {
                        bottomAlignVal = .5 * this.symbol.height;
                    }
                } else {
                    bottomAlignVal = .5 * this.symbol.height;
                }
            } else {
                if (this.hasLowerLimit) {
                    var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
                    bottomAlignVal = .5 * this.symbol.height + this.lowerLimitContainer.height + this.lowerLimitGap * fontHeight;
                } else {
                    bottomAlignVal = .5 * this.symbol.height;
                }
            }
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.IntegralWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.IntegralWrapper.prototype.constructor = eqEd.IntegralWrapper;
    eqEd.IntegralWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper integralWrapper"></div>');
    };
    eqEd.IntegralWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.isInline, this.hasUpperLimit, this.hasLowerLimit, this.integralType, this.symbolSizeConfig);
        copy.childContainers = [];
        copy.domObj = copy.buildDomObj();
        if (copy.hasUpperLimit) {
            copy.upperLimitContainer = this.upperLimitContainer.clone();
            copy.upperLimitContainer.parent = copy;
            copy.domObj.append(copy.upperLimitContainer.domObj);
            copy.childContainers.push(copy.upperLimitContainer);
        }
        if (copy.hasLowerLimit) {
            copy.lowerLimitContainer = this.lowerLimitContainer.clone();
            copy.lowerLimitContainer.parent = copy;
            copy.domObj.append(copy.lowerLimitContainer.domObj);
            copy.childContainers.push(copy.lowerLimitContainer);
        }
        copy.symbol = new copy.integralSymbolCtors[copy.integralType](copy.symbolSizeConfig);
        copy.symbol.parent = copy;
        copy.domObj.append(copy.symbol.domObj);
        copy.childNoncontainers = [ copy.symbol ];
        return copy;
    };
    eqEd.IntegralWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.integralType
        };
        if (!this.hasLowerLimit && !this.hasUpperLimit) {
            jsonObj.operands = null;
        } else if (this.hasLowerLimit && !this.hasUpperLimit) {
            jsonObj.operands = {
                lowerLimit: this.lowerLimitContainer.buildJsonObj()
            };
        } else if (!this.hasLowerLimit && this.hasUpperLimit) {
            jsonObj.operands = {
                upperLimit: this.upperLimitContainer.buildJsonObj()
            };
        } else {
            jsonObj.operands = {
                lowerLimit: this.lowerLimitContainer.buildJsonObj(),
                upperLimit: this.upperLimitContainer.buildJsonObj()
            };
        }
        return jsonObj;
    };
    eqEd.IntegralWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var hasUpperLimit = jsonObj.operands !== null && typeof jsonObj.operands.upperLimit !== "undefined";
        var hasLowerLimit = jsonObj.operands !== null && typeof jsonObj.operands.lowerLimit !== "undefined";
        var integralWrapper = new eqEd.IntegralWrapper(true, hasUpperLimit, hasLowerLimit, jsonObj.value, symbolSizeConfig);
        if (hasUpperLimit) {
            for (var i = 0; i < jsonObj.operands.upperLimit.length; i++) {
                var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.upperLimit[i].type);
                var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.upperLimit[i], symbolSizeConfig);
                integralWrapper.upperLimitContainer.addWrappers([ i, innerWrapper ]);
            }
        }
        if (hasLowerLimit) {
            for (var i = 0; i < jsonObj.operands.lowerLimit.length; i++) {
                var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.lowerLimit[i].type);
                var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.lowerLimit[i], symbolSizeConfig);
                integralWrapper.lowerLimitContainer.addWrappers([ i, innerWrapper ]);
            }
        }
        return integralWrapper;
    };
})();

eqEd.IntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.IntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .40009004166 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.IntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.IntegralSymbol.prototype.constructor = eqEd.IntegralSymbol;
    eqEd.IntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol integralSymbol" style="width: 35.559544; height: 88.878853;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 35.559544 88.878853" preserveAspectRatio="none"><g transform="translate(-316.48568,-332.24859)"><g><path d="m 320.96562,416.28751 c -0.0167,-0.67086 -0.23334,-1.20918 -0.64999,-1.61498 -0.41667,-0.40586 -0.93333,-0.61419 -1.54998,-0.62499 -0.7425,0.0116 -1.30749,0.2383 -1.69498,0.67999 -0.3875,0.44163 -0.5825,1.02829 -0.58499,1.75997 0.0833,1.29579 0.52665,2.38411 1.32998,3.26496 0.80332,0.88079 1.82664,1.33912 3.06996,1.37498 0.94665,-0.025 1.7933,-0.28503 2.53997,-0.77999 0.74664,-0.49502 1.3533,-1.07502 1.81997,-1.73997 0.57999,-0.75836 1.13998,-1.70168 1.67998,-2.82997 0.53998,-1.12834 1.05998,-2.45166 1.55998,-3.96995 0.31248,-0.95334 0.63748,-2.03666 0.97499,-3.24995 0.33748,-1.21334 0.73247,-2.71666 1.18498,-4.50995 1.21577,-4.8797 2.32193,-9.52902 3.31848,-13.94796 0.99651,-4.41896 1.94859,-8.92902 2.85626,-13.5302 0.90762,-4.60116 1.836,-9.61492 2.78515,-15.04129 0.46413,-2.8216 0.8558,-5.08824 1.17498,-6.79991 0.31914,-1.71161 0.6608,-3.45825 1.02499,-5.23993 0.58663,-2.96576 1.10329,-5.34406 1.54998,-7.13491 0.44663,-1.79077 0.90329,-3.31908 1.36998,-4.58494 0.4233,-1.1666 0.85663,-2.09326 1.29999,-2.77997 0.44329,-0.6866 0.87662,-1.09326 1.29998,-1.21998 0.0733,-0.0333 0.16663,-0.0466 0.28,-0.04 0.20746,0.002 0.43246,0.0384 0.67499,0.11 0.24246,0.0717 0.45746,0.16838 0.64499,0.28999 0.13913,0.0984 0.30079,0.23172 0.48499,0.4 0.18413,0.16838 0.2758,0.26171 0.275,0.28 -0.61336,0.14505 -1.11669,0.38504 -1.50998,0.71999 -0.39336,0.33504 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23329,1.20919 0.64999,1.61497 0.41663,0.40588 0.93329,0.61421 1.54998,0.625 0.75995,-0.0108 1.32994,-0.23912 1.70998,-0.68499 0.37995,-0.44578 0.56995,-1.04411 0.56999,-1.79498 -0.0884,-1.2941 -0.5317,-2.37575 -1.32998,-3.24496 -0.79836,-0.8691 -1.90168,-1.32076 -3.30996,-1.35498 -0.48169,0.008 -0.93835,0.10255 -1.36998,0.285 -0.4317,0.18255 -0.82836,0.40754 -1.18999,0.67499 -1.70834,1.37503 -3.09165,3.575 -4.14995,6.59991 -1.05834,3.02501 -1.98166,6.18496 -2.76996,9.47988 -1.22914,4.92836 -2.34419,9.6004 -3.34514,14.01612 -1.001,4.41576 -1.95308,8.92483 -2.85626,13.52723 -0.90322,4.60241 -1.82271,9.64777 -2.75848,15.1361 -0.56834,3.30495 -1.07167,6.13491 -1.50998,8.48989 -0.43834,2.35495 -0.88167,4.56492 -1.32999,6.62992 -0.73333,3.45909 -1.43666,6.16072 -2.10997,8.10489 -0.67333,1.94411 -1.35666,3.25576 -2.04997,3.93495 -0.21001,0.19746 -0.39001,0.33246 -0.54,0.40499 -0.15,0.0725 -0.33,0.0975 -0.53999,0.075 -0.34,0.002 -0.66,-0.0617 -0.95999,-0.18999 -0.3,-0.12837 -0.58,-0.3317 -0.83999,-0.61 -0.08,-0.0625 -0.14,-0.11753 -0.17999,-0.16499 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11664,-0.38503 1.50998,-0.71999 0.39332,-0.33503 0.59665,-0.85502 0.60999,-1.55998 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.DoubleIntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.DoubleIntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .63771381028 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.DoubleIntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.DoubleIntegralSymbol.prototype.constructor = eqEd.DoubleIntegralSymbol;
    eqEd.DoubleIntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol doubleIntegralSymbol" style="width: 56.679272; height: 88.878853;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 56.679272 88.878853" preserveAspectRatio="none"><g transform="translate(-167.91427,-432.24859)"><g><path d="m 172.39421,516.28751 c -0.0167,-0.67086 -0.23334,-1.20918 -0.64999,-1.61498 -0.41667,-0.40586 -0.93333,-0.61419 -1.54998,-0.62499 -0.7425,0.0116 -1.30749,0.2383 -1.69498,0.67999 -0.3875,0.44163 -0.5825,1.02829 -0.58499,1.75997 0.0833,1.29579 0.52665,2.38411 1.32998,3.26496 0.80332,0.88079 1.82664,1.33912 3.06996,1.37498 0.94665,-0.025 1.7933,-0.28503 2.53997,-0.77999 0.74664,-0.49502 1.3533,-1.07502 1.81997,-1.73997 0.57998,-0.75836 1.13998,-1.70168 1.67998,-2.82997 0.53998,-1.12834 1.05997,-2.45166 1.55998,-3.96995 0.31248,-0.95334 0.63748,-2.03666 0.97499,-3.24995 0.33748,-1.21334 0.73247,-2.71666 1.18498,-4.50995 1.21577,-4.8797 2.32193,-9.52902 3.31848,-13.94796 0.99651,-4.41896 1.94859,-8.92902 2.85626,-13.5302 0.90762,-4.60116 1.836,-9.61492 2.78515,-15.04129 0.46413,-2.8216 0.85579,-5.08824 1.17498,-6.79991 0.31914,-1.71161 0.6608,-3.45825 1.02499,-5.23993 0.58663,-2.96576 1.10329,-5.34406 1.54998,-7.13491 0.44663,-1.79077 0.90329,-3.31908 1.36998,-4.58494 0.4233,-1.1666 0.85663,-2.09326 1.29999,-2.77997 0.44329,-0.6866 0.87662,-1.09326 1.29998,-1.21998 0.0733,-0.0333 0.16663,-0.0466 0.28,-0.04 0.20746,0.002 0.43246,0.0384 0.67499,0.11 0.24246,0.0717 0.45746,0.16838 0.64499,0.28999 0.13913,0.0984 0.30079,0.23172 0.48499,0.4 0.18413,0.16838 0.2758,0.26171 0.275,0.28 -0.61336,0.14505 -1.11669,0.38504 -1.50998,0.71999 -0.39336,0.33504 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23329,1.20919 0.64999,1.61497 0.41662,0.40588 0.93328,0.61421 1.54998,0.625 0.75995,-0.0108 1.32994,-0.23912 1.70998,-0.68499 0.37995,-0.44578 0.56995,-1.04411 0.56999,-1.79498 -0.0884,-1.2941 -0.5317,-2.37575 -1.32999,-3.24496 -0.79835,-0.8691 -1.90167,-1.32076 -3.30995,-1.35498 -0.48169,0.008 -0.93836,0.10255 -1.36998,0.285 -0.4317,0.18255 -0.82836,0.40754 -1.18999,0.67499 -1.70834,1.37503 -3.09165,3.575 -4.14995,6.59991 -1.05834,3.02501 -1.98166,6.18496 -2.76996,9.47988 -1.22914,4.92836 -2.34419,9.6004 -3.34514,14.01612 -1.001,4.41576 -1.95308,8.92483 -2.85626,13.52723 -0.90322,4.60241 -1.82271,9.64777 -2.75848,15.1361 -0.56834,3.30495 -1.07167,6.13491 -1.50999,8.48989 -0.43834,2.35495 -0.88166,4.56492 -1.32998,6.62992 -0.73333,3.45909 -1.43666,6.16072 -2.10997,8.10489 -0.67333,1.94411 -1.35666,3.25576 -2.04997,3.93495 -0.21001,0.19746 -0.39001,0.33246 -0.54,0.40499 -0.15,0.0725 -0.33,0.0975 -0.53999,0.075 -0.34,0.002 -0.66,-0.0617 -0.95999,-0.18999 -0.3,-0.12837 -0.58,-0.3317 -0.83999,-0.61 -0.08,-0.0625 -0.14,-0.11753 -0.18,-0.16499 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11664,-0.38503 1.50998,-0.71999 0.39332,-0.33503 0.59665,-0.85502 0.60999,-1.55998 z m 21.11973,0 c -0.0167,-0.67086 -0.23336,-1.20918 -0.65,-1.61498 -0.41668,-0.40586 -0.93334,-0.61419 -1.54998,-0.62499 -0.74251,0.0116 -1.3075,0.2383 -1.69497,0.67999 -0.38752,0.44163 -0.58252,1.02829 -0.585,1.75997 0.0833,1.29579 0.52664,2.38411 1.32999,3.26496 0.80329,0.88079 1.82661,1.33912 3.06996,1.37498 0.94662,-0.025 1.79328,-0.28503 2.53996,-0.77999 0.74663,-0.49502 1.35329,-1.07502 1.81998,-1.73997 0.57996,-0.75836 1.13995,-1.70168 1.67998,-2.82997 0.53996,-1.12834 1.05995,-2.45166 1.55998,-3.96995 0.31246,-0.95334 0.63746,-2.03666 0.97499,-3.24995 0.33746,-1.21334 0.73245,-2.71666 1.18498,-4.50995 1.21575,-4.8797 2.32191,-9.52902 3.31848,-13.94796 0.99648,-4.41896 1.94857,-8.92902 2.85626,-13.5302 0.90759,-4.60116 1.83598,-9.61492 2.78515,-15.04129 0.46411,-2.8216 0.85577,-5.08824 1.17498,-6.79991 0.31912,-1.71161 0.66078,-3.45825 1.02499,-5.23993 0.58661,-2.96576 1.10327,-5.34406 1.54998,-7.13491 0.44661,-1.79077 0.90327,-3.31908 1.36998,-4.58494 0.42328,-1.1666 0.8566,-2.09326 1.29998,-2.77997 0.44328,-0.6866 0.87661,-1.09326 1.29999,-1.21998 0.0733,-0.0333 0.16661,-0.0466 0.27999,-0.04 0.20745,0.002 0.43244,0.0384 0.675,0.11 0.24244,0.0717 0.45743,0.16838 0.64499,0.28999 0.13911,0.0984 0.30077,0.23172 0.48499,0.4 0.18411,0.16838 0.27577,0.26171 0.275,0.28 -0.61338,0.14505 -1.11671,0.38504 -1.50998,0.71999 -0.39339,0.33504 -0.59672,0.85504 -0.61,1.55998 0.0166,0.67087 0.23328,1.20919 0.65,1.61497 0.4166,0.40588 0.93326,0.61421 1.54998,0.625 0.75993,-0.0108 1.32992,-0.23912 1.70997,-0.68499 0.37994,-0.44578 0.56994,-1.04411 0.57,-1.79498 -0.0884,-1.2941 -0.53172,-2.37575 -1.32999,-3.24496 -0.79838,-0.8691 -1.90169,-1.32076 -3.30995,-1.35498 -0.48172,0.008 -0.93838,0.10255 -1.36999,0.285 -0.43171,0.18255 -0.82837,0.40754 -1.18998,0.67499 -1.70836,1.37503 -3.09168,3.575 -4.14995,6.59991 -1.05836,3.02501 -1.98168,6.18496 -2.76996,9.47988 -1.22917,4.92836 -2.34421,9.6004 -3.34515,14.01612 -1.00101,4.41576 -1.9531,8.92483 -2.85625,13.52723 -0.90324,4.60241 -1.82273,9.64777 -2.75849,15.1361 -0.56836,3.30495 -1.07168,6.13491 -1.50998,8.48989 -0.43836,2.35495 -0.88169,4.56492 -1.32998,6.62992 -0.73336,3.45909 -1.43668,6.16072 -2.10997,8.10489 -0.67336,1.94411 -1.35668,3.25576 -2.04998,3.93495 -0.21002,0.19746 -0.39002,0.33246 -0.53999,0.40499 -0.15003,0.0725 -0.33002,0.0975 -0.53999,0.075 -0.34003,0.002 -0.66002,-0.0617 -0.95999,-0.18999 -0.30002,-0.12837 -0.58002,-0.3317 -0.83999,-0.61 -0.08,-0.0625 -0.14002,-0.11753 -0.18,-0.16499 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.6133,-0.14503 1.11663,-0.38503 1.50998,-0.71999 0.39331,-0.33503 0.59664,-0.85502 0.61,-1.55998 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.TripleIntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.TripleIntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .86633665265 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.TripleIntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.TripleIntegralSymbol.prototype.constructor = eqEd.TripleIntegralSymbol;
    eqEd.TripleIntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol tripleIntegralSymbol" style="width: 76.999008; height: 88.878853;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 76.999008 88.878853" preserveAspectRatio="none"><g transform="translate(-242.19997,-417.96288)"><g><path d="m 246.67991,502.0018 c -0.0167,-0.67085 -0.23333,-1.20918 -0.64999,-1.61498 -0.41666,-0.40586 -0.93332,-0.61419 -1.54998,-0.62499 -0.74249,0.0116 -1.30748,0.2383 -1.69498,0.67999 -0.38749,0.44163 -0.58249,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52666,2.3841 1.32998,3.26496 0.80332,0.88078 1.82664,1.33911 3.06997,1.37498 0.94664,-0.025 1.7933,-0.28503 2.53996,-0.77999 0.74665,-0.49503 1.35331,-1.07502 1.81998,-1.73998 0.57998,-0.75835 1.13997,-1.70167 1.67998,-2.82996 0.53998,-1.12835 1.05997,-2.45166 1.55998,-3.96995 0.31248,-0.95335 0.63747,-2.03667 0.97498,-3.24996 0.33748,-1.21334 0.73248,-2.71665 1.18499,-4.50994 1.21577,-4.8797 2.32193,-9.52902 3.31847,-13.94797 0.99651,-4.41895 1.9486,-8.92902 2.85626,-13.5302 0.90762,-4.60116 1.83601,-9.61491 2.78515,-15.04128 0.46414,-2.82161 0.8558,-5.08824 1.17499,-6.79992 0.31913,-1.71161 0.6608,-3.45825 1.02499,-5.23993 0.58663,-2.96575 1.10329,-5.34406 1.54998,-7.13491 0.44663,-1.79076 0.90329,-3.31907 1.36998,-4.58494 0.42329,-1.1666 0.85662,-2.09325 1.29998,-2.77996 0.4433,-0.68661 0.87662,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16664,-0.0466 0.28,-0.04 0.20746,0.002 0.43246,0.0384 0.67499,0.11 0.24247,0.0717 0.45746,0.16839 0.64499,0.29 0.13913,0.0984 0.3008,0.23172 0.485,0.39999 0.18413,0.16839 0.27579,0.26172 0.27499,0.28 -0.61336,0.14505 -1.11668,0.38505 -1.50998,0.71999 -0.39336,0.33505 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.2333,1.2092 0.64999,1.61498 0.41663,0.40587 0.93329,0.61421 1.54998,0.62499 0.75996,-0.0108 1.32995,-0.23912 1.70998,-0.68499 0.37996,-0.44578 0.56996,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53169,-2.37575 -1.32998,-3.24495 -0.79836,-0.86911 -1.90168,-1.32077 -3.30996,-1.35499 -0.48169,0.008 -0.93835,0.10256 -1.36998,0.285 -0.43169,0.18255 -0.82835,0.40755 -1.18998,0.67499 -1.70834,1.37503 -3.09166,3.575 -4.14995,6.59992 -1.05835,3.025 -1.98167,6.18496 -2.76996,9.47987 -1.22915,4.92837 -2.34419,9.6004 -3.34515,14.01612 -1.00099,4.41576 -1.95308,8.92484 -2.85626,13.52723 -0.90321,4.60242 -1.8227,9.64778 -2.75848,15.1361 -0.56834,3.30495 -1.07167,6.13491 -1.50998,8.48989 -0.43834,2.35496 -0.88167,4.56493 -1.32998,6.62992 -0.73334,3.4591 -1.43666,6.16073 -2.10998,8.10489 -0.67333,1.94412 -1.35665,3.25576 -2.04997,3.93495 -0.21,0.19747 -0.39,0.33247 -0.53999,0.405 -0.15001,0.0725 -0.33,0.0975 -0.53999,0.075 -0.34001,0.002 -0.66,-0.0617 -0.95999,-0.19 -0.3,-0.12836 -0.58,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11665,-0.38502 1.50998,-0.71999 0.39332,-0.33503 0.59665,-0.85502 0.60999,-1.55998 z m 21.11973,0 c -0.0167,-0.67085 -0.23336,-1.20918 -0.64999,-1.61498 -0.41669,-0.40586 -0.93335,-0.61419 -1.54998,-0.62499 -0.74252,0.0116 -1.30751,0.2383 -1.69498,0.67999 -0.38752,0.44163 -0.58251,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52664,2.3841 1.32998,3.26496 0.8033,0.88078 1.82662,1.33911 3.06996,1.37498 0.94663,-0.025 1.79328,-0.28503 2.53997,-0.77999 0.74663,-0.49503 1.35328,-1.07502 1.81998,-1.73998 0.57996,-0.75835 1.13995,-1.70167 1.67998,-2.82996 0.53995,-1.12835 1.05995,-2.45166 1.55998,-3.96995 0.31246,-0.95335 0.63745,-2.03667 0.97498,-3.24996 0.33746,-1.21334 0.73246,-2.71665 1.18499,-4.50994 1.21575,-4.8797 2.3219,-9.52902 3.31847,-13.94797 0.99649,-4.41895 1.94858,-8.92902 2.85626,-13.5302 0.9076,-4.60116 1.83598,-9.61491 2.78515,-15.04128 0.46412,-2.82161 0.85578,-5.08824 1.17499,-6.79992 0.31911,-1.71161 0.66077,-3.45825 1.02498,-5.23993 0.58661,-2.96575 1.10327,-5.34406 1.54998,-7.13491 0.44661,-1.79076 0.90327,-3.31907 1.36999,-4.58494 0.42327,-1.1666 0.8566,-2.09325 1.29998,-2.77996 0.44327,-0.68661 0.8766,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16661,-0.0466 0.28,-0.04 0.20744,0.002 0.43244,0.0384 0.67499,0.11 0.24244,0.0717 0.45744,0.16839 0.64499,0.29 0.13911,0.0984 0.30078,0.23172 0.485,0.39999 0.1841,0.16839 0.27577,0.26172 0.27499,0.28 -0.61338,0.14505 -1.11671,0.38505 -1.50998,0.71999 -0.39338,0.33505 -0.59671,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23328,1.2092 0.64999,1.61498 0.41661,0.40587 0.93327,0.61421 1.54998,0.62499 0.75993,-0.0108 1.32993,-0.23912 1.70998,-0.68499 0.37994,-0.44578 0.56993,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53172,-2.37575 -1.32998,-3.24495 -0.79838,-0.86911 -1.9017,-1.32077 -3.30996,-1.35499 -0.48171,0.008 -0.93837,0.10256 -1.36998,0.285 -0.43172,0.18255 -0.82838,0.40755 -1.18999,0.67499 -1.70836,1.37503 -3.09167,3.575 -4.14994,6.59992 -1.05837,3.025 -1.98169,6.18496 -2.76997,9.47987 -1.22916,4.92837 -2.34421,9.6004 -3.34514,14.01612 -1.00101,4.41576 -1.9531,8.92484 -2.85626,13.52723 -0.90323,4.60242 -1.82273,9.64778 -2.75848,15.1361 -0.56836,3.30495 -1.07169,6.13491 -1.50998,8.48989 -0.43836,2.35496 -0.88169,4.56493 -1.32998,6.62992 -0.73336,3.4591 -1.43668,6.16073 -2.10998,8.10489 -0.67335,1.94412 -1.35668,3.25576 -2.04997,3.93495 -0.21003,0.19747 -0.39003,0.33247 -0.53999,0.405 -0.15003,0.0725 -0.33003,0.0975 -0.54,0.075 -0.34002,0.002 -0.66002,-0.0617 -0.95998,-0.19 -0.30003,-0.12836 -0.58002,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14003,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.6133,-0.14503 1.11662,-0.38502 1.50998,-0.71999 0.3933,-0.33503 0.59663,-0.85502 0.60999,-1.55998 z m 20.31974,0 c -0.0167,-0.67085 -0.23338,-1.20918 -0.64999,-1.61498 -0.41671,-0.40586 -0.93337,-0.61419 -1.54998,-0.62499 -0.74254,0.0116 -1.30753,0.2383 -1.69498,0.67999 -0.38754,0.44163 -0.58254,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52661,2.3841 1.32998,3.26496 0.80328,0.88078 1.8266,1.33911 3.06996,1.37498 0.94661,-0.025 1.79326,-0.28503 2.53997,-0.77999 0.7466,-0.49503 1.35326,-1.07502 1.81998,-1.73998 0.57993,-0.75835 1.13993,-1.70167 1.67997,-2.82996 0.53994,-1.12835 1.05994,-2.45166 1.55998,-3.96995 0.31244,-0.95335 0.63744,-2.03667 0.97499,-3.24996 0.33744,-1.21334 0.73243,-2.71665 1.18499,-4.50994 1.21572,-4.8797 2.32188,-9.52902 3.31847,-13.94797 0.99647,-4.41895 1.94855,-8.92902 2.85626,-13.5302 0.90758,-4.60116 1.83596,-9.61491 2.78515,-15.04128 0.46409,-2.82161 0.85575,-5.08824 1.17499,-6.79992 0.31909,-1.71161 0.66075,-3.45825 1.02498,-5.23993 0.58659,-2.96575 1.10325,-5.34406 1.54998,-7.13491 0.44659,-1.79076 0.90325,-3.31907 1.36998,-4.58494 0.42326,-1.1666 0.85659,-2.09325 1.29999,-2.77996 0.44325,-0.68661 0.87658,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16659,-0.0466 0.28,-0.04 0.20742,0.002 0.43242,0.0384 0.67499,0.11 0.24242,0.0717 0.45742,0.16839 0.64499,0.29 0.13909,0.0984 0.30075,0.23172 0.48499,0.39999 0.18409,0.16839 0.27576,0.26172 0.275,0.28 -0.6134,0.14505 -1.11673,0.38505 -1.50998,0.71999 -0.3934,0.33505 -0.59673,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23325,1.2092 0.64999,1.61498 0.41659,0.40587 0.93324,0.61421 1.54998,0.62499 0.75991,-0.0108 1.3299,-0.23912 1.70998,-0.68499 0.37991,-0.44578 0.56991,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53174,-2.37575 -1.32998,-3.24495 -0.7984,-0.86911 -1.90172,-1.32077 -3.30996,-1.35499 -0.48173,0.008 -0.93839,0.10256 -1.36998,0.285 -0.43174,0.18255 -0.8284,0.40755 -1.18999,0.67499 -1.70838,1.37503 -3.09169,3.575 -4.14994,6.59992 -1.05839,3.025 -1.98171,6.18496 -2.76997,9.47987 -1.22918,4.92837 -2.34423,9.6004 -3.34514,14.01612 -1.00104,4.41576 -1.95312,8.92484 -2.85626,13.52723 -0.90326,4.60242 -1.82275,9.64778 -2.75848,15.1361 -0.56838,3.30495 -1.07171,6.13491 -1.50998,8.48989 -0.43838,2.35496 -0.88171,4.56493 -1.32999,6.62992 -0.73337,3.4591 -1.4367,6.16073 -2.10997,8.10489 -0.67337,1.94412 -1.3567,3.25576 -2.04997,3.93495 -0.21005,0.19747 -0.39005,0.33247 -0.54,0.405 -0.15004,0.0725 -0.33004,0.0975 -0.53999,0.075 -0.34004,0.002 -0.66004,-0.0617 -0.95999,-0.19 -0.30004,-0.12836 -0.58004,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14004,-0.11753 -0.17999,-0.165 -0.0401,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61328,-0.14503 1.1166,-0.38502 1.50998,-0.71999 0.39328,-0.33503 0.59661,-0.85502 0.60999,-1.55998 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.ContourIntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.ContourIntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .40004502251 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.ContourIntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.ContourIntegralSymbol.prototype.constructor = eqEd.ContourIntegralSymbol;
    eqEd.ContourIntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol contourIntegralSymbol" style="width: 35.559544; height: 88.888855;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 35.559544 88.888855" preserveAspectRatio="none"><g transform="translate(-276.48568,-397.95288)"><g><path d="m 280.96562,482.0018 c -0.0167,-0.67085 -0.23334,-1.20918 -0.64999,-1.61498 -0.41667,-0.40586 -0.93333,-0.61419 -1.54998,-0.62499 -0.7425,0.0116 -1.30749,0.2383 -1.69498,0.67999 -0.3875,0.44163 -0.5825,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52665,2.3841 1.32998,3.26496 0.80332,0.88078 1.82664,1.33911 3.06996,1.37498 0.94665,-0.025 1.7933,-0.28503 2.53997,-0.77999 0.74664,-0.49503 1.3533,-1.07502 1.81997,-1.73998 1.35997,-1.79334 2.63996,-4.68663 3.83996,-8.67989 0.34565,-1.19753 0.8054,-2.93134 1.37924,-5.20141 0.5738,-2.27011 1.18762,-4.77131 1.84145,-7.50361 0.6538,-2.73232 1.27355,-5.39055 1.85924,-7.97471 l 0.35999,-1.75998 0.4,0 c 1.83912,-0.18 3.48076,-0.69999 4.92494,-1.55998 1.44412,-0.85999 2.57577,-1.93997 3.39495,-3.23996 0.58413,-0.81998 1.03579,-1.69997 1.35498,-2.63996 0.31914,-0.93998 0.4808,-2.05997 0.485,-3.35996 -8.6e-4,-0.28499 -0.009,-0.55498 -0.025,-0.80999 -0.0159,-0.25499 -0.0342,-0.46498 -0.055,-0.62999 -0.31669,-1.90996 -0.98335,-3.55994 -1.99997,-4.94994 -1.01669,-1.38996 -2.28333,-2.45995 -3.79996,-3.20996 -0.14419,-0.0816 -0.26585,-0.14831 -0.36499,-0.19999 -0.0992,-0.0516 -0.15086,-0.0783 -0.155,-0.08 l 0.79999,-4.59994 c 0.53664,-3.21243 0.9633,-5.6874 1.27998,-7.42491 0.31664,-1.73744 0.6633,-3.50242 1.03999,-5.29493 0.58663,-2.96575 1.10329,-5.34406 1.54998,-7.13491 0.44663,-1.79076 0.90329,-3.31907 1.36998,-4.58494 0.4233,-1.1666 0.85663,-2.09325 1.29999,-2.77996 0.44329,-0.68661 0.87662,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16663,-0.0466 0.28,-0.04 0.20746,0.002 0.43246,0.0384 0.67499,0.11 0.24246,0.0717 0.45746,0.16839 0.64499,0.29 0.13913,0.0984 0.30079,0.23172 0.48499,0.39999 0.18413,0.16839 0.2758,0.26172 0.275,0.28 -0.61336,0.14505 -1.11669,0.38505 -1.50998,0.71999 -0.39336,0.33505 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23329,1.2092 0.64999,1.61498 0.41663,0.40587 0.93329,0.61421 1.54998,0.62499 0.75995,-0.0108 1.32994,-0.23912 1.70998,-0.68499 0.37995,-0.44578 0.56995,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.5317,-2.37575 -1.32998,-3.24495 -0.79836,-0.86911 -1.90168,-1.32077 -3.30996,-1.35499 -0.1667,-0.007 -0.31336,0.007 -0.44,0.04 -0.77752,0.15172 -1.46251,0.44838 -2.05497,0.88999 -0.59252,0.44172 -1.10751,0.95837 -1.54498,1.54998 -0.69752,0.89587 -1.36251,2.05419 -1.99497,3.47496 -0.63252,1.42086 -1.24751,3.12917 -1.84498,5.12493 -0.34619,1.1346 -0.8094,2.84321 -1.38961,5.12586 -0.58026,2.28272 -1.2005,4.81207 -1.86072,7.58805 -0.66026,2.77604 -1.28346,5.47131 -1.8696,8.08582 l -0.36,1.75998 -0.39999,0 c -1.83666,0.18085 -3.47331,0.69918 -4.90994,1.55498 -1.43666,0.85584 -2.57331,1.92416 -3.40996,3.20496 -0.58417,0.85667 -1.03583,1.75332 -1.35498,2.68996 -0.31917,0.93667 -0.48084,2.05332 -0.48499,3.34996 0.004,1.29999 0.16582,2.41998 0.48499,3.35996 0.31915,0.93999 0.77081,1.81998 1.35498,2.63996 0.56498,0.87416 1.23497,1.62582 2.00998,2.25497 0.77497,0.62916 1.62496,1.17082 2.54996,1.62498 -0.35531,2.22071 -0.76025,4.6192 -1.21479,7.19547 -0.45458,2.57625 -0.90692,5.04585 -1.35702,7.40879 -0.45013,2.36292 -0.84618,4.33474 -1.18814,5.91548 -0.73333,3.4591 -1.43666,6.16073 -2.10997,8.10489 -0.67333,1.94412 -1.35666,3.25576 -2.04997,3.93495 -0.21001,0.19747 -0.39001,0.33247 -0.54,0.405 -0.15,0.0725 -0.33,0.0975 -0.53999,0.075 -0.34,0.002 -0.66,-0.0617 -0.95999,-0.19 -0.3,-0.12836 -0.58,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14,-0.11753 -0.17999,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11664,-0.38502 1.50998,-0.71999 0.39332,-0.33503 0.59665,-0.85502 0.60999,-1.55998 z m 10.55986,-38.5595 c -0.17918,0.97166 -0.40084,2.14831 -0.66499,3.52995 -0.26418,1.38165 -0.45584,2.41831 -0.57499,3.10996 -0.02,0.16334 -0.04,0.29667 -0.06,0.4 -0.02,0.10333 -0.04,0.15666 -0.06,0.15999 l -0.87999,-0.51999 c -0.98833,-0.64749 -1.82165,-1.44248 -2.49997,-2.38497 -0.67833,-0.94248 -1.15166,-1.98747 -1.41998,-3.13496 -0.0975,-0.36665 -0.16251,-0.71331 -0.19499,-1.03998 -0.0325,-0.32666 -0.0475,-0.71332 -0.045,-1.15999 -0.003,-0.44665 0.0125,-0.83331 0.045,-1.15998 0.0325,-0.32665 0.0975,-0.67332 0.19499,-1.03999 0.32999,-1.3333 0.91998,-2.52662 1.76998,-3.57996 0.84998,-1.0533 1.89996,-1.88662 3.14996,-2.49996 0.50081,-0.24665 1.04914,-0.45331 1.64498,-0.62 0.59581,-0.16664 1.11413,-0.25331 1.55498,-0.25999 l 0.2,0 c -0.0645,0.21927 -0.22446,0.94075 -0.48,2.16442 -0.25557,1.2237 -0.54001,2.59405 -0.85332,4.11105 -0.31335,1.51703 -0.5889,2.82516 -0.82666,3.9244 z m 11.95985,-1.03999 c -8.6e-4,0.26251 -0.009,0.5075 -0.025,0.73499 -0.0159,0.22751 -0.0342,0.4225 -0.055,0.58499 -0.36586,1.96165 -1.16418,3.60829 -2.39497,4.93994 -1.23084,1.33165 -2.73915,2.21831 -4.52494,2.65997 -0.25502,0.0625 -0.52502,0.1175 -0.80999,0.16499 -0.28502,0.0475 -0.49502,0.0725 -0.62999,0.075 l -0.16,0 c 0.0644,-0.21901 0.22442,-0.94097 0.47999,-2.1659 0.25553,-1.22491 0.53998,-2.59872 0.85333,-4.12142 0.3133,-1.52269 0.58886,-2.8402 0.82665,-3.95255 0.19164,-1.0983 0.41831,-2.36162 0.67999,-3.78995 0.26164,-1.4283 0.48831,-2.55161 0.68,-3.36995 1.41912,0.76834 2.61077,1.82166 3.57495,3.15996 0.96412,1.33833 1.46578,3.03164 1.50498,5.07993 z" /></g></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.ContourDoubleIntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.ContourDoubleIntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .63771381028 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.ContourDoubleIntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.ContourDoubleIntegralSymbol.prototype.constructor = eqEd.ContourDoubleIntegralSymbol;
    eqEd.ContourDoubleIntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol contourDoubleIntegralSymbol" style="width: 56.679272; height: 88.878853;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 56.679272 88.878853" preserveAspectRatio="none"><g transform="translate(-195.13912,-222.1657)"><g><path d="m 199.61906,306.20462 c -0.0167,-0.67085 -0.23334,-1.20918 -0.64999,-1.61498 -0.41667,-0.40586 -0.93333,-0.61419 -1.54998,-0.62499 -0.74249,0.0116 -1.30749,0.2383 -1.69498,0.67999 -0.3875,0.44163 -0.58249,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52666,2.3841 1.32998,3.26496 0.80332,0.88078 1.82664,1.33911 3.06996,1.37498 0.94665,-0.025 1.7933,-0.28503 2.53997,-0.77999 0.74665,-0.49503 1.3533,-1.07502 1.81998,-1.73998 0.57998,-0.75835 1.13997,-1.70167 1.67998,-2.82996 0.53998,-1.12835 1.05997,-2.45167 1.55998,-3.96995 0.31248,-0.95335 0.63747,-2.03667 0.97498,-3.24996 0.33748,-1.21334 0.73248,-2.71665 1.18499,-4.50994 1.21577,-4.8797 2.32192,-9.52902 3.31847,-13.94797 0.99651,-4.41895 1.9486,-8.92902 2.85626,-13.5302 0.90762,-4.60116 1.836,-9.61491 2.78515,-15.04128 0.46414,-2.82161 0.8558,-5.08824 1.17499,-6.79992 0.31913,-1.71161 0.66079,-3.45825 1.02498,-5.23993 0.58663,-2.96576 1.10329,-5.34406 1.54998,-7.13491 0.44664,-1.79076 0.9033,-3.31907 1.36999,-4.58494 0.42329,-1.1666 0.85662,-2.09325 1.29998,-2.77996 0.44329,-0.68661 0.87662,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16663,-0.0466 0.28,-0.04 0.20746,0.002 0.43246,0.0384 0.67499,0.11 0.24246,0.0717 0.45746,0.16839 0.64499,0.29 0.13913,0.0984 0.3008,0.23172 0.485,0.39999 0.18412,0.16839 0.27579,0.26172 0.27499,0.28 -0.61336,0.14505 -1.11668,0.38505 -1.50998,0.71999 -0.39336,0.33505 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.2333,1.2092 0.64999,1.61498 0.41663,0.40587 0.93329,0.61421 1.54998,0.62499 0.75996,-0.0108 1.32995,-0.23912 1.70998,-0.68499 0.37996,-0.44578 0.56995,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.5317,-2.37575 -1.32998,-3.24495 -0.79836,-0.86911 -1.90168,-1.32077 -3.30996,-1.35499 -0.48169,0.008 -0.93835,0.10256 -1.36998,0.285 -0.43169,0.18255 -0.82836,0.40755 -1.18999,0.67499 -1.70834,1.37503 -3.09165,3.575 -4.14994,6.59992 -1.05835,3.025 -1.98167,6.18496 -2.76997,9.47987 -1.22914,4.92837 -2.34419,9.6004 -3.34514,14.01612 -1.00099,4.41576 -1.95308,8.92484 -2.85626,13.52723 -0.90321,4.60242 -1.82271,9.64778 -2.75848,15.1361 -0.56834,3.30495 -1.07167,6.13491 -1.50998,8.48989 -0.43834,2.35496 -0.88167,4.56493 -1.32998,6.62992 -0.73334,3.4591 -1.43666,6.16073 -2.10998,8.10489 -0.67333,1.94412 -1.35665,3.25576 -2.04997,3.93495 -0.21001,0.19747 -0.39,0.33247 -0.53999,0.405 -0.15001,0.0725 -0.33001,0.0975 -0.54,0.075 -0.34,0.002 -0.65999,-0.0617 -0.95998,-0.19 -0.30001,-0.12836 -0.58,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14001,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11665,-0.38502 1.50998,-0.71999 0.39332,-0.33503 0.59665,-0.85502 0.60999,-1.55998 z m 21.11973,0 c -0.0167,-0.67085 -0.23336,-1.20918 -0.64999,-1.61498 -0.41669,-0.40586 -0.93335,-0.61419 -1.54998,-0.62499 -0.74252,0.0116 -1.30751,0.2383 -1.69498,0.67999 -0.38752,0.44163 -0.58252,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52663,2.3841 1.32998,3.26496 0.8033,0.88078 1.82662,1.33911 3.06996,1.37498 0.94663,-0.025 1.79328,-0.28503 2.53997,-0.77999 0.74662,-0.49503 1.35328,-1.07502 1.81997,-1.73998 0.57996,-0.75835 1.13996,-1.70167 1.67998,-2.82996 0.53996,-1.12835 1.05996,-2.45167 1.55998,-3.96995 0.31246,-0.95335 0.63746,-2.03667 0.97499,-3.24996 0.33746,-1.21334 0.73245,-2.71665 1.18499,-4.50994 1.21574,-4.8797 2.3219,-9.52902 3.31847,-13.94797 0.99649,-4.41895 1.94857,-8.92902 2.85626,-13.5302 0.9076,-4.60116 1.83598,-9.61491 2.78515,-15.04128 0.46411,-2.82161 0.85577,-5.08824 1.17498,-6.79992 0.31912,-1.71161 0.66078,-3.45825 1.02499,-5.23993 0.58661,-2.96576 1.10327,-5.34406 1.54998,-7.13491 0.44661,-1.79076 0.90327,-3.31907 1.36998,-4.58494 0.42328,-1.1666 0.85661,-2.09325 1.29999,-2.77996 0.44327,-0.68661 0.8766,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16661,-0.0466 0.28,-0.04 0.20744,0.002 0.43244,0.0384 0.67499,0.11 0.24244,0.0717 0.45744,0.16839 0.64499,0.29 0.13911,0.0984 0.30077,0.23172 0.48499,0.39999 0.18411,0.16839 0.27578,0.26172 0.275,0.28 -0.61338,0.14505 -1.11671,0.38505 -1.50998,0.71999 -0.39338,0.33505 -0.59671,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23327,1.2092 0.64999,1.61498 0.41661,0.40587 0.93326,0.61421 1.54998,0.62499 0.75993,-0.0108 1.32992,-0.23912 1.70998,-0.68499 0.37993,-0.44578 0.56993,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53172,-2.37575 -1.32998,-3.24495 -0.79838,-0.86911 -1.9017,-1.32077 -3.30996,-1.35499 -0.48171,0.008 -0.93838,0.10256 -1.36998,0.285 -0.43172,0.18255 -0.82838,0.40755 -1.18999,0.67499 -1.70836,1.37503 -3.09167,3.575 -4.14994,6.59992 -1.05837,3.025 -1.98169,6.18496 -2.76997,9.47987 -1.22916,4.92837 -2.34421,9.6004 -3.34514,14.01612 -1.00102,4.41576 -1.9531,8.92484 -2.85626,13.52723 -0.90324,4.60242 -1.82273,9.64778 -2.75848,15.1361 -0.56836,3.30495 -1.07169,6.13491 -1.50998,8.48989 -0.43836,2.35496 -0.88169,4.56493 -1.32999,6.62992 -0.73335,3.4591 -1.43668,6.16073 -2.10997,8.10489 -0.67335,1.94412 -1.35668,3.25576 -2.04997,3.93495 -0.21003,0.19747 -0.39003,0.33247 -0.54,0.405 -0.15002,0.0725 -0.33002,0.0975 -0.53999,0.075 -0.34002,0.002 -0.66002,-0.0617 -0.95999,-0.19 -0.30002,-0.12836 -0.58002,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14002,-0.11753 -0.17999,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.6133,-0.14503 1.11662,-0.38502 1.50998,-0.71999 0.3933,-0.33503 0.59663,-0.85502 0.60999,-1.55998 z" /></g><rect style="fill:none;stroke:#000000;stroke-width:2.20000005;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" width="45.400002" height="25.085001" x="200.73912" y="254.06256" ry="13.392859" rx="32.856998" /></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.ContourTripleIntegralSymbol = function(symbolSizeConfig) {
    eqEd.BigOperatorSymbol.call(this, symbolSizeConfig);
    this.className = "eqEd.ContourTripleIntegralSymbol";
    this.domObj = this.buildDomObj();
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "height") {
            this.properties.splice(i, 1);
        }
    }
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return 2.25 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return .86633658442 * this.height;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.ContourTripleIntegralSymbol.prototype = Object.create(eqEd.BigOperatorSymbol.prototype);
    eqEd.ContourTripleIntegralSymbol.prototype.constructor = eqEd.ContourTripleIntegralSymbol;
    eqEd.ContourTripleIntegralSymbol.prototype.buildDomObj = function() {
        var htmlRep = '<div class="bigOperatorSymbol contourTripleIntegralSymbol" style="width: 76.999008; height: 88.87886;"><svg style="position: absolute; width: 100%; height: 100%;" viewBox="0 0 76.999008 88.87886" preserveAspectRatio="none"><g transform="translate(-304.7997,-370.40157)"><g><path d="m 309.27965,454.44049 c -0.0167,-0.67085 -0.23334,-1.20918 -0.65,-1.61498 -0.41666,-0.40586 -0.93332,-0.61419 -1.54998,-0.62499 -0.74249,0.0116 -1.30748,0.2383 -1.69498,0.67999 -0.38749,0.44163 -0.58249,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52666,2.3841 1.32999,3.26496 0.80331,0.88078 1.82663,1.33911 3.06996,1.37498 0.94664,-0.025 1.7933,-0.28503 2.53996,-0.77999 0.74665,-0.49503 1.35331,-1.07502 1.81998,-1.73998 0.57998,-0.75835 1.13997,-1.70167 1.67998,-2.82996 0.53998,-1.12835 1.05997,-2.45166 1.55998,-3.96995 0.31248,-0.95335 0.63748,-2.03667 0.97499,-3.24996 0.33748,-1.21334 0.73247,-2.71665 1.18498,-4.50994 1.21577,-4.8797 2.32193,-9.52902 3.31848,-13.94797 0.9965,-4.41895 1.94859,-8.92902 2.85625,-13.5302 0.90762,-4.60116 1.83601,-9.61491 2.78516,-15.04128 0.46413,-2.82161 0.85579,-5.08824 1.17498,-6.79992 0.31914,-1.71161 0.6608,-3.45825 1.02499,-5.23993 0.58663,-2.96575 1.10329,-5.34406 1.54998,-7.13491 0.44663,-1.79076 0.90329,-3.31907 1.36998,-4.58494 0.4233,-1.1666 0.85662,-2.09325 1.29998,-2.77996 0.4433,-0.68661 0.87663,-1.09327 1.29999,-1.21999 0.0733,-0.0333 0.16663,-0.0466 0.27999,-0.04 0.20747,0.002 0.43246,0.0384 0.67499,0.11 0.24247,0.0717 0.45746,0.16839 0.645,0.29 0.13913,0.0984 0.30079,0.23172 0.48499,0.39999 0.18413,0.16839 0.27579,0.26172 0.275,0.28 -0.61336,0.14505 -1.11669,0.38505 -1.50999,0.71999 -0.39336,0.33505 -0.59669,0.85504 -0.60999,1.55998 0.0166,0.67087 0.2333,1.2092 0.64999,1.61498 0.41663,0.40587 0.93329,0.61421 1.54998,0.62499 0.75996,-0.0108 1.32995,-0.23911 1.70998,-0.68499 0.37996,-0.44578 0.56996,-1.0441 0.57,-1.79498 -0.0884,-1.2941 -0.5317,-2.37575 -1.32999,-3.24495 -0.79836,-0.86911 -1.90167,-1.32077 -3.30995,-1.35499 -0.4817,0.008 -0.93836,0.10256 -1.36999,0.285 -0.43169,0.18255 -0.82835,0.40755 -1.18998,0.67499 -1.70834,1.37504 -3.09166,3.575 -4.14995,6.59992 -1.05834,3.025 -1.98166,6.18496 -2.76996,9.47987 -1.22915,4.92837 -2.34419,9.6004 -3.34515,14.01612 -1.00099,4.41576 -1.95308,8.92484 -2.85626,13.52723 -0.90321,4.60242 -1.8227,9.64778 -2.75848,15.1361 -0.56834,3.30495 -1.07166,6.13491 -1.50998,8.4899 -0.43834,2.35495 -0.88167,4.56492 -1.32998,6.62991 -0.73334,3.4591 -1.43666,6.16073 -2.10997,8.10489 -0.67334,1.94412 -1.35666,3.25576 -2.04998,3.93495 -0.21,0.19747 -0.39,0.33247 -0.53999,0.405 -0.15001,0.0725 -0.33,0.0975 -0.53999,0.075 -0.34001,0.002 -0.66,-0.0617 -0.95999,-0.19 -0.3,-0.12836 -0.58,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61332,-0.14503 1.11665,-0.38502 1.50998,-0.71999 0.39333,-0.33503 0.59666,-0.85502 0.61,-1.55998 z m 21.11972,0 c -0.0167,-0.67085 -0.23336,-1.20918 -0.64999,-1.61498 -0.41669,-0.40586 -0.93335,-0.61419 -1.54998,-0.62499 -0.74251,0.0116 -1.30751,0.2383 -1.69498,0.67999 -0.38752,0.44163 -0.58251,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52664,2.3841 1.32998,3.26496 0.8033,0.88078 1.82662,1.33911 3.06996,1.37498 0.94663,-0.025 1.79329,-0.28503 2.53997,-0.77999 0.74663,-0.49503 1.35329,-1.07502 1.81998,-1.73998 0.57996,-0.75835 1.13995,-1.70167 1.67998,-2.82996 0.53996,-1.12835 1.05995,-2.45166 1.55998,-3.96995 0.31246,-0.95335 0.63745,-2.03667 0.97498,-3.24996 0.33746,-1.21334 0.73246,-2.71665 1.18499,-4.50994 1.21575,-4.8797 2.3219,-9.52902 3.31847,-13.94797 0.99649,-4.41895 1.94858,-8.92902 2.85626,-13.5302 0.9076,-4.60116 1.83598,-9.61491 2.78515,-15.04128 0.46412,-2.82161 0.85578,-5.08824 1.17499,-6.79992 0.31911,-1.71161 0.66077,-3.45825 1.02499,-5.23993 0.58661,-2.96575 1.10326,-5.34406 1.54998,-7.13491 0.44661,-1.79076 0.90327,-3.31907 1.36998,-4.58494 0.42327,-1.1666 0.8566,-2.09325 1.29998,-2.77996 0.44327,-0.68661 0.8766,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16661,-0.0466 0.28,-0.04 0.20744,0.002 0.43244,0.0384 0.67499,0.11 0.24244,0.0717 0.45744,0.16839 0.64499,0.29 0.13911,0.0984 0.30078,0.23172 0.485,0.39999 0.1841,0.16839 0.27577,0.26172 0.27499,0.28 -0.61338,0.14505 -1.1167,0.38505 -1.50998,0.71999 -0.39338,0.33505 -0.59671,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23328,1.2092 0.64999,1.61498 0.41661,0.40587 0.93327,0.61421 1.54998,0.62499 0.75994,-0.0108 1.32993,-0.23911 1.70998,-0.68499 0.37994,-0.44578 0.56993,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53172,-2.37575 -1.32998,-3.24495 -0.79838,-0.86911 -1.9017,-1.32077 -3.30996,-1.35499 -0.48171,0.008 -0.93837,0.10256 -1.36998,0.285 -0.43171,0.18255 -0.82837,0.40755 -1.18998,0.67499 -1.70837,1.37504 -3.09168,3.575 -4.14995,6.59992 -1.05837,3.025 -1.98169,6.18496 -2.76996,9.47987 -1.22917,4.92837 -2.34422,9.6004 -3.34515,14.01612 -1.00101,4.41576 -1.9531,8.92484 -2.85626,13.52723 -0.90323,4.60242 -1.82273,9.64778 -2.75848,15.1361 -0.56836,3.30495 -1.07169,6.13491 -1.50998,8.4899 -0.43836,2.35495 -0.88169,4.56492 -1.32998,6.62991 -0.73336,3.4591 -1.43668,6.16073 -2.10998,8.10489 -0.67335,1.94412 -1.35667,3.25576 -2.04997,3.93495 -0.21003,0.19747 -0.39002,0.33247 -0.53999,0.405 -0.15003,0.0725 -0.33003,0.0975 -0.54,0.075 -0.34002,0.002 -0.66001,-0.0617 -0.95998,-0.19 -0.30003,-0.12836 -0.58002,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14003,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.6133,-0.14503 1.11663,-0.38502 1.50998,-0.71999 0.3933,-0.33503 0.59663,-0.85502 0.60999,-1.55998 z m 20.31974,0 c -0.0167,-0.67085 -0.23338,-1.20918 -0.64999,-1.61498 -0.41671,-0.40586 -0.93337,-0.61419 -1.54998,-0.62499 -0.74254,0.0116 -1.30753,0.2383 -1.69498,0.67999 -0.38754,0.44163 -0.58253,1.02829 -0.58499,1.75998 0.0833,1.29578 0.52662,2.3841 1.32998,3.26496 0.80328,0.88078 1.8266,1.33911 3.06996,1.37498 0.94661,-0.025 1.79326,-0.28503 2.53997,-0.77999 0.7466,-0.49503 1.35326,-1.07502 1.81998,-1.73998 0.57994,-0.75835 1.13993,-1.70167 1.67998,-2.82996 0.53993,-1.12835 1.05993,-2.45166 1.55998,-3.96995 0.31244,-0.95335 0.63743,-2.03667 0.97498,-3.24996 0.33744,-1.21334 0.73244,-2.71665 1.18499,-4.50994 1.21573,-4.8797 2.32188,-9.52902 3.31847,-13.94797 0.99647,-4.41895 1.94856,-8.92902 2.85626,-13.5302 0.90758,-4.60116 1.83596,-9.61491 2.78515,-15.04128 0.4641,-2.82161 0.85576,-5.08824 1.17499,-6.79992 0.31909,-1.71161 0.66075,-3.45825 1.02498,-5.23993 0.58659,-2.96575 1.10325,-5.34406 1.54998,-7.13491 0.44659,-1.79076 0.90325,-3.31907 1.36999,-4.58494 0.42325,-1.1666 0.85658,-2.09325 1.29998,-2.77996 0.44325,-0.68661 0.87658,-1.09327 1.29998,-1.21999 0.0733,-0.0333 0.16659,-0.0466 0.28,-0.04 0.20742,0.002 0.43242,0.0384 0.67499,0.11 0.24242,0.0717 0.45742,0.16839 0.64499,0.29 0.13909,0.0984 0.30075,0.23172 0.485,0.39999 0.18408,0.16839 0.27575,0.26172 0.27499,0.28 -0.6134,0.14505 -1.11673,0.38505 -1.50998,0.71999 -0.3934,0.33505 -0.59673,0.85504 -0.60999,1.55998 0.0166,0.67087 0.23325,1.2092 0.64999,1.61498 0.41659,0.40587 0.93325,0.61421 1.54998,0.62499 0.75991,-0.0108 1.32991,-0.23911 1.70998,-0.68499 0.37992,-0.44578 0.56991,-1.0441 0.56999,-1.79498 -0.0884,-1.2941 -0.53174,-2.37575 -1.32998,-3.24495 -0.7984,-0.86911 -1.90172,-1.32077 -3.30996,-1.35499 -0.48173,0.008 -0.93839,0.10256 -1.36998,0.285 -0.43174,0.18255 -0.8284,0.40755 -1.18999,0.67499 -1.70838,1.37504 -3.09169,3.575 -4.14994,6.59992 -1.05839,3.025 -1.98171,6.18496 -2.76997,9.47987 -1.22918,4.92837 -2.34423,9.6004 -3.34514,14.01612 -1.00103,4.41576 -1.95312,8.92484 -2.85626,13.52723 -0.90326,4.60242 -1.82275,9.64778 -2.75848,15.1361 -0.56838,3.30495 -1.07171,6.13491 -1.50998,8.4899 -0.43838,2.35495 -0.88171,4.56492 -1.32998,6.62991 -0.73338,3.4591 -1.4367,6.16073 -2.10998,8.10489 -0.67337,1.94412 -1.3567,3.25576 -2.04997,3.93495 -0.21005,0.19747 -0.39005,0.33247 -0.53999,0.405 -0.15005,0.0725 -0.33005,0.0975 -0.54,0.075 -0.34004,0.002 -0.66004,-0.0617 -0.95998,-0.19 -0.30005,-0.12836 -0.58004,-0.33169 -0.83999,-0.60999 -0.08,-0.0625 -0.14005,-0.11753 -0.18,-0.165 -0.04,-0.0475 -0.06,-0.0725 -0.06,-0.075 0.61328,-0.14503 1.1166,-0.38502 1.50998,-0.71999 0.39328,-0.33503 0.59661,-0.85502 0.60999,-1.55998 z" /></g><rect style="fill:none;stroke:#000000;stroke-width:2.20000005;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" width="69.102997" height="25.085001" x="308.64969" y="402.29843" rx="32.856998" ry="13.393" /></g></svg></div>';
        return new eqEd.EquationDom(this, htmlRep);
    };
})();

eqEd.IntegralUpperLimitContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.IntegralUpperLimitContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.isInline) {
                leftVal = this.parent.symbol.width + this.parent.inlineLimitGap * fontHeight;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = .5 * (maxWidth - this.width);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.isInline) {
                var leftPartTopAlign = 0;
                if (this.height > this.parent.symbol.height * this.parent.inlineUpperLimitOverlap) {
                    leftPartTopAlign = (.5 - this.parent.inlineUpperLimitOverlap) * this.parent.symbol.height + this.height;
                } else {
                    leftPartTopAlign = .5 * this.parent.symbol.height;
                }
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight - leftPartTopAlign;
            } else {
                var leftPartTopAlign = this.height + .5 * this.parent.symbol.height + this.parent.upperLimitGap * fontHeight;
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight - leftPartTopAlign;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.IntegralUpperLimitContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.IntegralUpperLimitContainer.prototype.constructor = eqEd.IntegralUpperLimitContainer;
    eqEd.IntegralUpperLimitContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer integralUpperLimitContainer"></div>');
    };
})();

eqEd.IntegralLowerLimitContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.IntegralLowerLimitContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.inlineLeftOverlap = .55;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            if (this.parent.isInline) {
                leftVal = this.parent.symbol.width + (this.parent.inlineLimitGap - this.inlineLeftOverlap) * fontHeight;
            } else {
                var maxWidthList = [];
                if (this.parent.hasUpperLimit) {
                    maxWidthList.push(this.parent.upperLimitContainer.width);
                }
                if (this.parent.hasLowerLimit) {
                    maxWidthList.push(this.parent.lowerLimitContainer.width);
                }
                maxWidthList.push(this.parent.symbol.width);
                var maxWidth = maxWidthList.max();
                leftVal = .5 * (maxWidth - this.width);
            }
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.isInline) {
                var additionalTopAlign = 0;
                if (this.height > this.parent.symbol.height * this.parent.inlineLowerLimitOverlap) {
                    additionalTopAlign = (.5 - this.parent.inlineLowerLimitOverlap) * this.parent.symbol.height;
                } else {
                    additionalTopAlign = .5 * this.parent.symbol.height - this.height;
                }
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight + additionalTopAlign;
            } else {
                topVal = this.parent.topAlign - this.parent.padTop * fontHeight + this.parent.symbol.height * .5 + this.parent.lowerLimitGap * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.IntegralLowerLimitContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.IntegralLowerLimitContainer.prototype.constructor = eqEd.IntegralLowerLimitContainer;
    eqEd.IntegralLowerLimitContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer integralLowerLimitContainer"></div>');
    };
})();

eqEd.Word = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.Word";
    this.characters = characters.split("");
    this.fontStyle = fontStyle;
    this.domObj = this.buildDomObj();
    if (IEVersion >= 9) {
        if (this.fontStyle === "MathJax_MathItalic") {
            this.adjustTop = .345;
        } else {
            this.adjustTop = .3;
        }
    } else {
        if (this.fontStyle === "MathJax_MathItalic") {
            this.adjustTop = .025;
        }
    }
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            for (var i = 0; i < this.characters.length; i++) {
                widthVal += this.symbolSizeConfig.width[this.characters[i]][this.fontStyle][this.parent.parent.fontSize];
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.getFontHeight();
            return 1 * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.Word.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.Word.prototype.constructor = eqEd.Word;
    eqEd.Word.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="symbol ' + this.fontStyle + '">' + this.characters.join("") + "</div>");
    };
})();

eqEd.FunctionWord = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.Word.call(this, characters, fontStyle, symbolSizeConfig);
    this.className = "eqEd.FunctionWord";
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.FunctionWord.prototype = Object.create(eqEd.Word.prototype);
    eqEd.FunctionWord.prototype.constructor = eqEd.FunctionWord;
})();

eqEd.FunctionWrapper = function(functionCharacters, fontStyle, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.FunctionWrapper";
    this.word = new eqEd.FunctionWord(functionCharacters, fontStyle, symbolSizeConfig);
    this.word.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.word.domObj);
    this.childNoncontainers = [ this.word ];
    this.padLeft = .1;
    var padRight = 0;
    this.properties.push(new Property(this, "padRight", padRight, {
        get: function() {
            return padRight;
        },
        set: function(value) {
            padRight = value;
        },
        compute: function() {
            var padRightVal = .175;
            if (this.index !== this.parent.wrappers.length - 1) {
                if (this.parent.wrappers[this.index + 1] instanceof eqEd.SuperscriptWrapper || this.parent.wrappers[this.index + 1] instanceof eqEd.SubscriptWrapper) {
                    padRightVal = 0;
                } else if (this.parent.wrappers[this.index + 1] instanceof eqEd.BracketWrapper || this.parent.wrappers[this.index + 1] instanceof eqEd.BracketPairWrapper) {
                    padRightVal = .05;
                }
            }
            return padRightVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.word.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.word.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.word.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.FunctionWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.FunctionWrapper.prototype.constructor = eqEd.FunctionWrapper;
    eqEd.FunctionWrapper.prototype.clone = function() {
        return new this.constructor(this.word.characters.join(""), this.word.fontStyle, this.symbolSizeConfig);
    };
    eqEd.FunctionWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper symbolWrapper"></div>');
    };
    eqEd.FunctionWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.word.characters.join(""),
            operands: null
        };
        return jsonObj;
    };
    eqEd.FunctionWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var functionWrapper = new eqEd.FunctionWrapper(jsonObj.value, "MathJax_Main", symbolSizeConfig);
        return functionWrapper;
    };
})();

eqEd.FunctionHigherWrapper = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.FunctionWrapper.call(this, characters, fontStyle, symbolSizeConfig);
    this.className = "eqEd.FunctionHigherWrapper";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "topAlign" || this.properties[i].propName === "bottomAlign" || this.properties[i].propName === "width") {
            this.properties.splice(i, 1);
        }
    }
    this.belowFunctionGap = 1.075;
    this.functionHigherWord = new eqEd.FunctionHigherWord(characters, fontStyle, symbolSizeConfig);
    this.functionHigherContainer = new eqEd.FunctionHigherContainer(symbolSizeConfig);
    this.functionHigherWord.parent = this;
    this.functionHigherContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.functionHigherWord.domObj);
    this.domObj.append(this.functionHigherContainer.domObj);
    this.childNoncontainers = [ this.functionHigherWord ];
    this.childContainers = [ this.functionHigherContainer ];
    this.padLeft = .05;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            var topWidth = this.functionHigherWord.width;
            widthVal = topWidth > this.functionHigherContainer.width ? topWidth : this.functionHigherContainer.width;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.functionHigherWord.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return 0;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.FunctionHigherWrapper.prototype = Object.create(eqEd.FunctionWrapper.prototype);
    eqEd.FunctionHigherWrapper.prototype.constructor = eqEd.FunctionHigherWrapper;
    eqEd.FunctionHigherWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper functionHigherWrapper"></div>');
    };
    eqEd.FunctionHigherWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.functionHigherWord = new eqEd.functionHigherWord(characters, fontStyle, symbolSizeConfig);
        copy.functionHigherContainer = this.functionHigherContainer.clone();
        copy.functionHigherWord.parent = copy;
        copy.functionHigherContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.functionHigherWord.domObj);
        copy.domObj.append(copy.functionHigherContainer.domObj);
        copy.childNoncontainers = [ copy.functionHigherWord ];
        copy.childContainers = [ copy.functionHigherContainer ];
        return copy;
    };
    eqEd.FunctionHigherWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.functionHigherWord.characters.join(""),
            operands: {
                higher: this.functionHigherContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.FunctionHigherWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var functionHigherWrapper = new eqEd.FunctionHigherWrapper(jsonObj.value, "MathJax_Main", symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.higher.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.higher[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.higher[i], symbolSizeConfig);
            functionHigherWrapper.functionHigherContainer.addWrappers([ i, innerWrapper ]);
        }
        return functionHigherWrapper;
    };
})();

eqEd.FunctionHigherWord = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.Word.call(this, characters, fontStyle, symbolSizeConfig);
    this.className = "eqEd.FunctionHigherWord";
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.FunctionHigherWord.prototype = Object.create(eqEd.Word.prototype);
    eqEd.FunctionHigherWord.prototype.constructor = eqEd.FunctionHigherWord;
})();

eqEd.FunctionHigherContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.FunctionHigherContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padBottom = .025;
    this.padTop = 0;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return -.15 * (this.parent.functionHigherWord.height + this.parent.belowFunctionGap * fontHeight);
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.FunctionHigherContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.FunctionHigherContainer.prototype.constructor = eqEd.FunctionHigherContainer;
    eqEd.FunctionHigherContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer functionHigherContainer"></div>');
    };
})();

eqEd.FunctionLowerWrapper = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.FunctionWrapper.call(this, characters, fontStyle, symbolSizeConfig);
    this.className = "eqEd.FunctionLowerWrapper";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "topAlign" || this.properties[i].propName === "bottomAlign" || this.properties[i].propName === "width") {
            this.properties.splice(i, 1);
        }
    }
    this.belowFunctionGap = -.075;
    this.functionWord = new eqEd.FunctionLowerWord(characters, fontStyle, symbolSizeConfig);
    this.functionLowerContainer = new eqEd.FunctionLowerContainer(symbolSizeConfig);
    this.functionWord.parent = this;
    this.functionLowerContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.functionWord.domObj);
    this.domObj.append(this.functionLowerContainer.domObj);
    this.childNoncontainers = [ this.functionWord ];
    this.childContainers = [ this.functionLowerContainer ];
    this.padLeft = 0;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            var topWidth = this.functionWord.width;
            widthVal = topWidth > this.functionLowerContainer.width ? topWidth : this.functionLowerContainer.width;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.functionWord.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            return .5 * this.functionWord.height + this.belowFunctionGap * fontHeight + this.functionLowerContainer.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.FunctionLowerWrapper.prototype = Object.create(eqEd.FunctionWrapper.prototype);
    eqEd.FunctionLowerWrapper.prototype.constructor = eqEd.FunctionLowerWrapper;
    eqEd.FunctionLowerWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper functionLowerWrapper"></div>');
    };
    eqEd.FunctionLowerWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.functionWord = new eqEd.FunctionWord(characters, fontStyle, symbolSizeConfig);
        copy.functionLowerContainer = this.functionLowerContainer.clone();
        copy.functionWord.parent = copy;
        copy.functionLowerContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.functionWord.domObj);
        copy.domObj.append(copy.functionLowerContainer.domObj);
        copy.childNoncontainers = [ copy.functionWord ];
        copy.childContainers = [ copy.functionLowerContainer ];
        return copy;
    };
    eqEd.FunctionLowerWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.functionWord.characters.join(""),
            operands: {
                lower: this.functionLowerContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.FunctionLowerWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var functionLowerWrapper = new eqEd.FunctionLowerWrapper(jsonObj.value, "MathJax_Main", symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.lower.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.lower[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.lower[i], symbolSizeConfig);
            functionLowerWrapper.functionLowerContainer.addWrappers([ i, innerWrapper ]);
        }
        return functionLowerWrapper;
    };
})();

eqEd.FunctionLowerWord = function(characters, fontStyle, symbolSizeConfig) {
    eqEd.Word.call(this, characters, fontStyle, symbolSizeConfig);
    this.className = "eqEd.FunctionLowerWord";
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.FunctionLowerWord.prototype = Object.create(eqEd.Word.prototype);
    eqEd.FunctionLowerWord.prototype.constructor = eqEd.FunctionLowerWord;
})();

eqEd.FunctionLowerContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.FunctionLowerContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            return this.parent.functionWord.height + this.parent.belowFunctionGap * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.FunctionLowerContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.FunctionLowerContainer.prototype.constructor = eqEd.FunctionLowerContainer;
    eqEd.FunctionLowerContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer functionLowerContainer"></div>');
    };
})();

eqEd.OverRightArrowWrapper = function(symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.OverRightArrowWrapper";
    this.overRightArrowBottomContainer = new eqEd.OverRightArrowBottomContainer(symbolSizeConfig);
    this.stackedFractionHorizontalBar = new eqEd.OverRightArrowHorizontalBar(symbolSizeConfig);
    this.overRightArrowBottomContainer.parent = this;
    this.stackedFractionHorizontalBar.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.stackedFractionHorizontalBar.domObj);
    this.domObj.append(this.overRightArrowBottomContainer.domObj);
    this.childNoncontainers = [ this.stackedFractionHorizontalBar ];
    this.childContainers = [ this.overRightArrowBottomContainer ];
    this.padLeft = .05;
    this.padRight = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.stackedFractionHorizontalBar.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.overRightArrowBottomContainer.height;
        },
        updateDom: function() {}
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .7 * this.overRightArrowBottomContainer.height + this.stackedFractionHorizontalBar.height;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.OverRightArrowWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.OverRightArrowWrapper.prototype.constructor = eqEd.OverRightArrowWrapper;
    eqEd.OverRightArrowWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper overRightArrowWrapper"></div>');
    };
    eqEd.OverRightArrowWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.overRightArrowBottomContainer = this.overRightArrowBottomContainer.clone();
        copy.stackedFractionHorizontalBar = this.stackedFractionHorizontalBar.clone();
        copy.overRightArrowBottomContainer.parent = copy;
        copy.stackedFractionHorizontalBar.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.overRightArrowBottomContainer.domObj);
        copy.domObj.append(copy.stackedFractionHorizontalBar.domObj);
        copy.childNoncontainers = [ copy.stackedFractionHorizontalBar ];
        copy.childContainers = [ copy.overRightArrowBottomContainer ];
        return copy;
    };
    eqEd.OverRightArrowWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                lower: this.overRightArrowBottomContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.OverRightArrowWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var overRightArrowWrapper = new eqEd.OverRightArrowWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.denominator.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.denominator[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.denominator[i], symbolSizeConfig);
            overRightArrowWrapper.overRightArrowBottomContainer.addWrappers([ i, innerWrapper ]);
        }
        return overRightArrowWrapper;
    };
})();

eqEd.OverRightArrowHorizontalBar = function(symbolSizeConfig) {
    eqEd.Equation.call(this, symbolSizeConfig);
    this.className = "eqEd.OverRightArrowHorizontalBar";
    this.domObj = this.buildDomObj();
    this.exceedsMaxNumDenomWidth = .25;
    this.barHeightRatio = .05;
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var maxNumDenomWidth = this.parent.overRightArrowBottomContainer.width;
            return maxNumDenomWidth + this.exceedsMaxNumDenomWidth * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height["fontSizeNormal"];
            return this.barHeightRatio * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return 0;
        },
        set: function(value) {
            top = 0;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.OverRightArrowHorizontalBar.prototype = Object.create(eqEd.Equation.prototype);
    eqEd.OverRightArrowHorizontalBar.prototype.constructor = eqEd.OverRightArrowHorizontalBar;
    eqEd.OverRightArrowHorizontalBar.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="overRightArrowHorizontalBar"><div class="tail"></div><div class="arrow"></div></div>');
    };
})();

eqEd.OverRightArrowBottomContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.OverRightArrowBottom";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    this.padBottom = .025;
    this.padTop = .025;
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var maxNumDenomWidth = this.width;
            return .5 * (maxNumDenomWidth - this.width) + .5 * this.parent.stackedFractionHorizontalBar.exceedsMaxNumDenomWidth * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                if (actualParentContainer.parent instanceof eqEd.StackedFractionWrapper) {
                    fontSizeVal = "fontSizeSmaller";
                } else {
                    fontSizeVal = "fontSizeNormal";
                }
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.OverRightArrowBottomContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.OverRightArrowBottomContainer.prototype.constructor = eqEd.OverRightArrowBottomContainer;
    eqEd.OverRightArrowBottomContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer overRightArrowBottomContainer"></div>');
    };
})();

eqEd.LogLowerWrapper = function(symbolSizeConfig) {
    eqEd.FunctionWrapper.call(this, "log", "MathJax_Main", symbolSizeConfig);
    this.className = "eqEd.LogLowerWrapper";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "topAlign" || this.properties[i].propName === "bottomAlign" || this.properties[i].propName === "width") {
            this.properties.splice(i, 1);
        }
    }
    this.logLowerOverlap = .75;
    this.functionWord = new eqEd.LogLowerWord(symbolSizeConfig);
    this.functionLowerContainer = new eqEd.LogLowerContainer(symbolSizeConfig);
    this.functionWord.parent = this;
    this.functionLowerContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.functionWord.domObj);
    this.domObj.append(this.functionLowerContainer.domObj);
    this.childNoncontainers = [ this.functionWord ];
    this.childContainers = [ this.functionLowerContainer ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            return this.functionWord.width + this.functionLowerContainer.width;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.functionWord.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeightNested = this.symbolSizeConfig.height[this.functionLowerContainer.fontSize];
            return this.functionWord.height - this.logLowerOverlap * fontHeightNested + this.functionLowerContainer.height - this.topAlign;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.LogLowerWrapper.prototype = Object.create(eqEd.FunctionWrapper.prototype);
    eqEd.LogLowerWrapper.prototype.constructor = eqEd.LogLowerWrapper;
    eqEd.LogLowerWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper logLowerWrapper"></div>');
    };
    eqEd.LogLowerWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.functionWord = new eqEd.FunctionWord(characters, fontStyle, symbolSizeConfig);
        copy.functionLowerContainer = this.functionLowerContainer.clone();
        copy.functionWord.parent = copy;
        copy.functionLowerContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.functionWord.domObj);
        copy.domObj.append(copy.functionLowerContainer.domObj);
        copy.childNoncontainers = [ copy.functionWord ];
        copy.childContainers = [ copy.functionLowerContainer ];
        return copy;
    };
    eqEd.LogLowerWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                lower: this.functionLowerContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.LogLowerWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var logLowerWrapper = new eqEd.LogLowerWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.lower.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.lower[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.lower[i], symbolSizeConfig);
            logLowerWrapper.functionLowerContainer.addWrappers([ i, innerWrapper ]);
        }
        return logLowerWrapper;
    };
})();

eqEd.LogLowerWord = function(symbolSizeConfig) {
    eqEd.Word.call(this, "log", "MathJax_Main", symbolSizeConfig);
    this.className = "eqEd.LogLowerWord";
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LogLowerWord.prototype = Object.create(eqEd.Word.prototype);
    eqEd.LogLowerWord.prototype.constructor = eqEd.LogLowerWord;
})();

eqEd.LogLowerContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.LogLowerContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            return this.parent.functionWord.width;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.fontSize];
            return this.parent.functionWord.height - this.parent.logLowerOverlap * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.LogLowerContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.LogLowerContainer.prototype.constructor = eqEd.LogLowerContainer;
    eqEd.LogLowerContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer logLowerContainer"></div>');
    };
})();

eqEd.LimitWrapper = function(symbolSizeConfig) {
    eqEd.FunctionWrapper.call(this, "lim", "MathJax_Main", symbolSizeConfig);
    this.className = "eqEd.LimitWrapper";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "topAlign" || this.properties[i].propName === "bottomAlign" || this.properties[i].propName === "width") {
            this.properties.splice(i, 1);
        }
    }
    this.leftLimitContainerGap = 0;
    this.rightLimitContainerGap = 0;
    this.belowLimitGap = -.18;
    this.limitWord = new eqEd.LimitWord(symbolSizeConfig);
    this.limitLeftContainer = new eqEd.LimitLeftContainer(symbolSizeConfig);
    this.limitRightContainer = new eqEd.LimitRightContainer(symbolSizeConfig);
    this.symbol = new eqEd.LimitSymbol(symbolSizeConfig);
    this.limitWord.parent = this;
    this.limitLeftContainer.parent = this;
    this.limitRightContainer.parent = this;
    this.symbol.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.limitWord.domObj);
    this.domObj.append(this.limitLeftContainer.domObj);
    this.domObj.append(this.limitRightContainer.domObj);
    this.domObj.append(this.symbol.domObj);
    this.childNoncontainers = [ this.symbol, this.limitWord ];
    this.childContainers = [ this.limitLeftContainer, this.limitRightContainer ];
    var bottomHalfWidth = 0;
    this.properties.push(new Property(this, "bottomHalfWidth", bottomHalfWidth, {
        get: function() {
            return bottomHalfWidth;
        },
        set: function(value) {
            bottomHalfWidth = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var bottomHalfWidthVal = this.limitLeftContainer.width + this.leftLimitContainerGap * fontHeight + this.symbol.width + this.rightLimitContainerGap * fontHeight + this.limitRightContainer.width;
            return bottomHalfWidthVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            var topWidth = this.limitWord.width;
            widthVal = topWidth > this.bottomHalfWidth ? topWidth : this.bottomHalfWidth;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.limitWord.height;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var bottomAlignVal = 0;
            var maxBottomHalfHeight = [ this.symbol.height, this.limitLeftContainer.height, this.limitRightContainer.height ].max();
            bottomAlignVal = .5 * this.limitWord.height + this.belowLimitGap * fontHeight + maxBottomHalfHeight;
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.LimitWrapper.prototype = Object.create(eqEd.FunctionWrapper.prototype);
    eqEd.LimitWrapper.prototype.constructor = eqEd.LimitWrapper;
    eqEd.LimitWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper limitWrapper"></div>');
    };
    eqEd.LimitWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.symbolSizeConfig);
        copy.limitWord = new eqEd.LimitWord(this.symbolSizeConfig);
        copy.limitLeftContainer = this.limitLeftContainer.clone();
        copy.limitRightContainer = this.limitRightContainer.clone();
        copy.symbol = new eqEd.LimitSymbol(this.symbolSizeConfig);
        copy.limitWord.parent = copy;
        copy.limitLeftContainer.parent = copy;
        copy.limitRightContainer.parent = copy;
        copy.symbol.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.limitWord.domObj);
        copy.domObj.append(copy.limitLeftContainer.domObj);
        copy.domObj.append(copy.limitRightContainer.domObj);
        copy.domObj.append(copy.symbol.domObj);
        copy.childNoncontainers = [ copy.symbol, copy.limitWord ];
        copy.childContainers = [ copy.limitLeftContainer, copy.limitRightContainer ];
        return copy;
    };
    eqEd.LimitWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null,
            operands: {
                left: this.limitLeftContainer.buildJsonObj(),
                right: this.limitRightContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.LimitWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var limitWrapper = new eqEd.LimitWrapper(symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.left.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.left[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.left[i], symbolSizeConfig);
            limitWrapper.limitLeftContainer.addWrappers([ i, innerWrapper ]);
        }
        for (var i = 0; i < jsonObj.operands.right.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.right[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.right[i], symbolSizeConfig);
            limitWrapper.limitRightContainer.addWrappers([ i, innerWrapper ]);
        }
        return limitWrapper;
    };
})();

eqEd.LimitLeftContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.LimitLeftContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.parent.bottomHalfWidth);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var bottomHalfMaxTopAlign = 0;
            var topOffset = 0;
            if (this.wrappers.length > 0 && this.parent.limitRightContainer.wrappers.length > 0) {
                bottomHalfMaxTopAlign = [ this.wrappers[this.maxTopAlignIndex].topAlign, .5 * this.parent.symbol.height, this.parent.limitRightContainer.wrappers[this.parent.limitRightContainer.maxTopAlignIndex].topAlign ].max();
                topOffset = bottomHalfMaxTopAlign - this.wrappers[this.maxTopAlignIndex].topAlign;
            }
            return this.parent.limitWord.height + this.parent.belowLimitGap * fontHeight + topOffset;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.LimitLeftContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.LimitLeftContainer.prototype.constructor = eqEd.LimitLeftContainer;
    eqEd.LimitLeftContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer limitLeftContainer"></div>');
    };
})();

eqEd.LimitRightContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.LimitRightContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.parent.bottomHalfWidth);
            return leftOffset + this.parent.limitLeftContainer.width + this.parent.leftLimitContainerGap * fontHeight + this.parent.symbol.width + this.parent.rightLimitContainerGap * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var bottomHalfMaxTopAlign = 0;
            var topOffset = 0;
            if (this.wrappers.length > 0 && this.parent.limitLeftContainer.wrappers.length > 0) {
                bottomHalfMaxTopAlign = [ this.wrappers[this.maxTopAlignIndex].topAlign, .5 * this.parent.symbol.height, this.parent.limitLeftContainer.wrappers[this.parent.limitLeftContainer.maxTopAlignIndex].topAlign ].max();
                topOffset = bottomHalfMaxTopAlign - this.wrappers[this.maxTopAlignIndex].topAlign;
            }
            return this.parent.limitWord.height + this.parent.belowLimitGap * fontHeight + topOffset;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeSmaller";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.LimitRightContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.LimitRightContainer.prototype.constructor = eqEd.LimitRightContainer;
    eqEd.LimitRightContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer limitRightContainer"></div>');
    };
})();

eqEd.LimitWord = function(symbolSizeConfig) {
    eqEd.Word.call(this, "lim", "MathJax_Main", symbolSizeConfig);
    this.className = "eqEd.LimitWord";
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            return 0;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LimitWord.prototype = Object.create(eqEd.Word.prototype);
    eqEd.LimitWord.prototype.constructor = eqEd.LimitWord;
})();

eqEd.LimitSymbol = function(symbolSizeConfig) {
    eqEd.Symbol.call(this, "→", "MathJax_Main", symbolSizeConfig);
    this.className = "eqEd.LimitSymbol";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "left" || this.properties[i].propName === "top") {
            this.properties.splice(i, 1);
        }
    }
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.parent.bottomHalfWidth);
            return leftOffset + this.parent.limitLeftContainer.width + this.parent.leftLimitContainerGap * fontHeight;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var bottomHalfMaxTopAlign = 0;
            var topOffset = 0;
            if (this.parent.limitLeftContainer.wrappers.length > 0 && this.parent.limitRightContainer.wrappers.length > 0) {
                bottomHalfMaxTopAlign = [ this.parent.limitLeftContainer.wrappers[this.parent.limitLeftContainer.maxTopAlignIndex].topAlign, .5 * this.height, this.parent.limitRightContainer.wrappers[this.parent.limitRightContainer.maxTopAlignIndex].topAlign ].max();
                topOffset = bottomHalfMaxTopAlign - .5 * this.height;
            }
            return this.parent.limitWord.height + this.parent.belowLimitGap * fontHeight + topOffset;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
};

(function() {
    eqEd.LimitSymbol.prototype = Object.create(eqEd.Symbol.prototype);
    eqEd.LimitSymbol.prototype.constructor = eqEd.LimitSymbol;
})();

eqEd.MatrixWrapper = function(numRows, numCols, horAlign, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.MatrixWrapper";
    this.numRows = numRows;
    this.numCols = numCols;
    this.horAlign = horAlign;
    this.horGap = 1;
    this.vertGap = .25;
    if (this.numRows === 2 && this.numCols === 1) {
        this.padLeft = 0;
        this.padRight = 0;
    } else {
        this.padLeft = .25;
        this.padRight = .25;
    }
    this.domObj = this.buildDomObj();
    this.childContainers = [];
    this.matrixContainers = [];
    for (var i = 0; i < this.numRows; i++) {
        var row = [];
        for (var j = 0; j < this.numCols; j++) {
            var matrixContainer = new eqEd.MatrixContainer(i, j, this.symbolSizeConfig);
            matrixContainer.parent = this;
            this.domObj.append(matrixContainer.domObj);
            row.push(matrixContainer);
            this.childContainers.push(matrixContainer);
        }
        this.matrixContainers.push(row);
    }
    var rowTopAligns = [];
    this.properties.push(new Property(this, "rowTopAligns", rowTopAligns, {
        get: function() {
            return rowTopAligns;
        },
        set: function(value) {
            rowTopAligns = value;
        },
        compute: function() {
            var rowTopAlignsVal = [];
            for (var i = 0; i < this.numRows; i++) {
                var rowTopAlignsList = [];
                for (var j = 0; j < this.numCols; j++) {
                    var topAlign = 0;
                    if (this.matrixContainers[i][j].wrappers.length > 0) {
                        topAlign = this.matrixContainers[i][j].wrappers[this.matrixContainers[i][j].maxTopAlignIndex].topAlign;
                    }
                    rowTopAlignsList.push(topAlign);
                }
                rowTopAlignsVal.push(rowTopAlignsList.max());
            }
            return rowTopAlignsVal;
        },
        updateDom: function() {}
    }));
    var rowBottomAligns = [];
    this.properties.push(new Property(this, "rowBottomAligns", rowBottomAligns, {
        get: function() {
            return rowBottomAligns;
        },
        set: function(value) {
            rowBottomAligns = value;
        },
        compute: function() {
            var rowBottomAlignsVal = [];
            for (var i = 0; i < this.numRows; i++) {
                var rowBottomAlignsList = [];
                for (var j = 0; j < this.numCols; j++) {
                    var bottomAlign = 0;
                    if (this.matrixContainers[i][j].wrappers.length > 0) {
                        bottomAlign = this.matrixContainers[i][j].wrappers[this.matrixContainers[i][j].maxBottomAlignIndex].bottomAlign;
                    }
                    rowBottomAlignsList.push(bottomAlign);
                }
                rowBottomAlignsVal.push(rowBottomAlignsList.max());
            }
            return rowBottomAlignsVal;
        },
        updateDom: function() {}
    }));
    var colWidths = [];
    this.properties.push(new Property(this, "colWidths", colWidths, {
        get: function() {
            return colWidths;
        },
        set: function(value) {
            colWidths = value;
        },
        compute: function() {
            var colWidthsVal = [];
            for (var i = 0; i < this.numCols; i++) {
                var colWidthsList = [];
                for (var j = 0; j < this.numRows; j++) {
                    colWidthsList.push(this.matrixContainers[j][i].width);
                }
                colWidthsVal.push(colWidthsList.max());
            }
            return colWidthsVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            for (var i = 0; i < this.numCols; i++) {
                widthVal += this.colWidths[i];
            }
            widthVal += (this.numCols - 1) * this.horGap * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var matrixHeight = 0;
    this.properties.push(new Property(this, "matrixHeight", matrixHeight, {
        get: function() {
            return matrixHeight;
        },
        set: function(value) {
            matrixHeight = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var matrixHeightVal = 0;
            for (var i = 0; i < this.numRows; i++) {
                matrixHeightVal += this.rowTopAligns[i] + this.rowBottomAligns[i];
            }
            matrixHeightVal += (this.numRows - 1) * this.vertGap * fontHeight;
            return matrixHeightVal;
        },
        updateDom: function() {}
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.matrixHeight;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.matrixHeight;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.MatrixWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.MatrixWrapper.prototype.constructor = eqEd.MatrixWrapper;
    eqEd.MatrixWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper matrixWrapper"></div>');
    };
    eqEd.MatrixWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.numRows, this.numCols, this.horAlign, this.symbolSizeConfig);
        console.log(this.symbolSizeConfig);
        copy.domObj = copy.buildDomObj();
        copy.childContainers = [];
        copy.matrixContainers = [];
        for (var i = 0; i < copy.numRows; i++) {
            var row = [];
            for (var j = 0; j < copy.numCols; j++) {
                var matrixContainer = this.matrixContainers[i][j].clone();
                matrixContainer.parent = copy;
                copy.domObj.append(matrixContainer.domObj);
                row.push(matrixContainer);
                copy.childContainers.push(matrixContainer);
            }
            copy.matrixContainers.push(row);
        }
        return copy;
    };
    eqEd.MatrixWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null
        };
        var jsonMatrixContainers = [];
        for (var i = 0; i < this.matrixContainers.length; i++) {
            var jsonRow = [];
            for (var j = 0; j < this.matrixContainers[i].length; j++) {
                jsonRow.push(this.matrixContainers[i][j].buildJsonObj());
            }
            jsonMatrixContainers.push(jsonRow);
        }
        jsonObj.operands = {
            elements: jsonMatrixContainers
        };
        return jsonObj;
    };
    eqEd.MatrixWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var numRows = jsonObj.operands.elements.length;
        var numCols = jsonObj.operands.elements[0].length;
        var matrixWrapper = new eqEd.MatrixWrapper(numRows, numCols, "center", symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.elements.length; i++) {
            var matrixRow = jsonObj.operands.elements[i];
            for (var j = 0; j < matrixRow.length; j++) {
                var matrixEntry = matrixRow[j];
                for (var k = 0; k < matrixEntry.length; k++) {
                    var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(matrixEntry[k].type);
                    var innerWrapper = innerWrapperCtor.constructFromJsonObj(matrixEntry[k], symbolSizeConfig);
                    matrixWrapper.matrixContainers[i][j].addWrappers([ k, innerWrapper ]);
                }
            }
        }
        return matrixWrapper;
    };
})();

eqEd.MatrixContainer = function(row, col, symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.MatrixContainer";
    this.row = row;
    this.col = col;
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftVal = 0;
            for (var i = 0; i < this.col; i++) {
                leftVal += this.parent.colWidths[i];
            }
            if (this.parent.horAlign === "left") {
                leftVal += 0;
            } else if (this.parent.horAlign === "center") {
                leftVal += .5 * (this.parent.colWidths[this.col] - this.width);
            } else if (this.parent.horAlign === "right") {
                leftVal += this.parent.colWidths[this.col] - this.width;
            }
            leftVal += this.col * this.parent.horGap * fontHeight;
            return leftVal;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            for (var i = 0; i < this.row; i++) {
                topVal += this.parent.rowTopAligns[i] + this.parent.rowBottomAligns[i];
            }
            if (this.wrappers.length > 0) {
                topVal += this.parent.rowTopAligns[this.row] - this.wrappers[this.maxTopAlignIndex].topAlign;
            }
            topVal += this.row * this.parent.vertGap * fontHeight;
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            if (actualParentContainer.fontSize === "fontSizeSmaller" || actualParentContainer.fontSize === "fontSizeSmallest") {
                fontSizeVal = "fontSizeSmallest";
            } else {
                fontSizeVal = "fontSizeNormal";
            }
            return fontSizeVal;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.MatrixContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.MatrixContainer.prototype.constructor = eqEd.MatrixContainer;
    eqEd.MatrixContainer.prototype.clone = function() {
        var copy = new this.constructor(this.row, this.col, this.symbolSizeConfig);
        var indexAndWrapperList = [];
        for (var i = 0; i < this.wrappers.length; i++) {
            indexAndWrapperList.push([ i, this.wrappers[i].clone() ]);
        }
        eqEd.Container.prototype.addWrappers.apply(copy, indexAndWrapperList);
        return copy;
    };
    eqEd.MatrixContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer matrixContainer"></div>');
    };
})();

eqEd.AccentWrapper = function(character, fontStyle, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.AccentWrapper";
    this.character = character;
    this.fontStyle = fontStyle;
    this.accentSymbol = new eqEd.AccentSymbol(character, fontStyle, symbolSizeConfig);
    this.accentContainer = new eqEd.AccentContainer(symbolSizeConfig);
    this.accentSymbol.parent = this;
    this.accentContainer.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.accentSymbol.domObj);
    this.domObj.append(this.accentContainer.domObj);
    this.childNoncontainers = [ this.accentSymbol ];
    this.childContainers = [ this.accentContainer ];
    var accentGap = 0;
    this.properties.push(new Property(this, "accentGap", accentGap, {
        get: function() {
            return accentGap;
        },
        set: function(value) {
            accentGap = value;
        },
        compute: function() {
            var accentGapVal = .25;
            if (this.accentContainerCharacter !== "") {
                console.log(this.accentContainerCharacter);
                if (this.symbolSizeConfig.shortCharacters.contains(this.accentContainerCharacter)) {
                    accentGapVal = -.02;
                } else if (this.symbolSizeConfig.mediumCharacters.contains(this.accentContainerCharacter)) {
                    accentGapVal = .135;
                } else if (this.symbolSizeConfig.tallCharacters.contains(this.accentContainerCharacter)) {
                    accentGapVal = .22;
                }
            }
            return accentGapVal;
        },
        updateDom: function() {}
    }));
    var accentContainerCharacter = "";
    var accentContainerCharacter = 0;
    this.properties.push(new Property(this, "accentContainerCharacter", accentContainerCharacter, {
        get: function() {
            return accentContainerCharacter;
        },
        set: function(value) {
            accentContainerCharacter = value;
        },
        compute: function() {
            var accentContainerCharacterVal = "";
            if (this.accentContainer.wrappers.length > 0) {
                if (this.accentContainer.wrappers.length === 1) {
                    if (this.accentContainer.wrappers[0] instanceof eqEd.SymbolWrapper) {
                        if (this.accentSymbol.character === "^") {
                            var symbol = this.accentContainer.wrappers[0].symbol;
                            if (symbol.character === "i") {
                                symbol.character = "ı";
                                symbol.fontStyle = "MathJax_MainItalic";
                                symbol.domObj = symbol.buildDomObj();
                                symbol.parent.domObj.empty();
                                symbol.parent.domObj.append(symbol.domObj);
                            } else if (symbol.character === "j") {
                                symbol.character = "ȷ";
                                symbol.fontStyle = "MathJax_MainItalic";
                                symbol.domObj = symbol.buildDomObj();
                                symbol.parent.domObj.empty();
                                symbol.parent.domObj.append(symbol.domObj);
                            }
                        }
                        accentContainerCharacterVal = this.accentContainer.wrappers[0].symbol.character;
                    } else if (this.accentContainer.wrappers[0] instanceof eqEd.SquareEmptyContainerWrapper) {
                        accentContainerCharacterVal = "squareEmptyContainerWrapper";
                    }
                } else {
                    accentContainerCharacterVal = "multipleWrappers";
                }
            }
            console.log(accentContainerCharacterVal);
            return accentContainerCharacterVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var containerWidth = this.accentContainer.width;
            return containerWidth;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var topAlignVal = 0;
            if (this.accentContainer.wrappers.length > 0) {
                topAlignVal = this.accentContainer.wrappers[this.accentContainer.maxTopAlignIndex].topAlign;
                if (this.accentGap >= 0) {
                    topAlignVal += this.accentGap * fontHeight;
                }
            }
            return topAlignVal;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            var bottomAlignVal = 0;
            if (this.accentContainer.wrappers.length > 0) {
                bottomAlignVal = this.accentContainer.wrappers[this.accentContainer.maxBottomAlignIndex].bottomAlign;
            }
            return bottomAlignVal;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.AccentWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.AccentWrapper.prototype.constructor = eqEd.AccentWrapper;
    eqEd.AccentWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper accentWrapper"></div>');
    };
    eqEd.AccentWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.character, this.fontStyle, this.symbolSizeConfig);
        copy.accentSymbol = new eqEd.AccentSymbol(this.character, this.fontStyle, this.symbolSizeConfig);
        copy.accentContainer = this.accentContainer.clone();
        copy.accentSymbol.parent = copy;
        copy.accentContainer.parent = copy;
        copy.domObj = copy.buildDomObj();
        copy.domObj.append(copy.accentSymbol.domObj);
        copy.domObj.append(copy.accentContainer.domObj);
        copy.childNoncontainers = [ copy.accentSymbol ];
        copy.childContainers = [ copy.accentContainer ];
        return copy;
    };
    eqEd.AccentWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: this.character,
            operands: {
                accentedExpression: this.accentContainer.buildJsonObj()
            }
        };
        return jsonObj;
    };
    eqEd.AccentWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var accentWrapper = new eqEd.AccentWrapper(jsonObj.value, "MathJax_Main", symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.accentedExpression.length; i++) {
            var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(jsonObj.operands.accentedExpression[i].type);
            var innerWrapper = innerWrapperCtor.constructFromJsonObj(jsonObj.operands.accentedExpression[i], symbolSizeConfig);
            accentWrapper.accentContainer.addWrappers([ i, innerWrapper ]);
        }
        return accentWrapper;
    };
})();

eqEd.AccentSymbol = function(character, fontStyle, symbolSizeConfig) {
    eqEd.Symbol.call(this, character, fontStyle, symbolSizeConfig);
    this.className = "eqEd.AccentSymbol";
    for (var i = 0; i < this.properties.length; i++) {
        if (this.properties[i].propName === "width" || this.properties[i].propName === "left" || this.properties[i].propName === "top") {
            this.properties.splice(i, 1);
        }
    }
    var adjustLeftByChar = {
        squareEmptyContainerWrapper: {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        multipleWrappers: {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        a: {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        c: {
            "˙": .06,
            "^": .06,
            "⃗": .3,
            "¯": .025
        },
        e: {
            "˙": .06,
            "^": .06,
            "⃗": .3,
            "¯": .025
        },
        g: {
            "˙": .06,
            "^": .06,
            "⃗": .3,
            "¯": .025
        },
        "ı": {
            "˙": .04,
            "^": .035,
            "⃗": .3,
            "¯": .025
        },
        "ȷ": {
            "˙": .075,
            "^": .04,
            "⃗": .3,
            "¯": .025
        },
        m: {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        n: {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        o: {
            "˙": .04,
            "^": .04,
            "⃗": .3,
            "¯": .06
        },
        p: {
            "˙": .075,
            "^": .075,
            "⃗": .3,
            "¯": .025
        },
        q: {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        r: {
            "˙": .06,
            "^": .06,
            "⃗": .3,
            "¯": .025
        },
        s: {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .025
        },
        u: {
            "˙": .025,
            "^": .025,
            "⃗": .3,
            "¯": .025
        },
        v: {
            "˙": .035,
            "^": .035,
            "⃗": .3,
            "¯": .025
        },
        w: {
            "˙": .1,
            "^": .1,
            "⃗": .3,
            "¯": .025
        },
        x: {
            "˙": .02,
            "^": .02,
            "⃗": .3,
            "¯": .025
        },
        y: {
            "˙": .065,
            "^": .065,
            "⃗": .3,
            "¯": .025
        },
        z: {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .05
        },
        "α": {
            "˙": .02,
            "^": .02,
            "⃗": .3,
            "¯": .025
        },
        "γ": {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .025
        },
        "ε": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "ϵ": {
            "˙": .055,
            "^": .055,
            "⃗": .3,
            "¯": .025
        },
        "η": {
            "˙": .075,
            "^": .075,
            "⃗": .3,
            "¯": .025
        },
        "ι": {
            "˙": .03,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "κ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "μ": {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .025
        },
        "ν": {
            "˙": .055,
            "^": .055,
            "⃗": .3,
            "¯": .025
        },
        "π": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "ϖ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "ρ": {
            "˙": .055,
            "^": .055,
            "⃗": .3,
            "¯": .065
        },
        "ϱ": {
            "˙": .06,
            "^": .06,
            "⃗": .3,
            "¯": .065
        },
        "σ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "ς": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "τ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "υ": {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .025
        },
        "φ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "χ": {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        "ω": {
            "˙": .035,
            "^": .035,
            "⃗": .3,
            "¯": .025
        },
        i: {
            "˙": .04,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        j: {
            "˙": .075,
            "^": .04,
            "⃗": .4,
            "¯": .135
        },
        t: {
            "˙": .075,
            "^": .035,
            "⃗": .325,
            "¯": .025
        },
        b: {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        d: {
            "˙": .18,
            "^": .18,
            "⃗": .45,
            "¯": .165
        },
        f: {
            "˙": .18,
            "^": .18,
            "⃗": .45,
            "¯": .165
        },
        h: {
            "˙": -.05,
            "^": -.05,
            "⃗": .25,
            "¯": -.05
        },
        k: {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": -.05
        },
        l: {
            "˙": 0,
            "^": 0,
            "⃗": .3,
            "¯": .025
        },
        A: {
            "˙": .15,
            "^": .15,
            "⃗": .45,
            "¯": .15
        },
        B: {
            "˙": .08,
            "^": .08,
            "⃗": .35,
            "¯": .075
        },
        C: {
            "˙": .125,
            "^": .125,
            "⃗": .35,
            "¯": .125
        },
        D: {
            "˙": .025,
            "^": .025,
            "⃗": .35,
            "¯": .075
        },
        E: {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .075
        },
        F: {
            "˙": .15,
            "^": .15,
            "⃗": .35,
            "¯": .075
        },
        G: {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .125
        },
        H: {
            "˙": .08,
            "^": .08,
            "⃗": .35,
            "¯": .075
        },
        I: {
            "˙": .085,
            "^": .085,
            "⃗": .35,
            "¯": .1
        },
        J: {
            "˙": .175,
            "^": .175,
            "⃗": .45,
            "¯": .165
        },
        K: {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .075
        },
        L: {
            "˙": .025,
            "^": .025,
            "⃗": .3,
            "¯": .0125
        },
        M: {
            "˙": .08,
            "^": .08,
            "⃗": .35,
            "¯": .075
        },
        N: {
            "˙": .08,
            "^": .08,
            "⃗": .35,
            "¯": .075
        },
        O: {
            "˙": .075,
            "^": .075,
            "⃗": .35,
            "¯": .125
        },
        P: {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .075
        },
        Q: {
            "˙": .075,
            "^": .075,
            "⃗": .35,
            "¯": .125
        },
        R: {
            "˙": .075,
            "^": .075,
            "⃗": .35,
            "¯": .075
        },
        S: {
            "˙": .1,
            "^": .1,
            "⃗": .4,
            "¯": .075
        },
        T: {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .025
        },
        U: {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .075
        },
        V: {
            "˙": .05,
            "^": .05,
            "⃗": .3,
            "¯": .075
        },
        W: {
            "˙": .035,
            "^": .035,
            "⃗": .3,
            "¯": .025
        },
        X: {
            "˙": .08,
            "^": .08,
            "⃗": .35,
            "¯": .075
        },
        Y: {
            "˙": .045,
            "^": .045,
            "⃗": .3,
            "¯": .025
        },
        Z: {
            "˙": .125,
            "^": .125,
            "⃗": .375,
            "¯": .1
        },
        "β": {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .1
        },
        "δ": {
            "˙": .06,
            "^": .06,
            "⃗": .35,
            "¯": .08
        },
        "ζ": {
            "˙": .1,
            "^": .1,
            "⃗": .35,
            "¯": .08
        },
        "θ": {
            "˙": .055,
            "^": .055,
            "⃗": .4,
            "¯": .08
        },
        "ϑ": {
            "˙": .075,
            "^": .075,
            "⃗": .4,
            "¯": .08
        },
        "λ": {
            "˙": -.035,
            "^": -.035,
            "⃗": .25,
            "¯": -.025
        },
        "ξ": {
            "˙": .125,
            "^": .125,
            "⃗": .35,
            "¯": .08
        },
        "ϕ": {
            "˙": .115,
            "^": .115,
            "⃗": .4,
            "¯": .125
        },
        "ψ": {
            "˙": .115,
            "^": .115,
            "⃗": .4,
            "¯": .125
        },
        "Γ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Δ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Θ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": .015
        },
        "Λ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Ξ": {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        "Π": {
            "˙": 0,
            "^": 0,
            "⃗": .25,
            "¯": 0
        },
        "Σ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Υ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Φ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Ψ": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        },
        "Ω": {
            "˙": 0,
            "^": 0,
            "⃗": .275,
            "¯": 0
        }
    };
    this.domObj.addClass("accentSymbol");
    if (this.character === "˙") {
        if (IEVersion >= 9) {
            this.domObj.addClass("dotAccentIE");
        } else {
            this.domObj.addClass("dotAccent");
        }
    } else if (this.character === "^") {
        if (IEVersion >= 9) {
            this.domObj.addClass("hatAccentIE");
        } else {
            this.domObj.addClass("hatAccent");
        }
    } else if (this.character === "⃗") {
        this.domObj.addClass("vectorAccent");
    } else if (this.character === "¯") {
        if (IEVersion >= 9) {
            this.domObj.addClass("barAccentIE");
        } else {
            this.domObj.addClass("barAccent");
        }
    }
    var adjustLeft = 0;
    this.properties.push(new Property(this, "adjustLeft", adjustLeft, {
        get: function() {
            return adjustLeft;
        },
        set: function(value) {
            adjustLeft = value;
        },
        compute: function() {
            var adjustLeftVal = 0;
            if (typeof adjustLeftByChar[this.parent.accentContainerCharacter] !== "undefined") {
                adjustLeftVal = adjustLeftByChar[this.parent.accentContainerCharacter][this.character];
            }
            return adjustLeftVal;
        },
        updateDom: function() {}
    }));
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var fontWidth = this.symbolSizeConfig.width[this.character][this.fontStyle][this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - fontWidth);
            return leftOffset;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.accentGap < 0) {
                topVal = -1 * this.parent.accentGap * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var widthVal = 0;
            if (this.character === "˙") {
                widthVal = .33 * fontHeight;
            } else if (this.character === "^") {
                widthVal = .4 * fontHeight;
            } else if (this.character === "⃗") {
                widthVal = 1;
            }
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
};

(function() {
    eqEd.AccentSymbol.prototype = Object.create(eqEd.Symbol.prototype);
    eqEd.AccentSymbol.prototype.constructor = eqEd.AccentSymbol;
})();

eqEd.AccentContainer = function(symbolSizeConfig) {
    eqEd.Container.call(this, symbolSizeConfig);
    this.className = "eqEd.AccentContainer";
    this.domObj = this.buildDomObj();
    var squareEmptyContainerWrapper = new eqEd.SquareEmptyContainerWrapper(symbolSizeConfig);
    this.addWrappers([ 0, squareEmptyContainerWrapper ]);
    var left = 0;
    this.properties.push(new Property(this, "left", left, {
        get: function() {
            return left;
        },
        set: function(value) {
            left = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var leftOffset = .5 * (this.parent.width - (this.parent.padLeft + this.parent.padRight) * fontHeight - this.width);
            return 0;
        },
        updateDom: function() {
            this.domObj.updateLeft(this.left);
        }
    }));
    var top = 0;
    this.properties.push(new Property(this, "top", top, {
        get: function() {
            return top;
        },
        set: function(value) {
            top = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            var topVal = 0;
            if (this.parent.accentGap >= 0) {
                topVal = this.parent.accentGap * fontHeight;
            }
            return topVal;
        },
        updateDom: function() {
            this.domObj.updateTop(this.top);
        }
    }));
    var fontSize = "";
    this.properties.push(new Property(this, "fontSize", fontSize, {
        get: function() {
            return fontSize;
        },
        set: function(value) {
            fontSize = value;
        },
        compute: function() {
            var fontSizeVal = "";
            var actualParentContainer = this.parent.parent;
            while (actualParentContainer instanceof eqEd.BracketContainer) {
                actualParentContainer = actualParentContainer.parent.parent;
            }
            return actualParentContainer.fontSize;
        },
        updateDom: function() {
            this.domObj.updateFontSize(this.fontSize);
        }
    }));
};

(function() {
    eqEd.AccentContainer.prototype = Object.create(eqEd.Container.prototype);
    eqEd.AccentContainer.prototype.constructor = eqEd.AccentContainer;
    eqEd.AccentContainer.prototype.buildDomObj = function() {
        return new eqEd.ContainerDom(this, '<div class="eqEdContainer accentContainer"></div>');
    };
})();

var toggleCursorVisibility = function() {
    $(".cursor").toggleClass("cursorOff");
};

var cursorBlinkTimers = new Array();

var addBlink = function() {
    removeBlink();
    (function() {
        window.setTimeout(function() {}, 3e3);
    })();
    var intervalId = window.setInterval(toggleCursorVisibility, 750);
    cursorBlinkTimers.push(intervalId);
};

var removeBlink = function() {
    for (var i = 0; i < cursorBlinkTimers.length; i++) {
        window.clearInterval(cursorBlinkTimers[i]);
    }
    cursorBlinkTimers = [];
    $(".cursorOff").removeClass("cursorOff");
};

var mouseDown = false;

var toggleLines = [];

var highlightStartIndex = null;

var highlightEndIndex = null;

var removeCursor = function() {
    $(".cursor").remove();
    removeBlink();
};

var removeHighlight = function() {
    $(".highlight").remove();
    $(".highlighted").removeClass("highlighted");
    $(".eqEdContainer").css("z-index", 3);
    $(".eqEdWrapper").css("z-index", 3);
    toggleLines = [];
    highlightStartIndex = null;
};

var clearOnMouseDown = function() {
    mouseDown = true;
    removeCursor();
    removeHighlight();
    clearHighlighted();
    $(".activeContainer").removeClass("activeContainer");
    $(".hoverContainer").removeClass("hoverContainer");
};

var calculateIndex = function(offsetLeft) {
    var index = 0;
    var indexSet = false;
    for (var i = 0; i < toggleLines.length; i++) {
        if (offsetLeft < toggleLines[i]) {
            index = i;
            indexSet = true;
            break;
        }
    }
    if (!indexSet) {
        index = toggleLines.length;
    }
    return index;
};

var addCursor = function(container, characterClickPos) {
    removeCursor();
    $(".activeContainer").removeClass("activeContainer");
    container.domObj.value.addClass("activeContainer");
    var cursor;
    if (container instanceof eqEd.SquareEmptyContainer) {
        cursor = $('<div class="cursor squareCursor"></div>');
    } else {
        var cumulative = 0;
        var cursorLeft = -1;
        var cursorLeftSet = false;
        var toggleLinesEmpty = toggleLines.length === 0;
        if (!container.domObj.value.children().first().hasClass("topLevelEmptyContainerWrapper")) {
            for (var i = 0; i < container.wrappers.length; i++) {
                var wrapper = container.wrappers[i];
                cumulative += .5 * wrapper.width;
                if (toggleLinesEmpty) {
                    toggleLines.push(cumulative);
                }
                if (characterClickPos < cumulative && !cursorLeftSet) {
                    cursorLeft += cumulative - .5 * wrapper.width;
                    highlightStartIndex = i;
                    cursorLeftSet = true;
                }
                cumulative += .5 * wrapper.width;
            }
            if (!cursorLeftSet) {
                cursorLeft += cumulative;
                highlightStartIndex = container.wrappers.length;
            }
        } else {
            container.domObj.value.children().first().addClass("activeContainer");
        }
        cursor = $('<div class="cursor normalCursor"></div>');
        cursor.css("left", cursorLeft);
    }
    container.domObj.value.append(cursor);
    addBlink();
};

var addCursorAtIndex = function(container, index) {
    removeCursor();
    removeHighlight();
    addHighlight(container);
    $(".activeContainer").removeClass("activeContainer");
    container.domObj.value.addClass("activeContainer");
    var cursor;
    highlightStartIndex = index;
    if (container instanceof eqEd.SquareEmptyContainer) {
        cursor = $('<div class="cursor squareCursor"></div>');
    } else {
        var cumulative = 0;
        var cursorLeft = -1;
        var cursorLeftSet = false;
        var toggleLinesEmpty = toggleLines.length === 0;
        if (!(container.wrappers[0] instanceof eqEd.TopLevelEmptyContainerWrapper)) {
            for (var i = 0; i < container.wrappers.length; i++) {
                var wrapper = container.wrappers[i];
                if (index === i) {
                    cursorLeft += cumulative;
                    cursorLeftSet = true;
                }
                cumulative += .5 * wrapper.width;
                if (toggleLinesEmpty) {
                    toggleLines.push(cumulative);
                }
                cumulative += .5 * wrapper.width;
            }
        }
        if (!cursorLeftSet) {
            cursorLeft += cumulative;
            cursorLeftSet = true;
        }
        cursor = $('<div class="cursor normalCursor"></div>');
        cursor.css("left", cursorLeft);
    }
    container.domObj.value.append(cursor);
    addBlink();
};

var addHighlight = function(container) {
    var highlight = $('<div class="highlight"></div>');
    container.domObj.value.css("z-index", 4);
    highlight.css("z-index", 5);
    container.domObj.value.children().css("z-index", 6);
    container.domObj.value.append(highlight);
};

var updateHighlightFormatting = function(container, endIndex) {
    highlightEndIndex = endIndex;
    var highlight = $(".highlight");
    if (highlight.length > 0) {
        var left = 0;
        var top = 0;
        var height = 0;
        $(".highlighted").removeClass("highlighted");
        if (highlightStartIndex < highlightEndIndex) {
            left = container.wrappers[highlightStartIndex].left;
            top = 0;
            height = container.height;
            var widthSum = 0;
            for (var i = highlightStartIndex; i < highlightEndIndex; i++) {
                if (highlightStartIndex !== highlightEndIndex) {
                    var wrapper = container.wrappers[i];
                    wrapper.domObj.value.addClass("highlighted");
                    widthSum += wrapper.width;
                }
            }
            width = widthSum;
        } else if (highlightStartIndex > highlightEndIndex) {
            left = container.wrappers[highlightEndIndex].left;
            top = 0;
            height = container.height;
            var widthSum = 0;
            for (var i = highlightEndIndex; i < highlightStartIndex; i++) {
                if (highlightStartIndex !== highlightEndIndex) {
                    var wrapper = container.wrappers[i];
                    wrapper.domObj.value.addClass("highlighted");
                    widthSum += wrapper.width;
                }
            }
            width = widthSum;
        } else if (highlightStartIndex === highlightEndIndex) {
            left = 0;
            top = 0;
            height = 0;
            width = 0;
        }
        highlight.css({
            left: left,
            top: top,
            height: height,
            width: width + 5
        });
    }
};

$(document).on("mousedown", function(e) {
    clearOnMouseDown();
});

$(document).on("mouseup", function(e) {
    mouseDown = false;
    if ($(".cursor").length > 0) {
        addBlink();
    }
});

var onMouseDown = function(self, e) {
    if (!$(self).children().first().hasClass("squareEmptyContainerWrapper")) {
        e.preventDefault();
        e.stopPropagation();
        clearOnMouseDown();
        $(self).addClass("activeContainer");
        var container = $(self).data("eqObject");
        addHighlight(container);
        var characterClickPos = e.pageX - container.domObj.value.offset().left;
        addCursor(container, characterClickPos);
    }
};

$(document).on("mousedown", ".tabs", function(e) {
    e.stopPropagation();
});

$(document).on("mousedown", ".eqEdContainer", function(e) {
    onMouseDown(this, e);
});

$(document).on("mousemove", function(e) {
    $(".hoverContainer").removeClass("hoverContainer");
});

$(document).on("mousemove", ".eqEdContainer", function(e) {
    if (mouseDown) {
        clearHighlighted();
    }
    if (mouseDown && !$(this).children().first().hasClass("squareEmptyContainerWrapper") && !$(this).hasClass("squareEmptyContainer") && !$(this).children().first().hasClass("topLevelEmptyContainerWrapper")) {
        var container = $(this).data("eqObject");
        if (highlightStartIndex !== null && container.domObj.value.children(".highlight").length > 0) {
            var characterClickPos = e.pageX - container.domObj.value.offset().left;
            var index = calculateIndex(characterClickPos);
            updateHighlightFormatting(container, index);
            if (highlightStartIndex === index) {
                addCursorAtIndex(container, index);
            } else {
                removeCursor();
            }
        }
    } else {
        var container = $(this).data("eqObject");
        $(".hoverContainer").removeClass("hoverContainer");
        if (!$(this).hasClass("activeContainer") && !(container.wrappers[0] instanceof eqEd.EmptyContainerWrapper) && !($(".highlighted").length > 0)) {
            $(this).addClass("hoverContainer");
        }
        e.preventDefault();
        e.stopPropagation();
    }
});

$(document).on("mouseenter", ".eqEdContainer", function(e) {
    e.preventDefault();
    e.stopPropagation();
    if (mouseDown) {
        clearHighlighted();
        if (highlightStartIndex === null) {
            onMouseDown(this, e);
        } else {
            $(this).trigger("mousemove");
        }
    } else {}
});

$(document).on("mouseleave", ".eqEdContainer", function(e) {
    e.preventDefault();
    e.stopPropagation();
    if (!mouseDown) {}
});

var updateHighlight = function(container, startIndex, endIndex) {
    highlightStartIndex = startIndex;
    highlightEndIndex = endIndex;
    var highlight = $(".highlight");
    if (highlight.length > 0) {
        var left = 0;
        var top = 0;
        var height = 0;
        $(".highlighted").removeClass("highlighted");
        if (highlightStartIndex < highlightEndIndex) {
            left = container.wrappers[highlightStartIndex].left;
            top = 0;
            height = container.height;
            var widthSum = 0;
            for (var i = highlightStartIndex; i < highlightEndIndex; i++) {
                if (highlightStartIndex !== highlightEndIndex) {
                    var wrapper = container.wrappers[i];
                    wrapper.domObj.value.addClass("highlighted");
                    widthSum += wrapper.width;
                }
            }
            width = widthSum;
        } else if (highlightStartIndex > highlightEndIndex) {
            left = container.wrappers[highlightEndIndex].left;
            top = 0;
            height = container.height;
            var widthSum = 0;
            for (var i = highlightEndIndex; i < highlightStartIndex; i++) {
                if (highlightStartIndex !== highlightEndIndex) {
                    var wrapper = container.wrappers[i];
                    wrapper.domObj.value.addClass("highlighted");
                    widthSum += wrapper.width;
                }
            }
            width = widthSum;
        } else if (highlightStartIndex === highlightEndIndex) {
            left = 0;
            top = 0;
            height = 0;
            width = 0;
        }
        highlight.css({
            left: left,
            top: top,
            height: height,
            width: width + 5
        });
    }
};

var insertWrapper = function(wrapper) {
    var cursor = $(".cursor");
    var highlighted = $(".highlighted");
    if (cursor.length > 0) {
        var container = cursor.parent().data("eqObject");
        if (cursor.parent().hasClass("squareEmptyContainer")) {
            container = container.parent.parent;
        }
        container.addWrappers([ highlightStartIndex, wrapper ]);
        wrapper.updateAll();
        removeCursor();
        if (wrapper.childContainers.length > 0) {
            if (wrapper.childContainers[0].wrappers[0] instanceof eqEd.EmptyContainerWrapper) {
                addCursorAtIndex(wrapper.childContainers[0].wrappers[0].childContainers[0], 0);
                container = wrapper.childContainers[0].wrappers[0].childContainers[0];
            } else {
                addCursorAtIndex(wrapper.childContainers[0], wrapper.childContainers[0].wrappers.length);
            }
        } else {
            addCursorAtIndex(container, ++highlightStartIndex);
        }
    } else if (highlighted.length > 0) {
        var container = highlighted.parent().data("eqObject");
        var deleteWrappers;
        if (highlightStartIndex < highlightEndIndex) {
            deleteWrappers = _.range(highlightStartIndex, highlightEndIndex);
        } else {
            deleteWrappers = _.range(highlightEndIndex, highlightStartIndex);
        }
        if (wrapper.childContainers.length > 0) {
            container.addWrappers([ deleteWrappers[0], wrapper ]);
            removeCursor();
            removeHighlight();
            var copiedWrappers = [];
            for (var i = 0; i < deleteWrappers.length; i++) {
                var deleteWrapperIndex = deleteWrappers[i] + 1;
                var deleteWrapper = container.wrappers[deleteWrapperIndex];
                copiedWrappers.push([ i, deleteWrapper.clone() ]);
            }
            eqEd.Container.prototype.removeWrappers.apply(container, _.map(deleteWrappers, function(num) {
                return num + 1;
            }));
            eqEd.Container.prototype.addWrappers.apply(wrapper.childContainers[0], copiedWrappers);
            container.updateAll();
            addCursorAtIndex(wrapper.childContainers[0], copiedWrappers.length);
        } else {
            eqEd.Container.prototype.removeWrappers.apply(container, deleteWrappers);
            container.updateAll();
            highlightStartIndex = highlightStartIndex < highlightEndIndex ? highlightStartIndex : highlightEndIndex;
            updateHighlightFormatting(container, highlightStartIndex);
            addCursorAtIndex(container, highlightStartIndex);
            insertWrapper(wrapper);
        }
    }
    $(".activeContainer").click();
};

var setupKeyboardEvents = function(symbolSizeConfig, clipboard) {
    var MathJax_MathItalic = [ "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M", " " ];
    var MathJax_Main = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "!", "$", "%", ".", ",", ";" ];
    var operatorCharacters = [ "*", "-", "=", "+", "/", "<", ">" ];
    var operatorCharactersMap = {
        "-": "−",
        "/": "÷",
        "*": "⋅",
        "=": "=",
        "+": "+",
        "<": "<",
        ">": ">"
    };
    var bracketCharacters = [ "(", ")", "[", "]", "{", "}", "|" ];
    var bracketCharactersMap = {
        "(": "leftParenthesisBracket",
        ")": "rightParenthesisBracket",
        "[": "leftSquareBracket",
        "]": "rightSquareBracket",
        "{": "leftCurlyBracket",
        "}": "rightCurlyBracket",
        "|": null
    };
    var inputLatexHelperLastValue = [];
    $(document).off("keyup").on("keyup", ".input-latex-helper", function(event) {
        var key = event.keyCode || event.charCode;
        if ([ 8, 9, 12, 13, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 93, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 144, 145, 173, 174, 175, 179, 181, 182, 183, 192, 220 ].indexOf(key) > -1) {
            if (key !== 173 && !navigator.userAgent.indexOf("Firefox") > -1) {
                return;
            }
        }
        if (typeof inputLatexHelperLastValue[event.target.id] === "undefined") {
            inputLatexHelperLastValue[event.target.id] = "";
        }
        var val = $(this).val();
        if (inputLatexHelperLastValue[event.target.id].length <= val.length) {
            key = val.charCodeAt(val.length - 1);
        } else {
            triggerBackspace(event);
        }
        inputLatexHelperLastValue[event.target.id] = val;
        var character = String.fromCharCode(key);
        if (typeof event.key !== "undefined") {
            if ([ "ArrowDown", "Up", "ArrowUp", "Down", "ArrowLeft", "Left", "ArrowRight", "Right", "Del", "Delete", "Insert", "Home" ].indexOf(event.key) > -1) {
                return false;
            }
        }
        insertChar(character, symbolSizeConfig);
    });
    $(document).off("keydown").on("keydown", ".input-latex-helper", function(e) {
        var key = e.keyCode || e.charCode;
        if (key === 8) {
            triggerBackspace(e);
        }
        if (key === 37) {
            var cursor = $(".cursor");
            var highlighted = $(".highlighted");
            var container = null;
            if (cursor.length > 0) {
                container = cursor.parent().data("eqObject");
                if (!(container.parent instanceof eqEd.TopLevelEmptyContainerWrapper)) {
                    if (highlightStartIndex !== 0 && !(container instanceof eqEd.SquareEmptyContainer)) {
                        if (container.wrappers[highlightStartIndex - 1].childContainers.length > 0) {
                            if (container.wrappers[highlightStartIndex - 1].childContainers[container.wrappers[highlightStartIndex - 1].childContainers.length - 1].wrappers[0] instanceof eqEd.EmptyContainerWrapper) {
                                addCursorAtIndex(container.wrappers[highlightStartIndex - 1].childContainers[container.wrappers[highlightStartIndex - 1].childContainers.length - 1].wrappers[0].childContainers[0], 0);
                            } else {
                                addCursorAtIndex(container.wrappers[highlightStartIndex - 1].childContainers[container.wrappers[highlightStartIndex - 1].childContainers.length - 1], container.wrappers[highlightStartIndex - 1].childContainers[container.wrappers[highlightStartIndex - 1].childContainers.length - 1].wrappers.length);
                            }
                        } else {
                            addCursorAtIndex(container, highlightStartIndex - 1);
                        }
                    } else {
                        if (container instanceof eqEd.SquareEmptyContainer) {
                            container = container.parent.parent;
                        }
                        if (container.domObj.value.prev(".eqEdContainer").length > 0) {
                            container = container.domObj.value.prev(".eqEdContainer").first().data("eqObject");
                            if (container.wrappers[0] instanceof eqEd.SquareEmptyContainerWrapper) {
                                container = container.wrappers[0].childContainers[0];
                            }
                            addCursorAtIndex(container, container.wrappers.length);
                        } else {
                            if (container.parent !== null) {
                                addCursorAtIndex(container.parent.parent, container.parent.index);
                            }
                        }
                    }
                }
            } else if (highlighted.length > 0) {
                container = highlighted.parent().data("eqObject");
                var cursorIndex = highlightStartIndex < highlightEndIndex ? highlightStartIndex : highlightEndIndex;
                addCursorAtIndex(container, cursorIndex);
                updateHighlightFormatting(container, cursorIndex);
                $(".highlighted").removeClass("highlighted");
            }
        }
        if (key === 39) {
            var cursor = $(".cursor");
            var highlighted = $(".highlighted");
            var container = null;
            if (cursor.length > 0) {
                container = cursor.parent().data("eqObject");
                if (!(container.parent instanceof eqEd.TopLevelEmptyContainerWrapper)) {
                    if (highlightStartIndex !== container.wrappers.length && !(container instanceof eqEd.SquareEmptyContainer)) {
                        if (container.wrappers[highlightStartIndex].childContainers.length > 0) {
                            if (container.wrappers[highlightStartIndex].childContainers[0].wrappers[0] instanceof eqEd.EmptyContainerWrapper) {
                                addCursorAtIndex(container.wrappers[highlightStartIndex].childContainers[0].wrappers[0].childContainers[0], 0);
                            } else {
                                addCursorAtIndex(container.wrappers[highlightStartIndex].childContainers[0], 0);
                            }
                        } else {
                            addCursorAtIndex(container, highlightStartIndex + 1);
                        }
                    } else {
                        if (container instanceof eqEd.SquareEmptyContainer) {
                            container = container.parent.parent;
                        }
                        if (container.domObj.value.next(".eqEdContainer").length > 0) {
                            container = container.domObj.value.next(".eqEdContainer").first().data("eqObject");
                            if (container.wrappers[0] instanceof eqEd.SquareEmptyContainerWrapper) {
                                container = container.wrappers[0].childContainers[0];
                            }
                            addCursorAtIndex(container, 0);
                        } else {
                            if (container.parent !== null) {
                                addCursorAtIndex(container.parent.parent, container.parent.index + 1);
                            }
                        }
                    }
                }
            } else if (highlighted.length > 0) {
                container = highlighted.parent().data("eqObject");
                var cursorIndex = highlightStartIndex > highlightEndIndex ? highlightStartIndex : highlightEndIndex;
                addCursorAtIndex(container, cursorIndex);
                updateHighlightFormatting(container, cursorIndex);
                $(".highlighted").removeClass("highlighted");
            }
        }
        if (key === 46) {
            var cursor = $(".cursor");
            var highlighted = $(".highlighted");
            var container = null;
            if (cursor.length > 0) {
                container = cursor.parent().data("eqObject");
                if (!(container.parent instanceof eqEd.EmptyContainerWrapper)) {
                    if (highlightStartIndex !== container.wrappers.length && highlightStartIndex !== null) {
                        if (container.wrappers[highlightStartIndex].childContainers.length > 0) {
                            container.wrappers[highlightStartIndex].domObj.value.addClass("highlighted");
                            var endIndex = highlightStartIndex + 1;
                            updateHighlightFormatting(container, endIndex);
                            removeCursor();
                        } else {
                            container.removeWrappers(highlightStartIndex);
                            container.updateAll();
                            addCursorAtIndex(container, highlightStartIndex);
                        }
                    }
                }
            } else if (highlighted.length > 0) {
                container = highlighted.parent().data("eqObject");
                if (!(container.parent instanceof eqEd.EmptyContainerWrapper)) {
                    var deleteWrappers;
                    if (highlightStartIndex < highlightEndIndex) {
                        deleteWrappers = _.range(highlightStartIndex, highlightEndIndex);
                    } else {
                        deleteWrappers = _.range(highlightEndIndex, highlightStartIndex);
                    }
                    eqEd.Container.prototype.removeWrappers.apply(container, deleteWrappers);
                    container.updateAll();
                    highlightStartIndex = highlightStartIndex < highlightEndIndex ? highlightStartIndex : highlightEndIndex;
                    updateHighlightFormatting(container, highlightStartIndex);
                    addCursorAtIndex(container, highlightStartIndex);
                }
            }
            if (container.wrappers.length === 0) {
                if (container.parent === null) {
                    container.addWrappers([ 0, new eqEd.TopLevelEmptyContainerWrapper(container.symbolSizeConfig) ]);
                    container.updateAll();
                    addCursorAtIndex(container, 0);
                } else {
                    container.addWrappers([ 0, new eqEd.SquareEmptyContainerWrapper(container.symbolSizeConfig) ]);
                    container.updateAll();
                    addCursorAtIndex(container.wrappers[0].childContainers[0], 0);
                }
            }
        }
    });
};

var triggerBackspace = function(event) {
    var cursor = $(".cursor");
    var highlighted = $(".highlighted");
    var container = null;
    if (cursor.length > 0) {
        container = cursor.parent().data("eqObject");
        if (!(container.parent instanceof eqEd.EmptyContainerWrapper)) {
            if (highlightStartIndex !== 0 && highlightStartIndex !== null) {
                if (container.wrappers[highlightStartIndex - 1].childContainers.length > 0) {
                    container.wrappers[highlightStartIndex - 1].domObj.value.addClass("highlighted");
                    var endIndex = highlightStartIndex;
                    highlightStartIndex = highlightStartIndex - 1;
                    updateHighlightFormatting(container, endIndex);
                    removeCursor();
                } else {
                    highlightStartIndex = highlightStartIndex - 1;
                    container.removeWrappers(highlightStartIndex);
                    container.updateAll();
                    addCursorAtIndex(container, highlightStartIndex);
                }
            }
        }
        addEpmtyMessage(container);
    } else if (highlighted.length > 0) {
        if (event && event.currentTarget.activeElement !== undefined && event.currentTarget.activeElement.tagName.toUpperCase() !== "INPUT") {
            return;
        }
        removeHighlighted();
    }
};

var addEpmtyMessage = function(container) {
    if (container != null && container.wrappers.length === 0) {
        if (container.parent === null) {
            container.addWrappers([ 0, new eqEd.TopLevelEmptyContainerWrapper(container.symbolSizeConfig) ]);
            container.updateAll();
            addCursorAtIndex(container, 0);
        } else {
            container.addWrappers([ 0, new eqEd.SquareEmptyContainerWrapper(container.symbolSizeConfig) ]);
            container.updateAll();
            addCursorAtIndex(container.wrappers[0].childContainers[0], 0);
        }
    }
    if (!$(".eqEdWrapper").length && window.emptyMessage) {
        var topLevelEmptyContainerWrapper = new eqEd.TopLevelEmptyContainerWrapper(symbolSizeConfig, window.emptyMessage);
        container.addWrappers([ 0, topLevelEmptyContainerWrapper ]);
        topLevelEmptyContainerWrapper.updateAll();
    }
};

var applyHighlighted = function() {
    if (!$(".highlighted").length) {
        return;
    }
    var highlight = $(".highlight");
    var eqEdContainer = $(".eqEdContainer");
    var highlightEndPosition = highlight.offset().left + highlight.width();
    removeHighlight();
    addCursor(eqEdContainer.data("eqObject"), highlightEndPosition);
};

var removeHighlighted = function() {
    var highlighted = $(".highlighted");
    var container = highlighted.parent().data("eqObject");
    if (!(container.parent instanceof eqEd.EmptyContainerWrapper)) {
        var deleteWrappers;
        if (highlightStartIndex < highlightEndIndex) {
            deleteWrappers = _.range(highlightStartIndex, highlightEndIndex);
        } else {
            deleteWrappers = _.range(highlightEndIndex, highlightStartIndex);
        }
        eqEd.Container.prototype.removeWrappers.apply(container, deleteWrappers);
        container.updateAll();
        highlightStartIndex = highlightStartIndex < highlightEndIndex ? highlightStartIndex : highlightEndIndex;
        updateHighlightFormatting(container, highlightStartIndex);
        addCursorAtIndex(container, highlightStartIndex);
    }
    addEpmtyMessage(container);
};

var insertChar = function(character, symbolSizeConfig) {
    if (MathJax_MathItalic.indexOf(character) > -1) {
        var symbolWrapper = new eqEd.SymbolWrapper(character, "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    }
    if (MathJax_Main.indexOf(character) > -1) {
        var symbolWrapper = new eqEd.SymbolWrapper(character, "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    }
    if (character in operatorCharactersMap) {
        var operatorWrapper = new eqEd.OperatorWrapper(operatorCharactersMap[character], "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    }
    if (bracketCharacters.indexOf(character) > -1) {
        var bracketWrapper = new eqEd.BracketWrapper(bracketCharactersMap[character], symbolSizeConfig);
        insertWrapper(bracketWrapper);
    }
    if (character === "\\") {
        var operatorWrapper = new eqEd.OperatorWrapper("∖", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    }
    if (character === "'") {
        var operatorWrapper = new eqEd.OperatorWrapper("'", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    }
    if (character === "^") {
        var superscriptWrapper = new eqEd.SuperscriptWrapper(symbolSizeConfig);
        insertWrapper(superscriptWrapper);
    }
    if (character === "_") {
        var subscriptWrapper = new eqEd.SubscriptWrapper(symbolSizeConfig);
        insertWrapper(subscriptWrapper);
    }
};

var setupMenuEvents = function(symbolSizeConfig) {
    $(document).on("mousedown", "#stackedFractionButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var stackedFractionWrapper = new eqEd.StackedFractionWrapper(symbolSizeConfig);
        insertWrapper(stackedFractionWrapper);
    });
    $(document).on("mousedown", "#superscriptButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var isSuperscript = $(".activeContainer").closest(".superscriptContainer").length;
        if (!isSuperscript) {
            var superscriptWrapper = new eqEd.SuperscriptWrapper(symbolSizeConfig);
            insertWrapper(superscriptWrapper);
        }
    });
    $(document).on("mousedown", "#subscriptButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var isSubscript = $(".activeContainer").closest(".subscriptContainer").length;
        if (!isSubscript) {
            var subscriptWrapper = new eqEd.SubscriptWrapper(symbolSizeConfig);
            insertWrapper(subscriptWrapper);
        }
    });
    $(document).on("mousedown", "#superscriptAndSubscriptButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var isSuperscript = $(".activeContainer").closest(".superscriptContainer").length;
        var isSubscript = $(".activeContainer").closest(".subscriptContainer").length;
        if (!isSuperscript && !isSubscript) {
            var superscriptAndSubscriptWrapper = new eqEd.SuperscriptAndSubscriptWrapper(symbolSizeConfig);
            insertWrapper(superscriptAndSubscriptWrapper);
        }
    });
    $(document).on("mousedown", "#squareRootButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var squareRootWrapper = new eqEd.SquareRootWrapper(symbolSizeConfig);
        insertWrapper(squareRootWrapper);
    });
    $(document).on("mousedown", "#nthRootButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var nthRootButton = new eqEd.NthRootWrapper(symbolSizeConfig);
        insertWrapper(nthRootButton);
    });
    $(document).on("mousedown", "#leftAngleBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var leftAngleBracketWrapper = new eqEd.BracketWrapper("leftAngleBracket", symbolSizeConfig);
        insertWrapper(leftAngleBracketWrapper);
    });
    $(document).on("mousedown", "#rightAngleBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var rightAngleBracketWrapper = new eqEd.BracketWrapper("rightAngleBracket", symbolSizeConfig);
        insertWrapper(rightAngleBracketWrapper);
    });
    $(document).on("mousedown", "#leftFloorBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var leftFloorBracketWrapper = new eqEd.BracketWrapper("leftFloorBracket", symbolSizeConfig);
        insertWrapper(leftFloorBracketWrapper);
    });
    $(document).on("mousedown", "#rightFloorBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var rightFloorBracketWrapper = new eqEd.BracketWrapper("rightFloorBracket", symbolSizeConfig);
        insertWrapper(rightFloorBracketWrapper);
    });
    $(document).on("mousedown", "#leftCeilBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var leftCeilBracketWrapper = new eqEd.BracketWrapper("leftCeilBracket", symbolSizeConfig);
        insertWrapper(leftCeilBracketWrapper);
    });
    $(document).on("mousedown", "#rightCeilBracketButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var rightCeilBracketWrapper = new eqEd.BracketWrapper("rightCeilBracket", symbolSizeConfig);
        insertWrapper(rightCeilBracketWrapper);
    });
    $(document).on("mousedown", "#parenthesesBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var parenthesesBracketPair = new eqEd.BracketPairWrapper("parenthesisBracket", symbolSizeConfig);
        insertWrapper(parenthesesBracketPair);
    });
    $(document).on("mousedown", "#squareBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var squareBracketPair = new eqEd.BracketPairWrapper("squareBracket", symbolSizeConfig);
        insertWrapper(squareBracketPair);
    });
    $(document).on("mousedown", "#curlyBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var curlyBracketPair = new eqEd.BracketPairWrapper("curlyBracket", symbolSizeConfig);
        insertWrapper(curlyBracketPair);
    });
    $(document).on("mousedown", "#angleBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var angleBracketPair = new eqEd.BracketPairWrapper("angleBracket", symbolSizeConfig);
        insertWrapper(angleBracketPair);
    });
    $(document).on("mousedown", "#floorBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var floorBracketPair = new eqEd.BracketPairWrapper("floorBracket", symbolSizeConfig);
        insertWrapper(floorBracketPair);
    });
    $(document).on("mousedown", "#ceilBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var ceilBracketPair = new eqEd.BracketPairWrapper("ceilBracket", symbolSizeConfig);
        insertWrapper(ceilBracketPair);
    });
    $(document).on("mousedown", "#absValBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var absValBracketPair = new eqEd.BracketPairWrapper("absValBracket", symbolSizeConfig);
        insertWrapper(absValBracketPair);
    });
    $(document).on("mousedown", "#normBracketPairButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var normBracketPair = new eqEd.BracketPairWrapper("normBracket", symbolSizeConfig);
        insertWrapper(normBracketPair);
    });
    $(document).on("mousedown", "#sumBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "sum", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#sumBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "sum", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#sumBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "sum", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCapBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCapBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCapBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCupBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCupBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigCupBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCapBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigSqCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCapBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigSqCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCapBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigSqCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCupBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigSqCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCupBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigSqCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigSqCupBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigSqCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#prodBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "prod", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#prodBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "prod", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#prodBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "prod", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#coProdBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "coProd", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#coProdBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "coProd", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#coProdBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "coProd", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigVeeBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigVee", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigVeeBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigVee", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigVeeBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigVee", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigWedgeBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, "bigWedge", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigWedgeBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, true, "bigWedge", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#bigWedgeBigOperatorNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(false, false, false, "bigWedge", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineSumBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "sum", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineSumBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "sum", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigCapBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigCapBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigCupBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigCupBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigSqCapBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigSqCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigSqCapBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigSqCap", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigSqCupBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigSqCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigSqCupBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigSqCup", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineProdBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "prod", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineProdBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "prod", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineCoProdBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "coProd", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineCoProdBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "coProd", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigVeeBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigVee", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigVeeBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigVee", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigWedgeBigOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, true, true, "bigWedge", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#inlineBigWedgeBigOperatorNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bigOperator = new eqEd.BigOperatorWrapper(true, false, true, "bigWedge", symbolSizeConfig);
        insertWrapper(bigOperator);
    });
    $(document).on("mousedown", "#integralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "single", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#integralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "single", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#integralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "single", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#doubleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "double", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#doubleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "double", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#doubleIntegralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "double", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#tripleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "triple", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#tripleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "triple", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#tripleIntegralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "triple", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "singleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "singleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourIntegralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "singleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourDoubleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "doubleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourDoubleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "doubleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourDoubleIntegralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "doubleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourTripleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, true, true, "tripleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourTripleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, true, "tripleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#contourTripleIntegralNoUpperNoLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(false, false, false, "tripleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "single", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "single", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineDoubleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "double", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineDoubleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "double", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineTripleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "triple", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineTripleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "triple", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "singleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "singleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourDoubleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "doubleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourDoubleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "doubleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourTripleIntegralButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, true, true, "tripleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#inlineContourTripleIntegralNoUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var integralWrapper = new eqEd.IntegralWrapper(true, false, true, "tripleContour", symbolSizeConfig);
        insertWrapper(integralWrapper);
    });
    $(document).on("mousedown", "#partialDifferentialButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var differentialWrapper = new eqEd.SymbolWrapper("∂", "MathJax_Main", symbolSizeConfig);
        insertWrapper(differentialWrapper);
    });
    $(document).on("mousedown", "#logButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("log", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#lnButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("ln", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#limButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("lim", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#maxButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("max", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#minButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("min", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#supButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("sup", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#infButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("inf", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#sinButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("sin", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#cosButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("cos", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#tanButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("tan", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#cotButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("cot", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#secButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("sec", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#cscButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("csc", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#sinhButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("sinh", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#coshButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("cosh", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#tanhButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("tanh", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#cothButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("coth", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#sechButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("sech", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#cschButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionWrapper("csch", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#limitButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var limitWrapper = new eqEd.LimitWrapper(symbolSizeConfig);
        insertWrapper(limitWrapper);
    });
    $(document).on("mousedown", "#maxLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionLowerWrapper("max", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#minLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionLowerWrapper("min", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#logLowerButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.LogLowerWrapper(symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#matrixButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        $("#rows").blur();
        $("#cols").blur();
        var rows = parseInt($("#rows").val());
        var cols = parseInt($("#cols").val());
        var matrixWrapper = new eqEd.MatrixWrapper(rows, cols, "center", symbolSizeConfig);
        insertWrapper(matrixWrapper);
    });
    $(document).on("mousedown", "#simultaneousEquationsButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var bracketWrapper = new eqEd.BracketWrapper("beginCases", symbolSizeConfig);
        insertWrapper(bracketWrapper);
        var simultaneousEquationsWrapper = new eqEd.SimultaneousEquationsWrapper(2, 1, "center", symbolSizeConfig);
        insertWrapper(simultaneousEquationsWrapper);
    });
    $(document).on("mousedown", "#dotAccentButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var accentWrapper = new eqEd.AccentWrapper("˙", "MathJax_Main", symbolSizeConfig);
        insertWrapper(accentWrapper);
    });
    $(document).on("mousedown", "#hatAccentButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var accentWrapper = new eqEd.AccentWrapper("^", "MathJax_Main", symbolSizeConfig);
        insertWrapper(accentWrapper);
    });
    $(document).on("mousedown", "#vectorAccentButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var accentWrapper = new eqEd.AccentWrapper("⃗", "MathJax_Main", symbolSizeConfig);
        insertWrapper(accentWrapper);
    });
    $(document).on("mousedown", "#barAccentButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var accentWrapper = new eqEd.AccentWrapper("¯", "MathJax_Main", symbolSizeConfig);
        insertWrapper(accentWrapper);
    });
    $(document).on("mousedown", "#gammaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Γ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#deltaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Δ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#thetaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Θ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#lambdaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Λ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#xiUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Ξ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#piUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Π", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#sigmaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Σ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#upsilonUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Υ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#phiUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Φ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#psiUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Ψ", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#omegaUpperButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("Ω", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#rightArrowButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("→", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#rightleftharpoonsButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("⇌", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#alphaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("α", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#betaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("β", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#gammaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("γ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#deltaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("δ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varEpsilonButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ε", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#epsilonButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ϵ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#zetaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ζ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#etaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("η", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#thetaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("θ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varThetaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ϑ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#iotaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ι", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#kappaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("κ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#lambdaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("λ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#muButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("μ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#nuButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ν", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#xiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ξ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#piButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("π", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varPiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ϖ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#rhoButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ρ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varRhoButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ϱ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#sigmaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("σ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varSigmaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ς", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#tauButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("τ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#upsilonButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("υ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#varPhiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("φ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#phiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ϕ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#chiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("χ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#psiButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ψ", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#omegaButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("ω", "MathJax_MathItalic", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#lessThanOrEqualToButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≤", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#greaterThanOrEqualToButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≥", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#circleOperatorButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("◦", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#approxEqualToButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≈", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#belongsToButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∈", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#notBelongsToButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∉", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#includesButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∋", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#timesButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("×", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#pmButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("±", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#wedgeButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∧", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#veeButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∨", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#setMinusButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∖", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#varNothingButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∅", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#equivButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≡", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#congButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≅", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#neqButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≠", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#simButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∼", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#proptoButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∝", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#precButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≺", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#precEqButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⪯", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#subsetButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⊂", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#subsetEqButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⊆", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#supsetButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⊃", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#succButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("≻", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#succEqButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⪰", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#perpButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("⊥", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#midButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∣", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#parallelButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∥", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#colonButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper(":", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#partialButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("∂", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#infinityButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("∞", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#rightArrowHigherButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var functionWrapper = new eqEd.FunctionHigherWrapper("→", "MathJax_Main", symbolSizeConfig);
        insertWrapper(functionWrapper);
    });
    $(document).on("mousedown", "#sphericalAngleButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var symbolWrapper = new eqEd.SymbolWrapper("∢", "MathJax_Main", symbolSizeConfig);
        insertWrapper(symbolWrapper);
    });
    $(document).on("mousedown", "#capButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∩", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#cupButton", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OperatorWrapper("∪", "MathJax_Main", symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
    $(document).on("mousedown", "#overRightArrow", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var operatorWrapper = new eqEd.OverRightArrowWrapper(symbolSizeConfig);
        insertWrapper(operatorWrapper);
    });
};

$(document).on("click", ".tabs .tab-links a", function(e) {
    var currentAttrValue = $(this).attr("href");
    $(".tabs " + currentAttrValue).show().siblings().hide();
    $(this).parent("li").addClass("active").siblings().removeClass("active");
    e.preventDefault();
});

eqEd.Clipboard = function() {
    this.className = "eqEd.Clipboard";
    this.contents = [];
};

(function() {
    eqEd.Clipboard.prototype.constructor = eqEd.Clipboard;
    eqEd.Clipboard.prototype.copyWrappers = function(container, indexList) {
        this.contents = [];
        var maxIndex = indexList[indexList.getMaxIndex()];
        var minIndex = indexList[indexList.getMinIndex()];
        var copiedWrappers = [];
        for (var i = 0; i < indexList.length; i++) {
            copiedWrappers.push(container.wrappers[i].clone());
        }
        this.contents.push(copiedWrappers);
    };
    eqEd.Clipboard.prototype.paste = function() {
        var pastedContents = [];
        for (var i = 0; i < this.contents[this.contents.length - 1].length; i++) {
            pastedContents.push(this.contents[this.contents.length - 1][i].clone());
        }
        return pastedContents;
    };
})();

eqEd.SimultaneousEquationsWrapper = function(numRows, numCols, horAlign, symbolSizeConfig) {
    eqEd.Wrapper.call(this, symbolSizeConfig);
    this.className = "eqEd.SimultaneousEquationsWrapper";
    this.numRows = numRows;
    this.numCols = numCols;
    this.horAlign = horAlign;
    this.horGap = 1;
    this.vertGap = .25;
    if (this.numRows === 2 && this.numCols === 1) {
        this.padLeft = 0;
        this.padRight = 0;
    } else {
        this.padLeft = .25;
        this.padRight = .25;
    }
    this.domObj = this.buildDomObj();
    this.childContainers = [];
    this.matrixContainers = [];
    for (var i = 0; i < this.numRows; i++) {
        var row = [];
        for (var j = 0; j < this.numCols; j++) {
            var matrixContainer = new eqEd.MatrixContainer(i, j, this.symbolSizeConfig);
            matrixContainer.parent = this;
            this.domObj.append(matrixContainer.domObj);
            row.push(matrixContainer);
            this.childContainers.push(matrixContainer);
        }
        this.matrixContainers.push(row);
    }
    var rowTopAligns = [];
    this.properties.push(new Property(this, "rowTopAligns", rowTopAligns, {
        get: function() {
            return rowTopAligns;
        },
        set: function(value) {
            rowTopAligns = value;
        },
        compute: function() {
            var rowTopAlignsVal = [];
            for (var i = 0; i < this.numRows; i++) {
                var rowTopAlignsList = [];
                for (var j = 0; j < this.numCols; j++) {
                    var topAlign = 0;
                    if (this.matrixContainers[i][j].wrappers.length > 0) {
                        topAlign = this.matrixContainers[i][j].wrappers[this.matrixContainers[i][j].maxTopAlignIndex].topAlign;
                    }
                    rowTopAlignsList.push(topAlign);
                }
                rowTopAlignsVal.push(rowTopAlignsList.max());
            }
            return rowTopAlignsVal;
        },
        updateDom: function() {}
    }));
    var rowBottomAligns = [];
    this.properties.push(new Property(this, "rowBottomAligns", rowBottomAligns, {
        get: function() {
            return rowBottomAligns;
        },
        set: function(value) {
            rowBottomAligns = value;
        },
        compute: function() {
            var rowBottomAlignsVal = [];
            for (var i = 0; i < this.numRows; i++) {
                var rowBottomAlignsList = [];
                for (var j = 0; j < this.numCols; j++) {
                    var bottomAlign = 0;
                    if (this.matrixContainers[i][j].wrappers.length > 0) {
                        bottomAlign = this.matrixContainers[i][j].wrappers[this.matrixContainers[i][j].maxBottomAlignIndex].bottomAlign;
                    }
                    rowBottomAlignsList.push(bottomAlign);
                }
                rowBottomAlignsVal.push(rowBottomAlignsList.max());
            }
            return rowBottomAlignsVal;
        },
        updateDom: function() {}
    }));
    var colWidths = [];
    this.properties.push(new Property(this, "colWidths", colWidths, {
        get: function() {
            return colWidths;
        },
        set: function(value) {
            colWidths = value;
        },
        compute: function() {
            var colWidthsVal = [];
            for (var i = 0; i < this.numCols; i++) {
                var colWidthsList = [];
                for (var j = 0; j < this.numRows; j++) {
                    colWidthsList.push(this.matrixContainers[j][i].width);
                }
                colWidthsVal.push(colWidthsList.max());
            }
            return colWidthsVal;
        },
        updateDom: function() {}
    }));
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var widthVal = 0;
            for (var i = 0; i < this.numCols; i++) {
                widthVal += this.colWidths[i];
            }
            widthVal += (this.numCols - 1) * this.horGap * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var matrixHeight = 0;
    this.properties.push(new Property(this, "matrixHeight", matrixHeight, {
        get: function() {
            return matrixHeight;
        },
        set: function(value) {
            matrixHeight = value;
        },
        compute: function() {
            var fontHeight = this.symbolSizeConfig.height[this.parent.fontSize];
            var matrixHeightVal = 0;
            for (var i = 0; i < this.numRows; i++) {
                matrixHeightVal += this.rowTopAligns[i] + this.rowBottomAligns[i];
            }
            matrixHeightVal += (this.numRows - 1) * this.vertGap * fontHeight;
            return matrixHeightVal;
        },
        updateDom: function() {}
    }));
    var topAlign = 0;
    this.properties.push(new Property(this, "topAlign", topAlign, {
        get: function() {
            return topAlign;
        },
        set: function(value) {
            topAlign = value;
        },
        compute: function() {
            return .5 * this.matrixHeight;
        },
        updateDom: function() {}
    }));
    var bottomAlign = 0;
    this.properties.push(new Property(this, "bottomAlign", bottomAlign, {
        get: function() {
            return bottomAlign;
        },
        set: function(value) {
            bottomAlign = value;
        },
        compute: function() {
            return .5 * this.matrixHeight;
        },
        updateDom: function() {}
    }));
};

(function() {
    eqEd.SimultaneousEquationsWrapper.prototype = Object.create(eqEd.Wrapper.prototype);
    eqEd.SimultaneousEquationsWrapper.prototype.constructor = eqEd.SimultaneousEquationsWrapper;
    eqEd.SimultaneousEquationsWrapper.prototype.buildDomObj = function() {
        return new eqEd.WrapperDom(this, '<div class="eqEdWrapper rightBracket SimultaneousEquationsWrapper "></div>');
    };
    eqEd.SimultaneousEquationsWrapper.prototype.clone = function() {
        var copy = new this.constructor(this.numRows, this.numCols, this.horAlign, this.symbolSizeConfig);
        console.log(this.symbolSizeConfig);
        copy.domObj = copy.buildDomObj();
        copy.childContainers = [];
        copy.matrixContainers = [];
        for (var i = 0; i < copy.numRows; i++) {
            var row = [];
            for (var j = 0; j < copy.numCols; j++) {
                var matrixContainer = this.matrixContainers[i][j].clone();
                matrixContainer.parent = copy;
                copy.domObj.append(matrixContainer.domObj);
                row.push(matrixContainer);
                copy.childContainers.push(matrixContainer);
            }
            copy.matrixContainers.push(row);
        }
        return copy;
    };
    eqEd.SimultaneousEquationsWrapper.prototype.buildJsonObj = function() {
        var jsonObj = {
            type: this.className.substring(5, this.className.length - 7),
            value: null
        };
        var jsonMatrixContainers = [];
        for (var i = 0; i < this.matrixContainers.length; i++) {
            var jsonRow = [];
            for (var j = 0; j < this.matrixContainers[i].length; j++) {
                jsonRow.push(this.matrixContainers[i][j].buildJsonObj());
            }
            jsonMatrixContainers.push(jsonRow);
        }
        jsonObj.operands = {
            elements: jsonMatrixContainers
        };
        return jsonObj;
    };
    eqEd.SimultaneousEquationsWrapper.constructFromJsonObj = function(jsonObj, symbolSizeConfig) {
        var numRows = jsonObj.operands.elements.length;
        var numCols = jsonObj.operands.elements[0].length;
        var SimultaneousEquationsWrapper = new eqEd.SimultaneousEquationsWrapper(numRows, numCols, "center", symbolSizeConfig);
        for (var i = 0; i < jsonObj.operands.elements.length; i++) {
            var matrixRow = jsonObj.operands.elements[i];
            for (var j = 0; j < matrixRow.length; j++) {
                var matrixEntry = matrixRow[j];
                for (var k = 0; k < matrixEntry.length; k++) {
                    var innerWrapperCtor = eqEd.Equation.JsonTypeToConstructor(matrixEntry[k].type);
                    var innerWrapper = innerWrapperCtor.constructFromJsonObj(matrixEntry[k], symbolSizeConfig);
                    SimultaneousEquationsWrapper.matrixContainers[i][j].addWrappers([ k, innerWrapper ]);
                }
            }
        }
        return SimultaneousEquationsWrapper;
    };
})();

eqEd.BeginCases = function(symbolSizeConfig) {
    eqEd.LeftBracket.call(this, symbolSizeConfig);
    this.className = "eqEd.BeginCases";
    this.matchingBracketCtor = eqEd.RightCurlyBracket;
    this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Main", this.symbolSizeConfig);
    this.topBracket = null;
    this.middleBrackets = [];
    this.bottomBracket = null;
    this.wholeBracket.parent = this;
    this.domObj = this.buildDomObj();
    this.domObj.append(this.wholeBracket.domObj);
    this.children = [ this.wholeBracket ];
    var width = 0;
    this.properties.push(new Property(this, "width", width, {
        get: function() {
            return width;
        },
        set: function(value) {
            width = value;
        },
        compute: function() {
            var widthVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            widthVal = .666666 * fontHeight;
            return widthVal;
        },
        updateDom: function() {
            this.domObj.updateWidth(this.width);
        }
    }));
    var height = 0;
    this.properties.push(new Property(this, "height", height, {
        get: function() {
            return height;
        },
        set: function(value) {
            height = value;
        },
        compute: function() {
            var heightVal = 0;
            var fontHeight = this.symbolSizeConfig.height[this.parent.parent.fontSize];
            heightVal = 3 * fontHeight;
            return heightVal;
        },
        updateDom: function() {
            this.domObj.updateHeight(this.height);
        }
    }));
};

(function() {
    eqEd.BeginCases.prototype = Object.create(eqEd.LeftBracket.prototype);
    eqEd.BeginCases.prototype.constructor = eqEd.BeginCases;
    eqEd.BeginCases.prototype.buildDomObj = function() {
        return new eqEd.EquationDom(this, '<div class="bracket leftBracket beginCases"></div>');
    };
    eqEd.BeginCases.prototype.updateBracketStructure = function() {
        this.domObj.empty();
        this.wholeBracket = null;
        this.topBracket = null;
        this.middleBrackets = [];
        this.bottomBracket = null;
        this.children = [];
        this.wholeBracket = new eqEd.LeftCurlyWholeBracket("MathJax_Size4", this.symbolSizeConfig);
        this.wholeBracket.parent = this;
        this.domObj.append(this.wholeBracket.domObj);
        this.children = [ this.wholeBracket ];
    };
})();

function replaceTrigonometricFunctionsTypos(latexString) {
    latexString = latexString.replace(new RegExp("(^|[^\\\\a-z])sin", "g"), "$1\\sin ");
    latexString = latexString.replace(new RegExp("(^|[^\\\\a-z])tan", "g"), "$1\\tan ");
    latexString = latexString.replace(new RegExp("(^|[^\\\\a-z])cot", "g"), "$1\\cot ");
    latexString = latexString.replace(new RegExp("(^|[^\\\\a-z])cos", "g"), "$1\\cos ");
    latexString = latexString.replace(new RegExp("~~", "g"), "~").replace(new RegExp(" ~", "g"), " ");
    if (latexString.charAt(0) === "~") {
        latexString = latexString.substring(1, latexString.length);
    }
    return latexString;
}

var generateLatex = function(expr) {
    var latexString = "";
    for (var i = 0; i < expr.length; i++) {
        var wrapper = expr[i];
        switch (wrapper.type) {
          case "Symbol":
            latexString += symbolToLatex(wrapper);
            break;

          case "BigOperator":
            latexString += bigOperatorToLatex(wrapper);
            break;

          case "Function":
            latexString += functionToLatex(wrapper);
            break;

          case "Bracket":
            latexString += bracketToLatex(wrapper);
            break;

          case "Operator":
            latexString += operatorToLatex(wrapper);
            break;

          case "BracketPair":
            latexString += bracketPairToLatex(wrapper);
            break;

          case "Integral":
            latexString += integralToLatex(wrapper);
            break;

          case "Accent":
            latexString += accentToLatex(wrapper);
            break;

          case "FunctionLower":
            latexString += functionLowerToLatex(wrapper);
            break;

          case "FunctionHigher":
            latexString += functionHigherToLatex(wrapper);
            break;

          case "OverRightArrow":
            latexString += functionOverRightArrowToLatex(wrapper);
            break;

          case "Limit":
            latexString += limitToLatex(wrapper);
            break;

          case "LogLower":
            latexString += logLowerToLatex(wrapper);
            break;

          case "Matrix":
            latexString += matrixToLatex(wrapper);
            break;

          case "SimultaneousEquations":
            latexString += simultaneousEquationsToLatex(wrapper);
            break;

          case "NthRoot":
            latexString += nthRootToLatex(wrapper);
            break;

          case "SquareRoot":
            latexString += squareRootToLatex(wrapper);
            break;

          case "StackedFraction":
            latexString += stackedFractionToLatex(wrapper);
            break;

          case "Superscript":
            latexString += superscriptToLatex(wrapper);
            var endBraces = "";
            while (typeof expr[i + 1] !== "undefined" && expr[i + 1].type === "Superscript") {
                i++;
                latexString = latexString.substring(0, latexString.length - 1);
                endBraces += "}";
                latexString += superscriptToLatex(expr[i]);
            }
            latexString += endBraces;
            break;

          case "Subscript":
            latexString += subscriptToLatex(wrapper);
            var endBraces = "";
            while (typeof expr[i + 1] !== "undefined" && expr[i + 1].type === "Subscript") {
                i++;
                latexString = latexString.substring(0, latexString.length - 1);
                endBraces += "}";
                latexString += subscriptToLatex(expr[i]);
            }
            latexString += endBraces;
            break;

          case "SuperscriptAndSubscript":
            var superscripts = [];
            var subscripts = [];
            superscripts.push(wrapper.operands.superscript);
            subscripts.push(wrapper.operands.subscript);
            while (typeof expr[i + 1] !== "undefined" && expr[i + 1].type === "SuperscriptAndSubscript") {
                i++;
                superscripts.push(expr[i].operands.superscript);
                subscripts.push(expr[i].operands.subscript);
            }
            while (typeof expr[i + 1] !== "undefined" && expr[i + 1].type === "Superscript") {
                i++;
                superscripts.push(expr[i].operands.superscript);
            }
            while (typeof expr[i + 1] !== "undefined" && expr[i + 1].type === "Subscript") {
                i++;
                subscripts.push(expr[i].operands.subscript);
            }
            var supString = "";
            var supEndBraces = "";
            for (var j = 0; j < superscripts.length; j++) {
                supString += "^{" + generateLatex(superscripts[j]);
                supEndBraces += "}";
            }
            supString += supEndBraces;
            var subString = "";
            var subEndBraces = "";
            for (var j = 0; j < subscripts.length; j++) {
                subString += "_{" + generateLatex(subscripts[j]);
                subEndBraces += "}";
            }
            subString += subEndBraces;
            latexString += supString + subString;
            break;
        }
    }
    latexString = replaceTrigonometricFunctionsTypos(latexString);
    return latexString;
};

var symbolToLatex = function(expr) {
    var latexString = "";
    var symbolToLatexMappingWithNoSpaceAfter = {
        " ": "~"
    };
    var symbolToLatexMappingWithSpaceAfter = {
        "∂": "\\partial",
        "∞": "\\infty",
        "Γ": "\\Gamma",
        "Δ": "\\Delta",
        "Θ": "\\Theta",
        "Λ": "\\Lambda",
        "Ξ": "\\Xi",
        "Π": "\\Pi",
        "Σ": "\\Sigma",
        "Υ": "\\Upsilon",
        "Φ": "\\Phi",
        "Ψ": "\\Psi",
        "Ω": "\\Omega",
        "→": "\\rightarrow",
        "⇌": "\\rightleftharpoons",
        "α": "\\alpha",
        "β": "\\beta",
        "γ": "\\gamma",
        "δ": "\\delta",
        "ε": "\\varepsilon",
        "ϵ": "\\epsilon",
        "ζ": "\\zeta",
        "η": "\\eta",
        "θ": "\\theta",
        "ϑ": "\\vartheta",
        "ι": "\\iota",
        "κ": "\\kappa",
        "λ": "\\lambda",
        "μ": "\\mu",
        "ν": "\\nu",
        "ξ": "\\xi",
        "π": "\\pi",
        "ϖ": "\\varpi",
        "ρ": "\\rho",
        "ϱ": "\\varrho",
        "σ": "\\sigma",
        "ς": "\\varsigma",
        "τ": "\\tau",
        "υ": "\\upsilon",
        "φ": "\\varphi",
        "ϕ": "\\phi",
        "χ": "\\chi",
        "ψ": "\\psi",
        "ω": "\\omega",
        "ı": "\\imath",
        "ȷ": "\\jmath",
        "|": "\\mid",
        "∢": "\\sphericalangle"
    };
    if (typeof symbolToLatexMappingWithNoSpaceAfter[expr.value] !== "undefined") {
        latexString = symbolToLatexMappingWithNoSpaceAfter[expr.value];
    } else if (typeof symbolToLatexMappingWithSpaceAfter[expr.value] !== "undefined") {
        latexString = symbolToLatexMappingWithSpaceAfter[expr.value] + " ";
    } else {
        latexString = expr.value;
    }
    return latexString;
};

var bigOperatorToLatex = function(expr) {
    var latexString = "";
    var lowerLimitString = "";
    var upperLimitString = "";
    var operandString = "";
    if (typeof expr.operands.lowerLimit !== "undefined") {
        lowerLimitString = "_{" + generateLatex(expr.operands.lowerLimit) + "}";
    }
    if (typeof expr.operands.upperLimit !== "undefined") {
        upperLimitString = "^{" + generateLatex(expr.operands.upperLimit) + "}";
    }
    operandString = generateLatex(expr.operands.operand);
    var bigOperatorToLatexMapping = {
        sum: "\\sum",
        bigCap: "\\bigcap",
        bigCup: "\\bigcup",
        bigSqCap: "\\sqcap",
        bigSqCup: "\\bigsqcup",
        prod: "\\prod",
        coProd: "\\coprod",
        bigVee: "\\bigvee",
        bigWedge: "\\bigwedge"
    };
    latexString = bigOperatorToLatexMapping[expr.value] + lowerLimitString + upperLimitString + operandString;
    return latexString;
};

var functionToLatex = function(expr) {
    return "\\" + expr.value + " ";
};

var bracketToLatex = function(expr) {
    var latexString = "";
    var bracketToLatexMapping = {
        leftParenthesisBracket: "\\left (",
        rightParenthesisBracket: "\\right )",
        leftSquareBracket: "\\left [",
        rightSquareBracket: "\\right ]",
        leftCurlyBracket: "\\left\\{",
        beginCases: "\\begin{cases}",
        rightCurlyBracket: "\\right\\}",
        leftAngleBracket: "\\left\\langle",
        rightAngleBracket: "\\right\\rangle",
        leftFloorBracket: "\\left\\lfloor",
        rightFloorBracket: "\\right\\rfloor",
        leftCeilBracket: "\\left\\lceil",
        rightCeilBracket: "\\right\\rceil"
    };
    latexString = bracketToLatexMapping[expr.value] + " ";
    return latexString;
};

var operatorToLatex = function(expr) {
    var latexString = "";
    var operatorToLatexMappingWithNoSpaceAfter = {
        "+": "+",
        "−": "-",
        "=": "=",
        ">": ">",
        ":": ":",
        "⋅": "*",
        "'": "'"
    };
    var operatorToLatexMappingWithSpaceAfter = {
        "<": "<",
        "≤": "\\leqslant",
        "≥": "\\geqslant",
        "≈": "\\approx",
        "≡": "\\equiv",
        "≅": "\\cong",
        "≠": "\\neq",
        "∼": "\\sim",
        "∝": "\\propto",
        "≺": "\\prec",
        "⪯": "\\preceq",
        "⊂": "\\subset",
        "⊆": "\\subseteq",
        "⊃": "\\supset",
        "≻": "\\succ",
        "⪰": "\\succeq",
        "◦": "^{\\circ}",
        "∈": "\\in",
        "∉": "\\notin",
        "∋": "\\ni",
        "×": "\\times",
        "±": "\\pm",
        "∧": "\\wedge",
        "∨": "\\vee",
        "⊥": "\\perp",
        "∣": "\\mid",
        "∥": "\\parallel",
        "÷": "\\div",
        "∖": "\\setminus",
        "∅": "\\varnothing",
        "∩": "\\cap",
        "∪": "\\cup"
    };
    if (typeof operatorToLatexMappingWithNoSpaceAfter[expr.value] !== "undefined") {
        latexString = operatorToLatexMappingWithNoSpaceAfter[expr.value];
    } else if (typeof operatorToLatexMappingWithSpaceAfter[expr.value] !== "undefined") {
        latexString = operatorToLatexMappingWithSpaceAfter[expr.value] + " ";
    } else {
        latexString = expr.value;
    }
    return latexString;
};

var bracketPairToLatex = function(expr) {
    var latexString = "";
    var bracketedExpression = generateLatex(expr.operands.bracketedExpression);
    var bracketPairToLatexMapping = {
        parenthesisBracket: "\\left(" + bracketedExpression + "\\right)",
        squareBracket: "\\left[" + bracketedExpression + "\\right]",
        curlyBracket: "\\left\\{" + bracketedExpression + "\\right\\}",
        angleBracket: "\\left\\langle" + bracketedExpression + "\\right\\rangle",
        floorBracket: "\\left\\lfloor" + bracketedExpression + "\\right\\rfloor",
        ceilBracket: "\\left\\lceil" + bracketedExpression + "\\right\\rceil",
        absValBracket: "\\left|" + bracketedExpression + "\\right|",
        normBracket: "\\left\\|" + bracketedExpression + "\\right\\|"
    };
    latexString = bracketPairToLatexMapping[expr.value];
    return latexString;
};

var integralToLatex = function(expr) {
    var latexString = "";
    var lowerLimitString = "";
    var upperLimitString = "";
    if (typeof expr.operands.lowerLimit !== "undefined") {
        lowerLimitString = "_{" + generateLatex(expr.operands.lowerLimit) + "}";
    }
    if (typeof expr.operands.upperLimit !== "undefined") {
        upperLimitString = "^{" + generateLatex(expr.operands.upperLimit) + "}";
    }
    var integralToLatexMapping = {
        single: "\\int",
        double: "\\iint",
        triple: "\\iiint",
        singleContour: "\\oint",
        doubleContour: "\\oiint",
        tripleContour: "\\oiiint"
    };
    latexString = integralToLatexMapping[expr.value] + lowerLimitString + upperLimitString;
    return latexString;
};

var accentToLatex = function(expr) {
    var latexString = "";
    var accentedExpression = "{" + generateLatex(expr.operands.accentedExpression) + "}";
    var accentToLatexMapping = {
        "˙": "\\dot",
        "^": "\\hat",
        "⃗": "\\vec",
        "¯": "\\bar"
    };
    latexString = accentToLatexMapping[expr.value] + accentedExpression;
    return latexString;
};

var functionLowerToLatex = function(expr) {
    var latexString = "";
    var lower = "_{" + generateLatex(expr.operands.lower) + "}";
    latexString = "\\" + expr.value + lower;
    return latexString;
};

var functionHigherToLatex = function(expr) {
    var latexString = "";
    latexString = "\\overset{" + generateLatex(expr.operands.higher) + "}{" + symbolToLatex(expr) + "} ";
    return latexString;
};

var functionOverRightArrowToLatex = function(expr) {
    return "\\overrightarrow{" + generateLatex(expr.operands.lower) + "}";
};

var limitToLatex = function(expr) {
    var latexString = "\\lim";
    var lower = "_{" + generateLatex(expr.operands.left) + " \\to " + generateLatex(expr.operands.right) + "}";
    latexString += lower;
    return latexString;
};

var logLowerToLatex = function(expr) {
    var latexString = "\\log";
    var lower = "_{" + generateLatex(expr.operands.lower) + "}";
    latexString += lower;
    return latexString;
};

var matrixToLatex = function(expr) {
    var latexString = "\\begin{array}{ccc}";
    for (var j = 0; j < expr.operands.elements.length; j++) {
        var row = expr.operands.elements[j];
        var rowString = "";
        for (var k = 0; k < row.length; k++) {
            rowString += generateLatex(row[k]) + " & ";
        }
        rowString = rowString.substring(0, rowString.length - 2) + "\\\\\r\n";
        latexString += rowString;
    }
    latexString += "\\end{array}";
    return latexString;
};

var simultaneousEquationsToLatex = function(expr) {
    var latexString = "";
    for (var j = 0; j < expr.operands.elements.length; j++) {
        var row = expr.operands.elements[j];
        var rowString = "";
        for (var k = 0; k < row.length; k++) {
            rowString += generateLatex(row[k]) + " & ";
        }
        rowString = rowString.substring(0, rowString.length - 2);
        if (j < expr.operands.elements.length - 1) {
            rowString += "\\\\";
        }
        latexString += rowString;
    }
    latexString += "\\end{cases}";
    return latexString;
};

var nthRootToLatex = function(expr) {
    var latexString = "\\sqrt";
    var degree = "[" + generateLatex(expr.operands.degree) + "]";
    var radicand = "{" + generateLatex(expr.operands.radicand) + "}";
    latexString += degree + radicand;
    return latexString;
};

var squareRootToLatex = function(expr) {
    var latexString = "\\sqrt";
    var radicand = "{" + generateLatex(expr.operands.radicand) + "}";
    latexString += radicand;
    return latexString;
};

var stackedFractionToLatex = function(expr) {
    var latexString = "\\frac";
    var numerator = "{" + generateLatex(expr.operands.numerator) + "}";
    var denominator = "{" + generateLatex(expr.operands.denominator) + "}";
    latexString += numerator + denominator;
    return latexString;
};

var subscriptToLatex = function(expr) {
    var latexString = "";
    var subscript = "_{" + generateLatex(expr.operands.subscript) + "}";
    latexString += subscript;
    return latexString;
};

var superscriptToLatex = function(expr) {
    var latexString = "";
    var superscript = "^{" + generateLatex(expr.operands.superscript) + "}";
    latexString += superscript;
    return latexString;
};

var MathJax_MathItalic = [ "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M", " " ];

var MathJax_Main = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "!", "$", "%", ".", ",", ";" ];

var operatorCharacters = [ "*", "-", "=", "+", "/", "<", ">" ];

var operatorCharactersMap = {
    "-": "−",
    "/": "÷",
    "*": "⋅",
    "=": "=",
    "+": "+",
    "<": "<",
    ">": ">",
    ":": ":"
};

var bracketCharacters = [ "(", ")", "[", "]", "{", "}", "|" ];

var bracketCharactersMap = {
    "(": "leftParenthesisBracket",
    ")": "rightParenthesisBracket",
    "[": "leftSquareBracket",
    "]": "rightSquareBracket",
    "{": "leftCurlyBracket",
    "}": "rightCurlyBracket",
    "|": null
};

var generateLatexToEditor = function(expr, symbolSizeConfig) {
    var i = 0;
    while (i < expr.length) {
        if (MathJax_MathItalic.indexOf(expr[i]) > -1) {
            i += handleSymbol(expr[i], expr[i], "MathJax_MathItalic", symbolSizeConfig);
        } else if (MathJax_Main.indexOf(expr[i]) > -1) {
            i += handleSymbol(expr[i], expr[i], "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 5) == "\\mid ") {
            i += handleSymbol("\\mid ", "|", "MathJax_Main", symbolSizeConfig);
        } else if (expr[i] in operatorCharactersMap) {
            i += handleOperator(expr[i], operatorCharactersMap[expr[i]], "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\left (") {
            i += handleBracket("\\left (", bracketCharactersMap["("], symbolSizeConfig);
        } else if (expr.substring(i, i + 8) == "\\right )") {
            i += handleBracket("\\right )", bracketCharactersMap[")"], symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\left [") {
            i += handleBracket("\\left [", bracketCharactersMap["["], symbolSizeConfig);
        } else if (expr.substring(i, i + 8) == "\\right ]") {
            i += handleBracket("\\right ]", bracketCharactersMap["]"], symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\left(") {
            i += handleBracket("\\left (", bracketCharactersMap["("], symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\right)") {
            i += handleBracket("\\right )", bracketCharactersMap[")"], symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\left[") {
            i += handleBracket("\\left [", bracketCharactersMap["["], symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\right]") {
            i += handleBracket("\\right ]", bracketCharactersMap["]"], symbolSizeConfig);
        } else if (expr.substring(i, i + 1) == "(") {
            i += handleBracket("(", bracketCharactersMap["("], symbolSizeConfig);
        } else if (expr.substring(i, i + 1) == ")") {
            i += handleBracket(")", bracketCharactersMap[")"], symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\left\\{") {
            i += handleBracket("\\left\\{", bracketCharactersMap["{"], symbolSizeConfig);
        } else if (expr.substring(i, i + 8) == "\\right\\}") {
            i += handleBracket("\\right\\", bracketCharactersMap["}"], symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\left[") {
            i += handleBracket("\\left[", bracketCharactersMap["["], symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\right]") {
            i += handleBracket("\\right]", bracketCharactersMap["]"], symbolSizeConfig);
        } else if (expr.substring(i, i + 13) == "\\begin{cases}") {
            i += handleCases(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 12) == "\\left\\langle") {
            i += handleBracket("\\left\\langle", "leftAngleBracket", symbolSizeConfig);
        } else if (expr.substring(i, i + 13) == "\\right\\rangle") {
            i += handleBracket("\\right\\rangle", "rightAngleBracket", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\left|") {
            i += handleAbs(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 6) === "\\frac{") {
            i += handleStackedFraction(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 8) == "^{\\circ}") {
            i += handleOperator("^{\\circ}", "◦", "MathJax_Main", symbolSizeConfig);
        } else if (expr[i] === "^") {
            i += handleSuperscript(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\sqrt{") {
            i += handleSquareRoot(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\sqrt[") {
            i += handleNthRoot(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\overset{") {
            i += handleOverset(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + "\\overrightarrow{".length) == "\\overrightarrow{") {
            i += handleOverRightArrow(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\log_{") {
            i += handleLog(expr, i, symbolSizeConfig);
        } else if (expr.substring(i, i + 3) == "\\pi") {
            i += handleSymbol("\\pi", "π", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\leqslant") {
            i += handleOperator("\\leqslant", "≤", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\geqslant") {
            i += handleOperator("\\geqslant", "≥", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\neq") {
            i += handleOperator("\\neq", "≠", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\Omega") {
            i += handleSymbol("\\Omega", "Ω", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\supset") {
            i += handleOperator("\\supset", "⊃", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 10) == "\\parallel ") {
            i += handleOperator("\\parallel ", "∥", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\perp ") {
            i += handleOperator("\\perp ", "⊥", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 11) == "\\rightarrow") {
            i += handleSymbol("\\rightarrow", "→", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\log") {
            i += handleFunction("\\log", "log", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\sin") {
            i += handleFunction("\\sin", "sin", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\cos") {
            i += handleFunction("\\cos", "cos", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\tan") {
            i += handleFunction("\\tan", "tan", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\cot") {
            i += handleFunction("\\cot", "cot", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 3) == "\\ln") {
            i += handleFunction("\\ln", "ln", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 15) == "\\sphericalangle") {
            i += handleSymbol("\\sphericalangle", "∢", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\infty") {
            i += handleSymbol("\\infty", "∞", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\subset") {
            i += handleOperator("\\subset", "⊂", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 3) == "\\in") {
            i += handleOperator("\\in", "∈", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 3) == "\\ni") {
            i += handleOperator("\\ni", "∋", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\notin") {
            i += handleOperator("\\notin", "∉", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\wedge") {
            i += handleOperator("\\wedge", "∧", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\vee") {
            i += handleOperator("\\vee", "∨", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\setminus") {
            i += handleOperator("\\setminus", "∖", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 11) == "\\varnothing") {
            i += handleOperator("\\varnothing", "∅", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\approx") {
            i += handleOperator("\\approx", "≈", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\div") {
            i += handleOperator("\\div", "÷", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\cap") {
            i += handleOperator("\\cap", "∩", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\cup") {
            i += handleOperator("\\cup", "∪", "MathJax_Main", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\Phi") {
            i += handleSymbol("\\Phi", "Φ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\alpha") {
            i += handleSymbol("\\alpha", "α", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 5) == "\\beta") {
            i += handleSymbol("\\beta", "β", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 4) == "\\eta") {
            i += handleSymbol("\\eta", "η", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\gamma") {
            i += handleSymbol("\\gamma", "γ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\Gamma") {
            i += handleSymbol("\\Gamma", "Γ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\delta") {
            i += handleSymbol("\\delta", "δ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\Delta") {
            i += handleSymbol("\\Delta", "Δ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\lambda") {
            i += handleSymbol("\\lambda", "λ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 7) == "\\Lambda") {
            i += handleSymbol("\\Lambda", "Λ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 3) == "\\mu") {
            i += handleSymbol("\\mu", "μ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 1) == "~") {
            i += handleSymbol("~", " ", "MathJax_MathItalic", symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\bigcap_{") {
            i += handleBigOperator(expr, "\\bigcap_{", i, "bigCap", symbolSizeConfig);
        } else if (expr.substring(i, i + 9) == "\\bigcup_{") {
            i += handleBigOperator(expr, "\\bigcup_{", i, "bigCup", symbolSizeConfig);
        } else if (expr.substring(i, i + 6) == "\\sum_{") {
            i += handleBigOperator(expr, "\\sum_{", i, "sum", symbolSizeConfig);
        } else if (expr.substring(i, i + 2) == "_{") {
            i += handleSubscript(expr, "_{", i, symbolSizeConfig);
        } else {
            i++;
        }
    }
    mouseDown = false;
};

function checkBracket(string, charStart, charEnd) {
    var count = 0;
    for (var i = 0; i < string.length; i++) {
        if (string[i] === charStart) {
            count++;
        }
        if (string[i] === charEnd) {
            count--;
        }
        if (count === -1) {
            return i;
        }
    }
    return 0;
}

function checkBracketWithEndedString(string, charStart, stringEnd) {
    var count = 0;
    var closeBracketIndex = 0;
    for (var i = 0; i < string.length; i++) {
        if (string[i] === charStart) {
            count++;
        }
        if (string.substr(i, string.length).indexOf(stringEnd)) {
            count--;
            closeBracketIndex++;
        }
        if (count === -1) {
            return getPosition(string, stringEnd, closeBracketIndex);
        }
    }
    return 0;
}

function getPosition(string, subString, index) {
    return string.split(subString, index).join(subString).length;
}

function goToParentWraper2() {}

function goToParentWraper() {
    var lastChild = $(".eqEdContainer  .activeContainer ").parent();
    var parent = lastChild.parent();
    clearOnMouseDown();
    parent.addClass("activeContainer");
    var container = parent.data("eqObject");
    addHighlight(container);
    var characterClickPos = lastChild.offset().left - parent.offset().left + lastChild.width();
    addCursor(container, characterClickPos);
}

function handleSymbol(latex, symbol, cssClass, symbolSizeConfig) {
    var symbolWrapper = new eqEd.SymbolWrapper(symbol, cssClass, symbolSizeConfig);
    insertWrapper(symbolWrapper);
    return latex.length;
}

function handleSubscript(expr, latex, currentIndex, symbolSizeConfig) {
    var symbolWrapper = new eqEd.SubscriptWrapper(symbolSizeConfig);
    insertWrapper(symbolWrapper);
    var substring = expr.substring(currentIndex + latex.length, expr.length);
    var subscriptSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(subscriptSubstring, symbolSizeConfig);
    goToParentWraper();
    return latex.length + subscriptSubstring.length;
}

function handleFunction(latex, symbol, cssClass, symbolSizeConfig) {
    var functionWrapper = new eqEd.FunctionWrapper(symbol, cssClass, symbolSizeConfig);
    insertWrapper(functionWrapper);
    return latex.length;
}

function handleOperator(latex, symbol, cssClass, symbolSizeConfig) {
    var operatorWrapper = new eqEd.OperatorWrapper(symbol, cssClass, symbolSizeConfig);
    insertWrapper(operatorWrapper);
    return latex.length;
}

function handleBracket(latex, symbol, symbolSizeConfig) {
    var bracketWrapper = new eqEd.BracketWrapper(symbol, symbolSizeConfig);
    insertWrapper(bracketWrapper);
    return latex.length;
}

function handleBigOperator(expr, latex, currentIndex, operator, symbolSizeConfig) {
    var bigOperator = new eqEd.BigOperatorWrapper(false, true, true, operator, symbolSizeConfig);
    insertWrapper(bigOperator);
    var substring = expr.substring(currentIndex + latex.length, expr.length);
    var lowerLatexSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    substring = substring.substring(lowerLatexSubstring.length + 3);
    var upperLatexSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(upperLatexSubstring, symbolSizeConfig);
    var characterClickPos = 1;
    var nextWrapper = $(".bigOperatorLowerLimitContainer > div:nth-child(1) > div:nth-child(1)").last();
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    var container = nextWrapper.data("eqObject");
    addHighlight(container);
    addCursor(container, characterClickPos);
    generateLatexToEditor(lowerLatexSubstring, symbolSizeConfig);
    nextWrapper = $(".bigOperatorOperandContainer > div:nth-child(1) > div:nth-child(1)").last();
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    container = nextWrapper.data("eqObject");
    addHighlight(container);
    addCursor(container, characterClickPos);
    var netLatexSubstring = substring.replace(upperLatexSubstring + "}", "");
    generateLatexToEditor(netLatexSubstring ? netLatexSubstring : " ", symbolSizeConfig);
    goToParentWraper();
    return latex.length + lowerLatexSubstring.length + 2 + upperLatexSubstring.length + 2 + netLatexSubstring;
}

function handleCases(expr, currentIndex, symbolSizeConfig) {
    var bracketWrapper = new eqEd.BracketWrapper("beginCases", symbolSizeConfig);
    insertWrapper(bracketWrapper);
    var simultaneousEquationsWrapper = new eqEd.SimultaneousEquationsWrapper(2, 1, "center", symbolSizeConfig);
    insertWrapper(simultaneousEquationsWrapper);
    var substring = expr.substring(currentIndex + 13, expr.length);
    var substring2 = substring.substring(0, substring.indexOf("\\\\"));
    generateLatexToEditor(substring2, symbolSizeConfig);
    var selectedWrapper = $(".SimultaneousEquationsWrapper .activeContainer ");
    var nextWrapper = selectedWrapper.next().children().first().children().first();
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    var container = nextWrapper.data("eqObject");
    addHighlight(container);
    var characterClickPos = 1;
    addCursor(container, characterClickPos);
    substring = substring.substring(substring2.length + 2, substring.length);
    substring = substring.substring(0, substring.indexOf("\\end"));
    generateLatexToEditor(substring, symbolSizeConfig);
    goToParentWraper();
    return expr.length + 1;
}

function handleAbs(expr, currentIndex, symbolSizeConfig) {
    var bracketWrapper = new eqEd.BracketPairWrapper("absValBracket", symbolSizeConfig);
    insertWrapper(bracketWrapper);
    var substring = expr.substring(currentIndex + 6, expr.length);
    var latexSubstring = substring.substring(0, checkBracketWithEndedString(substring, "|", "\\right|"));
    generateLatexToEditor(latexSubstring, symbolSizeConfig);
    goToParentWraper();
    return "\\left|".length + latexSubstring.length + "\\right|".length;
}

function handleStackedFraction(expr, currentIndex, symbolSizeConfig) {
    var stackedFractionWrapper = new eqEd.StackedFractionWrapper(symbolSizeConfig);
    insertWrapper(stackedFractionWrapper);
    var substring = expr.substring(currentIndex + 6, expr.length);
    var substring2 = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(substring2, symbolSizeConfig);
    var length = "\\frac{".length + substring2.length;
    var selectedWrapper = $(".stackedFractionWrapper .activeContainer ");
    var nextWrapper = selectedWrapper.next().children().first().children().first();
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    var container = nextWrapper.data("eqObject");
    addHighlight(container);
    var characterClickPos = 1;
    addCursor(container, characterClickPos);
    substring = substring.substring(substring2.length + 2, substring.length);
    substring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(substring, symbolSizeConfig);
    goToParentWraper();
    return length + 2 + substring.length + 1;
}

function handleSuperscript(expr, currentIndex, symbolSizeConfig) {
    var superscriptWrapper = new eqEd.SuperscriptWrapper(symbolSizeConfig);
    insertWrapper(superscriptWrapper);
    var substring = expr.substring(currentIndex + 2, expr.length);
    substring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(substring, symbolSizeConfig);
    goToParentWraper();
    return "^".length + substring.length + 1;
}

function handleSquareRoot(expr, currentIndex, symbolSizeConfig) {
    var squareRootWrapper = new eqEd.SquareRootWrapper(symbolSizeConfig);
    insertWrapper(squareRootWrapper);
    var substring = expr.substring(currentIndex + 6, expr.length);
    var substring2 = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(substring2, symbolSizeConfig);
    goToParentWraper();
    return "\\sqrt{".length + substring2.length + 1;
}

function handleNthRoot(expr, currentIndex, symbolSizeConfig) {
    var nthRootButton = new eqEd.NthRootWrapper(symbolSizeConfig);
    insertWrapper(nthRootButton);
    var substring = expr.substring(currentIndex + 6, expr.length);
    var index = checkBracket(substring, "[", "]");
    var substring2 = substring.substring(0, index);
    generateLatexToEditor(substring2, symbolSizeConfig);
    var length = "\\sqrt[".length + substring2.length + 2;
    substring2 = substring.substring(index + 1, expr.length).replace("{", "");
    var endBracketIndex = checkBracket(substring2, "{", "}");
    substring2 = substring2.substring(0, endBracketIndex);
    var selectedWrapper = $(".eqEdContainer.activeContainer ");
    var nextWrapper = selectedWrapper.next().children().first().children().first();
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    var container = nextWrapper.data("eqObject");
    addHighlight(container);
    var characterClickPos = 1;
    addCursor(container, characterClickPos);
    generateLatexToEditor(substring2, symbolSizeConfig);
    goToParentWraper();
    return length + substring2.length + 1;
}

function handleOverset(expr, currentIndex, symbolSizeConfig) {
    var symbolWrapper = new eqEd.FunctionHigherWrapper("→", "MathJax_Main", symbolSizeConfig);
    insertWrapper(symbolWrapper);
    var substring = expr.substring(currentIndex + 9, expr.length);
    var upperLatexSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    substring = substring.substring(upperLatexSubstring.length + 2);
    var functionSymbolSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(upperLatexSubstring, symbolSizeConfig);
    goToParentWraper();
    return "\\overset{".length + upperLatexSubstring.length + 1 + functionSymbolSubstring.length + 1;
}

function handleOverRightArrow(expr, currentIndex, symbolSizeConfig) {
    var symbolExpLength = "\\overrightarrow{".length;
    var symbolWrapper = new eqEd.OverRightArrowWrapper(symbolSizeConfig);
    insertWrapper(symbolWrapper);
    var selectedWrapper = $(".overRightArrowWrapper .activeContainer ");
    var nextWrapper = selectedWrapper.parent().parent().parent().find(".overRightArrowBottomContainer .eqEdContainer");
    clearOnMouseDown();
    nextWrapper.addClass("activeContainer");
    var container = nextWrapper.data("eqObject");
    addHighlight(container);
    var characterClickPos = 1;
    addCursor(container, characterClickPos);
    var substring = expr.substring(currentIndex + symbolExpLength, expr.length);
    var upperLatexSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(upperLatexSubstring, symbolSizeConfig);
    removeHighlight();
    goToParentWraper();
    return symbolExpLength + upperLatexSubstring.length + 1;
}

function handleLog(expr, currentIndex, symbolSizeConfig) {
    var functionWrapper = new eqEd.LogLowerWrapper(symbolSizeConfig);
    insertWrapper(functionWrapper);
    var substring = expr.substring(currentIndex + 6, expr.length);
    var latexSubstring = substring.substring(0, checkBracket(substring, "{", "}"));
    generateLatexToEditor(latexSubstring, symbolSizeConfig);
    goToParentWraper();
    return "\\log_{".length + latexSubstring.length + 1;
}

function replaceMatches(string, regExp, repalcePattern) {
    if (regExp.test(string)) {
        string = string.replace(regExp, repalcePattern);
        return replaceMatches(string, regExp, repalcePattern);
    } else {
        return string;
    }
}

function cleanLatex(latex) {
    latex = latex.replace(/\\operatorname/g, "");
    latex = latex.replace(/\\overline/g, "");
    latex = latex.replace(/\\mathrm /g, "");
    latex = latex.replace(/\\overrightarrow/g, "");
    latex = latex.replace(/\\mathrm/g, "");
    latex = latex.replace(/\\mathbb/g, "");
    latex = latex.replace(/\\int/g, "");
    latex = latex.replace(/\\begin{.*?matrix}.*?\\end{.*?matrix}/g, "");
    latex = latex.replace(/\\triangle/g, "\\Delta");
    latex = latex.replace(/\\leq/g, "\\leqslant");
    latex = latex.replace(/\\geq/g, "\\geqslant");
    latex = latex.replace(/\\phi/g, "\\Phi");
    latex = latex.replace(/\\prod/g, "\\pi");
    latex = latex.replace(/\\sim/g, "~");
    latex = latex.replace(/\^\\circ/g, "^{\\circ}");
    latex = latex.replace(/^\\{/g, "\\left\\{");
    latex = latex.replace(/((?:\\alpha|\\\$|\\beta|\\eta|\\gamma|\\phi|\\pi|\\delta|\\lambda|\\mu|\\sin|\\cos|\\tan|\cot]))/gi, "{$1}");
    latex = latex.replace(/\\frac /g, "\\frac");
    latex = replaceMatches(latex, /\\frac([^{|}|\\|\^|\]|\_])/g, "\\frac{$1}");
    latex = replaceMatches(latex, /\\frac({.*?})([^{|}|\\|\^|\]|\_])/g, "\\frac$1{$2}");
    latex = latex.replace(/\\frac{}({.*?})/g, "\\frac{ }$1");
    latex = latex.replace(/\\frac({.*?})({})/g, "\\frac$1{ }");
    latex = latex.replace(/\^(\\frac{.*?}{.*?})/g, "^{$1}");
    latex = latex.replace(/\\sqrt /g, "\\sqrt");
    latex = latex.replace(/\\sqrt([^[{|[|\\])/g, "\\sqrt{$1}");
    latex = latex.replace(/\\sqrt({})/g, "\\sqrt{ }");
    latex = latex.replace(/\\sqrt(\[])/g, "\\sqrt[ ]");
    latex = latex.replace(/\\sqrt(\[])({})/g, "\\sqrt[ ]{ }");
    latex = latex.replace(/\\sqrt(\[.*?]){}/g, "\\sqrt$1{ }");
    latex = latex.replace(/\\sqrt(\[.*?])([^{])/g, "\\sqrt$1{$2}");
    latex = latex.replace(/\^(\\sqrt{.*?})/g, "^{$1}");
    latex = latex.replace(/_([^{|\\])/g, "_{$1}");
    latex = latex.replace(/\^([^{|\\])/g, "^{$1}");
    latex = latex.replace(/\\vert/g, "|");
    latex = latex.replace(/\\lbrack/g, "\\left[ ");
    latex = latex.replace(/\\rbrack/g, " \\right]");
    latex = latex.replace(/\\left\\{\\begin{array}{.}(.*?)\\end{array}\\right./g, "\\begin{cases}$1\\end{cases}");
    latex = latex.replace(/\\begin{array}{.}.*?\\end{array}/g, "");
    latex = latex.replace(/\\xrightarrow({.*?})/g, "\\overset$1{\\rightarrow }");
    latex = latex.replace(/\\right(]|}|\))/g, "{\\right$1}");
    latex = latex.replace(/\\left(\[|{|\()/g, "{\\left$1}");
    latex = latex.replace(/\\sum_([^{])/g, "\\sum_{$1}");
    latex = latex.replace(/\\sum([^_]|$)/g, "\\sum_{ }^{ }$1");
    latex = latex.replace(/\\cdot/g, "*");
    latex = latex.replace(/\\times/g, "*");
    return latex;
}

function insertLatexToEditor(latex) {
    latex = cleanLatex(latex);
    if ($(".highlighted").length > 0) {
        removeHighlighted();
    }
    var toggleLinesLength = toggleLines.length;
    var eqEdContainer = $(".eqEdContainer.activeContainer");
    var container = eqEdContainer.data("eqObject");
    addCursorAtIndex(container, highlightStartIndex);
    var posStart = highlightStartIndex ? highlightStartIndex : 0;
    generateLatexToEditor(latex, this.symbolSizeConfig);
    var posEnd = posStart + (toggleLines.length - toggleLinesLength);
    updateHighlight(container, posStart, posEnd);
}

eqEd.LatexSymbolSizeConfig = function() {
    return '{"fontSizes":["fontSizeSmallest","fontSizeSmaller","fontSizeNormal"],"fontStyles":["MathJax_MathItalic","MathJax_Main","MathJax_MainItalic","MathJax_Size1","MathJax_Size2","MathJax_Size3","MathJax_Size4"],"MathJax_Main":["0","1","2","3","4","5","6","7","8","9","−","÷","⋅","≈","*","-","=","+","/","<",">","≤","≥","∞","%","!","$",".","(",")","[","]","{","}","∂"," ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","⇌","→","^","˙","Γ","Δ","Θ","Λ","Ξ","Π","Σ","Υ","Φ","Ψ",",",";",":","Ω","∈","∋","∉","⃗","¯","◦","×","±","∧","∨","∖","∅","≡","≅","≠","∼","≺","⪯","⊂","⊆","⊃","≻","⪰","⊥","∣","∥",":","′","|","∢","∪","∩"],"MathJax_MainItalic":["ı","ȷ","|"],"MathJax_MathItalic":[" ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","Γ","Δ","Θ","Λ","Ξ","Π","Σ","Υ","Φ","Ψ","Ω","α","β","γ","δ","ε","ϵ","ζ","η","θ","ϑ","ι","κ","λ","∝","μ","ν","ξ","π","ϖ","ρ","ϱ","σ","ς","τ","υ","φ","ϕ","χ","ψ","ω","ς","\'","|"],"MathJax_Size1":["|"],"MathJax_Size2":["|"],"MathJax_Size3":["(",")","{","}","[","]","|"],"MathJax_Size4":["(",")","{","}","[","]","⎛","⎜","⎝","⎞","⎟","⎠","⎧","⎪","⎨","⎩","⎫","⎪","⎬","⎭","⎡","⎢","⎣","⎤","⎥","⎦","|"],"character":[" ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","Γ","Δ","Θ","Λ","Ξ","Π","Σ","Υ","Φ","Ψ","Ω","α","β","γ","δ","ε","ϵ","ζ","η","θ","ϑ","ι","κ","λ","∝","μ","ν","ξ","π","ϖ","ρ","ϱ","σ","ς","τ","υ","φ","ϕ","χ","ψ","ω","ς","\'","|","0","1","2","3","4","5","6","7","8","9","−","÷","⋅","≈","*","-","=","+","/","<",">","≤","≥","∞","%","!","$",".","(",")","[","]","{","}","∂"," ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","⇌","→","^","˙","Γ","Δ","Θ","Λ","Ξ","Π","Σ","Υ","Φ","Ψ",",",";",":","Ω","∈","∋","∉","⃗","¯","◦","×","±","∧","∨","∖","∅","≡","≅","≠","∼","≺","⪯","⊂","⊆","⊃","≻","⪰","⊥","∣","∥",":","′","|","∢","∪","∩","ı","ȷ","|","|","|","(",")","{","}","[","]","|","(",")","{","}","[","]","⎛","⎜","⎝","⎞","⎟","⎠","⎧","⎪","⎨","⎩","⎫","⎪","⎬","⎭","⎡","⎢","⎣","⎤","⎥","⎦","|"],"shortCharacters":[" ","a","c","e","g","ı","ȷ","m","n","o","p","q","r","s","u","v","w","x","y","z","α","γ","ε","ϵ","η","ι","κ","μ","ν","π","ϖ","ρ","ϱ","σ","ς","τ","υ","φ","χ","ω","|"],"mediumCharacters":["i","j","t","|"],"tallCharacters":["b","d","f","h","k","l","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","β","δ","ζ","θ","ϑ","λ","ξ","ϕ","ψ","Γ","Δ","Θ","Λ","Ξ","Π","Σ","Υ","Φ","Ψ","Ω","|"],"charWidthExceedsBoundingBox":{"b":0.01,"c":0.01,"d":0.01,"f":0.15,"g":0.01,"q":0.075,"y":0.01,"z":0.01,"B":0.01,"C":0.0875,"E":0.0875,"F":0.2,"H":0.1,"I":0.175,"J":0.15,"K":0.075,"M":0.075,"N":0.125,"P":0.175,"R":0.02,"S":0.04,"T":0.25,"U":0.15,"V":0.33,"W":0.13,"X":0.075,"Y":0.33,"Z":0.08,"β":0.05,"γ":0.05,"δ":0.05,"ζ":0.075,"η":0.05,"θ":0.025,"ν":0.1,"ξ":0.025,"π":0.025,"ϖ":0.025,"ρ":0.025,"ϱ":0.025,"σ":0.015,"ς":0.15,"τ":0.185,"υ":0.015,"ψ":0.015,"ı":0.15,"ȷ":0.15},"height":{"0":{"MathJax_Main":{}},"1":{"MathJax_Main":{}},"2":{"MathJax_Main":{}},"3":{"MathJax_Main":{}},"4":{"MathJax_Main":{}},"5":{"MathJax_Main":{}},"6":{"MathJax_Main":{}},"7":{"MathJax_Main":{}},"8":{"MathJax_Main":{}},"9":{"MathJax_Main":{}},"fontSizeMessage":20,"fontSizeSmallest":30,"fontSizeSmaller":35,"fontSizeNormal":45," ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"a":{"MathJax_MathItalic":{},"MathJax_Main":{}},"b":{"MathJax_MathItalic":{},"MathJax_Main":{}},"c":{"MathJax_MathItalic":{},"MathJax_Main":{}},"d":{"MathJax_MathItalic":{},"MathJax_Main":{}},"e":{"MathJax_MathItalic":{},"MathJax_Main":{}},"f":{"MathJax_MathItalic":{},"MathJax_Main":{}},"g":{"MathJax_MathItalic":{},"MathJax_Main":{}},"h":{"MathJax_MathItalic":{},"MathJax_Main":{}},"i":{"MathJax_MathItalic":{},"MathJax_Main":{}},"j":{"MathJax_MathItalic":{},"MathJax_Main":{}},"k":{"MathJax_MathItalic":{},"MathJax_Main":{}},"l":{"MathJax_MathItalic":{},"MathJax_Main":{}},"m":{"MathJax_MathItalic":{},"MathJax_Main":{}},"n":{"MathJax_MathItalic":{},"MathJax_Main":{}},"o":{"MathJax_MathItalic":{},"MathJax_Main":{}},"p":{"MathJax_MathItalic":{},"MathJax_Main":{}},"q":{"MathJax_MathItalic":{},"MathJax_Main":{}},"r":{"MathJax_MathItalic":{},"MathJax_Main":{}},"s":{"MathJax_MathItalic":{},"MathJax_Main":{}},"t":{"MathJax_MathItalic":{},"MathJax_Main":{}},"u":{"MathJax_MathItalic":{},"MathJax_Main":{}},"v":{"MathJax_MathItalic":{},"MathJax_Main":{}},"w":{"MathJax_MathItalic":{},"MathJax_Main":{}},"x":{"MathJax_MathItalic":{},"MathJax_Main":{}},"y":{"MathJax_MathItalic":{},"MathJax_Main":{}},"z":{"MathJax_MathItalic":{},"MathJax_Main":{}},"A":{"MathJax_MathItalic":{},"MathJax_Main":{}},"B":{"MathJax_MathItalic":{},"MathJax_Main":{}},"C":{"MathJax_MathItalic":{},"MathJax_Main":{}},"D":{"MathJax_MathItalic":{},"MathJax_Main":{}},"E":{"MathJax_MathItalic":{},"MathJax_Main":{}},"F":{"MathJax_MathItalic":{},"MathJax_Main":{}},"G":{"MathJax_MathItalic":{},"MathJax_Main":{}},"H":{"MathJax_MathItalic":{},"MathJax_Main":{}},"I":{"MathJax_MathItalic":{},"MathJax_Main":{}},"J":{"MathJax_MathItalic":{},"MathJax_Main":{}},"K":{"MathJax_MathItalic":{},"MathJax_Main":{}},"L":{"MathJax_MathItalic":{},"MathJax_Main":{}},"M":{"MathJax_MathItalic":{},"MathJax_Main":{}},"N":{"MathJax_MathItalic":{},"MathJax_Main":{}},"O":{"MathJax_MathItalic":{},"MathJax_Main":{}},"P":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Q":{"MathJax_MathItalic":{},"MathJax_Main":{}},"R":{"MathJax_MathItalic":{},"MathJax_Main":{}},"S":{"MathJax_MathItalic":{},"MathJax_Main":{}},"T":{"MathJax_MathItalic":{},"MathJax_Main":{}},"U":{"MathJax_MathItalic":{},"MathJax_Main":{}},"V":{"MathJax_MathItalic":{},"MathJax_Main":{}},"W":{"MathJax_MathItalic":{},"MathJax_Main":{}},"X":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Y":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Z":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Γ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Δ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Θ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Λ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Ξ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Π":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Σ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Υ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Φ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Ψ":{"MathJax_MathItalic":{},"MathJax_Main":{}},"Ω":{"MathJax_MathItalic":{},"MathJax_Main":{}},"α":{"MathJax_MathItalic":{}},"β":{"MathJax_MathItalic":{}},"γ":{"MathJax_MathItalic":{}},"δ":{"MathJax_MathItalic":{}},"ε":{"MathJax_MathItalic":{}},"ϵ":{"MathJax_MathItalic":{}},"ζ":{"MathJax_MathItalic":{}},"η":{"MathJax_MathItalic":{}},"θ":{"MathJax_MathItalic":{}},"ϑ":{"MathJax_MathItalic":{}},"ι":{"MathJax_MathItalic":{}},"κ":{"MathJax_MathItalic":{}},"λ":{"MathJax_MathItalic":{}},"∝":{"MathJax_MathItalic":{}},"μ":{"MathJax_MathItalic":{}},"ν":{"MathJax_MathItalic":{}},"ξ":{"MathJax_MathItalic":{}},"π":{"MathJax_MathItalic":{}},"ϖ":{"MathJax_MathItalic":{}},"ρ":{"MathJax_MathItalic":{}},"ϱ":{"MathJax_MathItalic":{}},"σ":{"MathJax_MathItalic":{}},"ς":{"MathJax_MathItalic":{}},"τ":{"MathJax_MathItalic":{}},"υ":{"MathJax_MathItalic":{}},"φ":{"MathJax_MathItalic":{}},"ϕ":{"MathJax_MathItalic":{}},"χ":{"MathJax_MathItalic":{}},"ψ":{"MathJax_MathItalic":{}},"ω":{"MathJax_MathItalic":{}},"\'":{"MathJax_MathItalic":{}},"|":{"MathJax_MathItalic":{},"MathJax_Main":{},"MathJax_MainItalic":{},"MathJax_Size1":{},"MathJax_Size2":{},"MathJax_Size3":{},"MathJax_Size4":{}},"−":{"MathJax_Main":{}},"÷":{"MathJax_Main":{}},"⋅":{"MathJax_Main":{}},"≈":{"MathJax_Main":{}},"*":{"MathJax_Main":{}},"-":{"MathJax_Main":{}},"=":{"MathJax_Main":{}},"+":{"MathJax_Main":{}},"/":{"MathJax_Main":{}},"<":{"MathJax_Main":{}},">":{"MathJax_Main":{}},"≤":{"MathJax_Main":{}},"≥":{"MathJax_Main":{}},"∞":{"MathJax_Main":{}},"%":{"MathJax_Main":{}},"!":{"MathJax_Main":{}},"$":{"MathJax_Main":{}},".":{"MathJax_Main":{}},"(":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},")":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},"[":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},"]":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},"{":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},"}":{"MathJax_Main":{},"MathJax_Size3":{},"MathJax_Size4":{}},"∂":{"MathJax_Main":{}},"⇌":{"MathJax_Main":{}},"→":{"MathJax_Main":{}},"^":{"MathJax_Main":{}},"˙":{"MathJax_Main":{}},",":{"MathJax_Main":{}},";":{"MathJax_Main":{}},":":{"MathJax_Main":{}},"∈":{"MathJax_Main":{}},"∋":{"MathJax_Main":{}},"∉":{"MathJax_Main":{}},"⃗":{"MathJax_Main":{}},"¯":{"MathJax_Main":{}},"◦":{"MathJax_Main":{}},"×":{"MathJax_Main":{}},"±":{"MathJax_Main":{}},"∧":{"MathJax_Main":{}},"∨":{"MathJax_Main":{}},"∖":{"MathJax_Main":{}},"∅":{"MathJax_Main":{}},"≡":{"MathJax_Main":{}},"≅":{"MathJax_Main":{}},"≠":{"MathJax_Main":{}},"∼":{"MathJax_Main":{}},"≺":{"MathJax_Main":{}},"⪯":{"MathJax_Main":{}},"⊂":{"MathJax_Main":{}},"⊆":{"MathJax_Main":{}},"⊃":{"MathJax_Main":{}},"≻":{"MathJax_Main":{}},"⪰":{"MathJax_Main":{}},"⊥":{"MathJax_Main":{}},"∣":{"MathJax_Main":{}},"∥":{"MathJax_Main":{}},"′":{"MathJax_Main":{}},"∢":{"MathJax_Main":{}},"∪":{"MathJax_Main":{}},"∩":{"MathJax_Main":{}},"ı":{"MathJax_MainItalic":{}},"ȷ":{"MathJax_MainItalic":{}},"⎛":{"MathJax_Size4":{}},"⎜":{"MathJax_Size4":{}},"⎝":{"MathJax_Size4":{}},"⎞":{"MathJax_Size4":{}},"⎟":{"MathJax_Size4":{}},"⎠":{"MathJax_Size4":{}},"⎧":{"MathJax_Size4":{}},"⎪":{"MathJax_Size4":{}},"⎨":{"MathJax_Size4":{}},"⎩":{"MathJax_Size4":{}},"⎫":{"MathJax_Size4":{}},"⎬":{"MathJax_Size4":{}},"⎭":{"MathJax_Size4":{}},"⎡":{"MathJax_Size4":{}},"⎢":{"MathJax_Size4":{}},"⎣":{"MathJax_Size4":{}},"⎤":{"MathJax_Size4":{}},"⎥":{"MathJax_Size4":{}},"⎦":{"MathJax_Size4":{}}},"width":{"0":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"1":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"2":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"3":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"4":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"5":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"6":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"7":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"8":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"9":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}}," ":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":16,"fontSizeNormal":24},"MathJax_Main":{"fontSizeSmallest":13,"fontSizeSmaller":16,"fontSizeNormal":24}},"a":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"b":{"MathJax_MathItalic":{"fontSizeSmallest":15.15,"fontSizeSmaller":11.11,"fontSizeNormal":23.23},"MathJax_Main":{"fontSizeSmallest":17.17,"fontSizeSmaller":12.120000000000001,"fontSizeNormal":25.25}},"c":{"MathJax_MathItalic":{"fontSizeSmallest":13.13,"fontSizeSmaller":9.09,"fontSizeNormal":20.2},"MathJax_Main":{"fontSizeSmallest":13.13,"fontSizeSmaller":9.09,"fontSizeNormal":20.2}},"d":{"MathJax_MathItalic":{"fontSizeSmallest":15.15,"fontSizeSmaller":11.11,"fontSizeNormal":23.23},"MathJax_Main":{"fontSizeSmallest":17.17,"fontSizeSmaller":12.120000000000001,"fontSizeNormal":25.25}},"e":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20},"MathJax_Main":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20}},"f":{"MathJax_MathItalic":{"fontSizeSmallest":9.2,"fontSizeSmaller":6.8999999999999995,"fontSizeNormal":14.95},"MathJax_Main":{"fontSizeSmallest":10.35,"fontSizeSmaller":6.8999999999999995,"fontSizeNormal":16.099999999999998}},"g":{"MathJax_MathItalic":{"fontSizeSmallest":15.15,"fontSizeSmaller":11.11,"fontSizeNormal":23.23},"MathJax_Main":{"fontSizeSmallest":15.15,"fontSizeSmaller":11.11,"fontSizeNormal":23.23}},"h":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25}},"i":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"j":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Main":{"fontSizeSmallest":9,"fontSizeSmaller":6,"fontSizeNormal":14}},"k":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20},"MathJax_Main":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":24}},"l":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"m":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":25,"fontSizeSmaller":18,"fontSizeNormal":38}},"n":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25}},"o":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"p":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25}},"q":{"MathJax_MathItalic":{"fontSizeSmallest":16.125,"fontSizeSmaller":11.825,"fontSizeNormal":24.724999999999998},"MathJax_Main":{"fontSizeSmallest":17.2,"fontSizeSmaller":11.825,"fontSizeNormal":25.799999999999997}},"r":{"MathJax_MathItalic":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18},"MathJax_Main":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18}},"s":{"MathJax_MathItalic":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18},"MathJax_Main":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18}},"t":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Main":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18}},"u":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25}},"v":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20},"MathJax_Main":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":24}},"w":{"MathJax_MathItalic":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30},"MathJax_Main":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33}},"x":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20},"MathJax_Main":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":24}},"y":{"MathJax_MathItalic":{"fontSizeSmallest":13.13,"fontSizeSmaller":9.09,"fontSizeNormal":20.2},"MathJax_Main":{"fontSizeSmallest":16.16,"fontSizeSmaller":11.11,"fontSizeNormal":24.240000000000002}},"z":{"MathJax_MathItalic":{"fontSizeSmallest":12.120000000000001,"fontSizeSmaller":8.08,"fontSizeNormal":18.18},"MathJax_Main":{"fontSizeSmallest":13.13,"fontSizeSmaller":9.09,"fontSizeNormal":20.2}},"A":{"MathJax_MathItalic":{"fontSizeSmallest":18,"fontSizeSmaller":13,"fontSizeNormal":28},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"B":{"MathJax_MathItalic":{"fontSizeSmallest":18.18,"fontSizeSmaller":13.13,"fontSizeNormal":28.28},"MathJax_Main":{"fontSizeSmallest":21.21,"fontSizeSmaller":15.15,"fontSizeNormal":32.32}},"C":{"MathJax_MathItalic":{"fontSizeSmallest":21.75,"fontSizeSmaller":15.224999999999998,"fontSizeNormal":32.625},"MathJax_Main":{"fontSizeSmallest":23.924999999999997,"fontSizeSmaller":16.3125,"fontSizeNormal":35.887499999999996}},"D":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"E":{"MathJax_MathItalic":{"fontSizeSmallest":19.575,"fontSizeSmaller":14.1375,"fontSizeNormal":30.449999999999996},"MathJax_Main":{"fontSizeSmallest":21.75,"fontSizeSmaller":15.224999999999998,"fontSizeNormal":33.7125}},"F":{"MathJax_MathItalic":{"fontSizeSmallest":21.599999999999998,"fontSizeSmaller":15.6,"fontSizeNormal":33.6},"MathJax_Main":{"fontSizeSmallest":24,"fontSizeSmaller":16.8,"fontSizeNormal":34.8}},"G":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":24,"fontSizeSmaller":17,"fontSizeNormal":35}},"H":{"MathJax_MathItalic":{"fontSizeSmallest":24.200000000000003,"fontSizeSmaller":16.5,"fontSizeNormal":36.300000000000004},"MathJax_Main":{"fontSizeSmallest":25.3,"fontSizeSmaller":17.6,"fontSizeNormal":37.400000000000006}},"I":{"MathJax_MathItalic":{"fontSizeSmallest":11.75,"fontSizeSmaller":8.225,"fontSizeNormal":17.625},"MathJax_Main":{"fontSizeSmallest":12.925,"fontSizeSmaller":9.4,"fontSizeNormal":18.8}},"J":{"MathJax_MathItalic":{"fontSizeSmallest":14.95,"fontSizeSmaller":10.35,"fontSizeNormal":23},"MathJax_Main":{"fontSizeSmallest":17.25,"fontSizeSmaller":12.649999999999999,"fontSizeNormal":26.45}},"K":{"MathJax_MathItalic":{"fontSizeSmallest":21.5,"fontSizeSmaller":15.049999999999999,"fontSizeNormal":32.25},"MathJax_Main":{"fontSizeSmallest":24.724999999999998,"fontSizeSmaller":17.2,"fontSizeNormal":37.625}},"L":{"MathJax_MathItalic":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25},"MathJax_Main":{"fontSizeSmallest":19,"fontSizeSmaller":13,"fontSizeNormal":28}},"M":{"MathJax_MathItalic":{"fontSizeSmallest":26.875,"fontSizeSmaller":19.349999999999998,"fontSizeNormal":40.85},"MathJax_Main":{"fontSizeSmallest":30.099999999999998,"fontSizeSmaller":20.425,"fontSizeNormal":44.074999999999996}},"N":{"MathJax_MathItalic":{"fontSizeSmallest":22.5,"fontSizeSmaller":15.75,"fontSizeNormal":33.75},"MathJax_Main":{"fontSizeSmallest":25.875,"fontSizeSmaller":18,"fontSizeNormal":38.25}},"O":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"P":{"MathJax_MathItalic":{"fontSizeSmallest":21.150000000000002,"fontSizeSmaller":15.275,"fontSizeNormal":32.9},"MathJax_Main":{"fontSizeSmallest":23.5,"fontSizeSmaller":16.45,"fontSizeNormal":36.425000000000004}},"Q":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"R":{"MathJax_MathItalic":{"fontSizeSmallest":18.36,"fontSizeSmaller":13.26,"fontSizeNormal":28.560000000000002},"MathJax_Main":{"fontSizeSmallest":22.44,"fontSizeSmaller":15.3,"fontSizeNormal":33.660000000000004}},"S":{"MathJax_MathItalic":{"fontSizeSmallest":15.600000000000001,"fontSizeSmaller":11.440000000000001,"fontSizeNormal":23.92},"MathJax_Main":{"fontSizeSmallest":17.68,"fontSizeSmaller":12.48,"fontSizeNormal":26}},"T":{"MathJax_MathItalic":{"fontSizeSmallest":21.25,"fontSizeSmaller":15,"fontSizeNormal":31.25},"MathJax_Main":{"fontSizeSmallest":27.5,"fontSizeSmaller":18.75,"fontSizeNormal":41.25}},"U":{"MathJax_MathItalic":{"fontSizeSmallest":25.299999999999997,"fontSizeSmaller":17.25,"fontSizeNormal":37.949999999999996},"MathJax_Main":{"fontSizeSmallest":26.45,"fontSizeSmaller":18.4,"fontSizeNormal":39.099999999999994}},"V":{"MathJax_MathItalic":{"fontSizeSmallest":23.94,"fontSizeSmaller":17.29,"fontSizeNormal":37.24},"MathJax_Main":{"fontSizeSmallest":30.590000000000003,"fontSizeSmaller":21.28,"fontSizeNormal":45.22}},"W":{"MathJax_MathItalic":{"fontSizeSmallest":28.249999999999996,"fontSizeSmaller":20.339999999999996,"fontSizeNormal":42.94},"MathJax_Main":{"fontSizeSmallest":35.029999999999994,"fontSizeSmaller":24.86,"fontSizeNormal":51.98}},"X":{"MathJax_MathItalic":{"fontSizeSmallest":19.349999999999998,"fontSizeSmaller":13.975,"fontSizeNormal":30.099999999999998},"MathJax_Main":{"fontSizeSmallest":24.724999999999998,"fontSizeSmaller":17.2,"fontSizeNormal":36.55}},"Y":{"MathJax_MathItalic":{"fontSizeSmallest":22.61,"fontSizeSmaller":15.96,"fontSizeNormal":33.25},"MathJax_Main":{"fontSizeSmallest":30.590000000000003,"fontSizeSmaller":21.28,"fontSizeNormal":45.22}},"Z":{"MathJax_MathItalic":{"fontSizeSmallest":18.36,"fontSizeSmaller":12.96,"fontSizeNormal":27},"MathJax_Main":{"fontSizeSmallest":19.44,"fontSizeSmaller":14.040000000000001,"fontSizeNormal":30.240000000000002}},"Γ":{"MathJax_MathItalic":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":26},"MathJax_Main":{"fontSizeSmallest":19,"fontSizeSmaller":13,"fontSizeNormal":28}},"Δ":{"MathJax_MathItalic":{"fontSizeSmallest":18,"fontSizeSmaller":12,"fontSizeNormal":26},"MathJax_Main":{"fontSizeSmallest":25,"fontSizeSmaller":18,"fontSizeNormal":38}},"Θ":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"Λ":{"MathJax_MathItalic":{"fontSizeSmallest":18,"fontSizeSmaller":13,"fontSizeNormal":27},"MathJax_Main":{"fontSizeSmallest":21,"fontSizeSmaller":15,"fontSizeNormal":31}},"Ξ":{"MathJax_MathItalic":{"fontSizeSmallest":19,"fontSizeSmaller":13,"fontSizeNormal":29},"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"Π":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"Σ":{"MathJax_MathItalic":{"fontSizeSmallest":18,"fontSizeSmaller":12,"fontSizeNormal":27},"MathJax_Main":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33}},"Υ":{"MathJax_MathItalic":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"Φ":{"MathJax_MathItalic":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34},"MathJax_Main":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33}},"Ψ":{"MathJax_MathItalic":{"fontSizeSmallest":21,"fontSizeSmaller":15,"fontSizeNormal":32},"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"Ω":{"MathJax_MathItalic":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33},"MathJax_Main":{"fontSizeSmallest":22,"fontSizeSmaller":15,"fontSizeNormal":33}},"α":{"MathJax_MathItalic":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":24}},"β":{"MathJax_MathItalic":{"fontSizeSmallest":15.75,"fontSizeSmaller":10.5,"fontSizeNormal":23.1}},"γ":{"MathJax_MathItalic":{"fontSizeSmallest":12.600000000000001,"fontSizeSmaller":8.4,"fontSizeNormal":18.900000000000002}},"δ":{"MathJax_MathItalic":{"fontSizeSmallest":14.700000000000001,"fontSizeSmaller":10.5,"fontSizeNormal":22.05}},"ε":{"MathJax_MathItalic":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18}},"ϵ":{"MathJax_MathItalic":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18}},"ζ":{"MathJax_MathItalic":{"fontSizeSmallest":12.899999999999999,"fontSizeSmaller":9.674999999999999,"fontSizeNormal":19.349999999999998}},"η":{"MathJax_MathItalic":{"fontSizeSmallest":15.75,"fontSizeSmaller":10.5,"fontSizeNormal":23.1}},"θ":{"MathJax_MathItalic":{"fontSizeSmallest":15.374999999999998,"fontSizeSmaller":10.25,"fontSizeNormal":22.549999999999997}},"ϑ":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":10,"fontSizeNormal":22}},"ι":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"κ":{"MathJax_MathItalic":{"fontSizeSmallest":14,"fontSizeSmaller":10,"fontSizeNormal":22}},"λ":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20}},"∝":{"MathJax_MathItalic":{"fontSizeSmallest":21,"fontSizeSmaller":15,"fontSizeNormal":32}},"μ":{"MathJax_MathItalic":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"ν":{"MathJax_MathItalic":{"fontSizeSmallest":14.3,"fontSizeSmaller":9.9,"fontSizeNormal":22}},"ξ":{"MathJax_MathItalic":{"fontSizeSmallest":13.325,"fontSizeSmaller":9.225,"fontSizeNormal":19.474999999999998}},"π":{"MathJax_MathItalic":{"fontSizeSmallest":15.374999999999998,"fontSizeSmaller":11.274999999999999,"fontSizeNormal":23.575}},"ϖ":{"MathJax_MathItalic":{"fontSizeSmallest":21.525,"fontSizeSmaller":15.374999999999998,"fontSizeNormal":32.8}},"ρ":{"MathJax_MathItalic":{"fontSizeSmallest":14.349999999999998,"fontSizeSmaller":10.25,"fontSizeNormal":22.549999999999997}},"ϱ":{"MathJax_MathItalic":{"fontSizeSmallest":15.374999999999998,"fontSizeSmaller":11.274999999999999,"fontSizeNormal":23.575}},"σ":{"MathJax_MathItalic":{"fontSizeSmallest":15.224999999999998,"fontSizeSmaller":10.149999999999999,"fontSizeNormal":22.33}},"ς":{"MathJax_MathItalic":{"fontSizeSmallest":13.799999999999999,"fontSizeSmaller":10.35,"fontSizeNormal":20.7}},"τ":{"MathJax_MathItalic":{"fontSizeSmallest":13.035,"fontSizeSmaller":9.48,"fontSizeNormal":18.96}},"υ":{"MathJax_MathItalic":{"fontSizeSmallest":14.209999999999999,"fontSizeSmaller":10.149999999999999,"fontSizeNormal":21.314999999999998}},"φ":{"MathJax_MathItalic":{"fontSizeSmallest":17,"fontSizeSmaller":12,"fontSizeNormal":25}},"ϕ":{"MathJax_MathItalic":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":23}},"χ":{"MathJax_MathItalic":{"fontSizeSmallest":13,"fontSizeSmaller":9,"fontSizeNormal":20}},"ψ":{"MathJax_MathItalic":{"fontSizeSmallest":19.284999999999997,"fontSizeSmaller":13.194999999999999,"fontSizeNormal":28.419999999999998}},"ω":{"MathJax_MathItalic":{"fontSizeSmallest":21,"fontSizeSmaller":15,"fontSizeNormal":32}},"\'":{"MathJax_MathItalic":{"fontSizeSmallest":6,"fontSizeSmaller":5,"fontSizeNormal":10}},"|":{"MathJax_MathItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":12},"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_MainItalic":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":12},"MathJax_Size1":{"fontSizeSmallest":6,"fontSizeSmaller":4,"fontSizeNormal":9},"MathJax_Size2":{"fontSizeSmallest":6,"fontSizeSmaller":4,"fontSizeNormal":9},"MathJax_Size3":{"fontSizeSmallest":6,"fontSizeSmaller":4,"fontSizeNormal":9},"MathJax_Size4":{"fontSizeSmallest":6,"fontSizeSmaller":4,"fontSizeNormal":9}},"−":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"÷":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⋅":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"≈":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"*":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"-":{"MathJax_Main":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15}},"=":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"+":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"/":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"<":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},">":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"≤":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"≥":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"∞":{"MathJax_Main":{"fontSizeSmallest":30,"fontSizeSmaller":21,"fontSizeNormal":45}},"%":{"MathJax_Main":{"fontSizeSmallest":25,"fontSizeSmaller":18,"fontSizeNormal":38}},"!":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"$":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},".":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"(":{"MathJax_Main":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18},"MathJax_Size3":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15},"MathJax_Size4":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15}},")":{"MathJax_Main":{"fontSizeSmallest":12,"fontSizeSmaller":8,"fontSizeNormal":18},"MathJax_Size3":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15},"MathJax_Size4":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15}},"[":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Size3":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15},"MathJax_Size4":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15}},"]":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13},"MathJax_Size3":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15},"MathJax_Size4":{"fontSizeSmallest":10,"fontSizeSmaller":7,"fontSizeNormal":15}},"{":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Size3":{"fontSizeSmallest":14,"fontSizeSmaller":10,"fontSizeNormal":22},"MathJax_Size4":{"fontSizeSmallest":14,"fontSizeSmaller":10,"fontSizeNormal":22}},"}":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23},"MathJax_Size3":{"fontSizeSmallest":14,"fontSizeSmaller":10,"fontSizeNormal":22},"MathJax_Size4":{"fontSizeSmallest":14,"fontSizeSmaller":10,"fontSizeNormal":22}},"∂":{"MathJax_Main":{"fontSizeSmallest":16,"fontSizeSmaller":11,"fontSizeNormal":24}},"⇌":{"MathJax_Main":{"fontSizeSmallest":30,"fontSizeSmaller":21,"fontSizeNormal":45}},"→":{"MathJax_Main":{"fontSizeSmallest":30,"fontSizeSmaller":21,"fontSizeNormal":45}},"^":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"˙":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},",":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},";":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},":":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"∈":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∋":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∉":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"⃗":{"MathJax_Main":{"fontSizeSmallest":0,"fontSizeSmaller":0,"fontSizeNormal":0}},"¯":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"◦":{"MathJax_Main":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"×":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"±":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"∧":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∨":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∖":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"∅":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"≡":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"≅":{"MathJax_Main":{"fontSizeSmallest":30,"fontSizeSmaller":21,"fontSizeNormal":45}},"≠":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"∼":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"≺":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⪯":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⊂":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⊆":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⊃":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"≻":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⪰":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"⊥":{"MathJax_Main":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":35}},"∣":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":13}},"∥":{"MathJax_Main":{"fontSizeSmallest":15,"fontSizeSmaller":11,"fontSizeNormal":23}},"′":{"MathJax_Main":{"fontSizeSmallest":8,"fontSizeSmaller":6,"fontSizeNormal":12}},"∢":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∪":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"∩":{"MathJax_Main":{"fontSizeSmallest":20,"fontSizeSmaller":14,"fontSizeNormal":30}},"ı":{"MathJax_MainItalic":{"fontSizeSmallest":10.35,"fontSizeSmaller":6.8999999999999995,"fontSizeNormal":16.099999999999998}},"ȷ":{"MathJax_MainItalic":{"fontSizeSmallest":11.5,"fontSizeSmaller":8.049999999999999,"fontSizeNormal":17.25}},"⎛":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎜":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎝":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎞":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎟":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎠":{"MathJax_Size4":{"fontSizeSmallest":23,"fontSizeSmaller":16,"fontSizeNormal":34}},"⎧":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎪":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎨":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎩":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎫":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎬":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎭":{"MathJax_Size4":{"fontSizeSmallest":21,"fontSizeSmaller":14,"fontSizeNormal":31}},"⎡":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"⎢":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"⎣":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"⎤":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"⎥":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}},"⎦":{"MathJax_Size4":{"fontSizeSmallest":11,"fontSizeSmaller":7,"fontSizeNormal":16}}}}';
};
